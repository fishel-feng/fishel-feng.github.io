<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>隋堤倦客</title>
  
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://fx109138.github.io/"/>
  <updated>2017-09-21T15:24:45.000Z</updated>
  <id>http://fx109138.github.io/</id>
  
  <author>
    <name>隋堤倦客</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>设计模式之策略模式</title>
    <link href="http://fx109138.github.io/2017/09/21/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F%E4%B9%8B%E7%AD%96%E7%95%A5%E6%A8%A1%E5%BC%8F/"/>
    <id>http://fx109138.github.io/2017/09/21/设计模式之策略模式/</id>
    <published>2017-09-21T14:41:55.000Z</published>
    <updated>2017-09-21T15:24:45.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="什么是策略模式"><a href="#什么是策略模式" class="headerlink" title="什么是策略模式"></a>什么是策略模式</h2><blockquote><p>定义一组算法，将每个算法都封装起来，并且使它们之间可以互换。</p></blockquote><p>策略模式也叫政策模式，它很好的应用了面向对象思想，下面来感受一下。</p><h2 id="举个栗子"><a href="#举个栗子" class="headerlink" title="举个栗子"></a>举个栗子</h2><p>策略模式的模型图<br><img src="http://oux9g0njr.bkt.clouddn.com/17-9-21/51504515.jpg" alt=""></p><p>策略模式有三种角色：上下文、抽象策略、具体策略，下面来看实例编码</p><ul><li>抽象策略</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">Strategy</span> </span>&#123;</div><div class="line">    <span class="function"><span class="keyword">void</span> <span class="title">method</span><span class="params">()</span></span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure><ul><li>具体策略</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ConcreteStrategy1</span> <span class="keyword">implements</span> <span class="title">Strategy</span> </span>&#123;</div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">method</span><span class="params">()</span> </span>&#123;</div><div class="line">        System.out.println(<span class="string">"策略1"</span>);</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ConcreteStrategy2</span> <span class="keyword">implements</span> <span class="title">Strategy</span> </span>&#123;</div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">method</span><span class="params">()</span> </span>&#123;</div><div class="line">        System.out.println(<span class="string">"策略2"</span>);</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure><ul><li>上下文</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Context</span> </span>&#123;</div><div class="line">    <span class="keyword">private</span> Strategy strategy;</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Context</span><span class="params">(Strategy strategy)</span> </span>&#123;</div><div class="line">        <span class="keyword">this</span>.strategy = strategy;</div><div class="line">    &#125;</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">contextMethod</span><span class="params">()</span></span>&#123;</div><div class="line">        strategy.method();</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure><ul><li>调用场景</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Client</span> </span>&#123;</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</div><div class="line">        Strategy strategy1 = <span class="keyword">new</span> ConcreteStrategy1();</div><div class="line">        Strategy strategy2 = <span class="keyword">new</span> ConcreteStrategy2();</div><div class="line">        Context context;</div><div class="line">        context = <span class="keyword">new</span> Context(strategy1);</div><div class="line">        context.contextMethod();</div><div class="line">        context = <span class="keyword">new</span> Context(strategy2);</div><div class="line">        context.contextMethod();</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure><p>输出结果</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">策略1</div><div class="line">策略2</div></pre></td></tr></table></figure><p>这就是策略模式，特别简单，你甚至会觉得这就是很普通的代码，然而就是这样，只要有面向对象的思想，就能看懂策略模式。</p><h2 id="适用范围"><a href="#适用范围" class="headerlink" title="适用范围"></a>适用范围</h2><p>策略模式适用于在算法策略上不同但是需要相互切换的场景，我们无需关注算法内部细节，而且他们之间可以随意切换使用，非常自由。</p><h2 id="优点缺点"><a href="#优点缺点" class="headerlink" title="优点缺点"></a>优点缺点</h2><p>策略模式优点就是只要实现接口，就可以扩展，切换十分自由，并且通过一个上下文环境来避免了逻辑条件判断语句，简化了操作。</p><p>策略模式的缺点是类的数量会变多，而且所有的类都要对调用者暴露，违背迪米特法则，实际应用中需要结合其他设计模式来修正这些缺点。</p><h2 id="策略枚举"><a href="#策略枚举" class="headerlink" title="策略枚举"></a>策略枚举</h2><p>策略模式还有一种很好的用法就是策略枚举，这里用一个非常典型的加减法计算器为例</p><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="keyword">enum</span> Calculator &#123;  </div><div class="line">    ADD(<span class="string">"+"</span>) &#123;  </div><div class="line">        <span class="meta">@Override</span>  </div><div class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">exec</span><span class="params">(<span class="keyword">int</span> a, <span class="keyword">int</span> b)</span> </span>&#123;   </div><div class="line">            <span class="keyword">return</span> a+b;  </div><div class="line">        &#125;  </div><div class="line">    &#125;,   </div><div class="line">    SUB(<span class="string">"-"</span>) &#123;  </div><div class="line">        <span class="meta">@Override</span>  </div><div class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">exec</span><span class="params">(<span class="keyword">int</span> a, <span class="keyword">int</span> b)</span> </span>&#123;   </div><div class="line">            <span class="keyword">return</span> a-b;  </div><div class="line">        &#125;  </div><div class="line">    &#125;;    </div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">int</span> <span class="title">exec</span><span class="params">(<span class="keyword">int</span> a, <span class="keyword">int</span> b)</span></span>;  </div><div class="line">    <span class="comment">//运算符  </span></div><div class="line">    <span class="keyword">private</span> String value = <span class="string">""</span>;  </div><div class="line">    <span class="function"><span class="keyword">private</span> <span class="title">Calculator</span><span class="params">(String value)</span> </span>&#123;  </div><div class="line">        <span class="keyword">this</span>.value = value;  </div><div class="line">    &#125; </div><div class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getValue</span><span class="params">()</span> </span>&#123;  </div><div class="line">        <span class="keyword">return</span> value;  </div><div class="line">    &#125;  </div><div class="line">&#125;</div></pre></td></tr></table></figure><ul><li>调用场景</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;  </div><div class="line"><span class="keyword">int</span> add = Calculator.ADD.exec(<span class="number">10</span>, <span class="number">30</span>);  </div><div class="line">    <span class="keyword">int</span> sub = Calculator.SUB.exec(<span class="number">10</span>, <span class="number">30</span>); </div><div class="line">&#125;</div></pre></td></tr></table></figure><p>非常简单，就是应用了一下枚举类，不过里面有着很明显的策略模式，这是一种很好的用法，用于处理不变的角色。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;什么是策略模式&quot;&gt;&lt;a href=&quot;#什么是策略模式&quot; class=&quot;headerlink&quot; title=&quot;什么是策略模式&quot;&gt;&lt;/a&gt;什么是策略模式&lt;/h2&gt;&lt;blockquote&gt;
&lt;p&gt;定义一组算法，将每个算法都封装起来，并且使它们之间可以互换。&lt;/p&gt;
&lt;/
      
    
    </summary>
    
    
      <category term="设计模式" scheme="http://fx109138.github.io/tags/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"/>
    
  </entry>
  
  <entry>
    <title>设计模式之责任链模式</title>
    <link href="http://fx109138.github.io/2017/09/21/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F%E4%B9%8B%E8%B4%A3%E4%BB%BB%E9%93%BE%E6%A8%A1%E5%BC%8F/"/>
    <id>http://fx109138.github.io/2017/09/21/设计模式之责任链模式/</id>
    <published>2017-09-21T12:54:52.000Z</published>
    <updated>2017-09-21T14:36:26.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="责任链模式的定义"><a href="#责任链模式的定义" class="headerlink" title="责任链模式的定义"></a>责任链模式的定义</h2><blockquote><p>使多个对象都有机会处理请求，从而避免了请求的发送者和接受者之间的耦合关系。将这些对象连成一条链，并沿着这条链传递该请求，直到有对象处理它为止。</p></blockquote><p>责任链模式重点就在链上，就好像击鼓传花一样，请求会在这个链上传递，在传递的过程中处理。</p><h2 id="举个栗子"><a href="#举个栗子" class="headerlink" title="举个栗子"></a>举个栗子</h2><p>责任链模式的模型图<br><img src="http://oux9g0njr.bkt.clouddn.com/17-9-21/23962467.jpg" alt=""></p><p>下面是具体编码</p><ul><li>处理者抽象类</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">Handler</span> </span>&#123;</div><div class="line">    <span class="comment">//下一处理者</span></div><div class="line">    <span class="keyword">private</span> Handler next;</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">final</span> Response <span class="title">handleRequest</span><span class="params">(Request request)</span></span>&#123;</div><div class="line">        Response response=<span class="keyword">null</span>;</div><div class="line">        <span class="comment">//判断是否为自己处理级别</span></div><div class="line">        <span class="keyword">if</span> (getHandlerLevel().equals(request.getRequestLevel()))&#123;</div><div class="line">            response=operate(request);</div><div class="line">        &#125;<span class="keyword">else</span> &#123;</div><div class="line">            <span class="keyword">if</span> (next!=<span class="keyword">null</span>)&#123;</div><div class="line">                response=next.handleRequest(request);</div><div class="line">            &#125;<span class="keyword">else</span> &#123;</div><div class="line"></div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">return</span> response;</div><div class="line">    &#125;</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setNext</span><span class="params">(Handler next)</span> </span>&#123;</div><div class="line">        <span class="keyword">this</span>.next = next;</div><div class="line">    &#125;</div><div class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">abstract</span> Level <span class="title">getHandlerLevel</span><span class="params">()</span></span>;</div><div class="line">    <span class="comment">//处理</span></div><div class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">abstract</span> Response <span class="title">operate</span><span class="params">(Request request)</span></span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure><ul><li>处理者实现</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ConcreteHandler1</span> <span class="keyword">extends</span> <span class="title">Handler</span> </span>&#123;</div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">protected</span> Level <span class="title">getHandlerLevel</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="comment">//设置处理级别</span></div><div class="line">        <span class="keyword">return</span> <span class="keyword">null</span>;</div><div class="line">    &#125;</div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">protected</span> Response <span class="title">operate</span><span class="params">(Request request)</span> </span>&#123;</div><div class="line">        <span class="comment">//处理逻辑</span></div><div class="line">        <span class="keyword">return</span> <span class="keyword">null</span>;</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ConcreteHandler2</span> <span class="keyword">extends</span> <span class="title">Handler</span> </span>&#123;</div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">protected</span> Level <span class="title">getHandlerLevel</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="comment">//设置处理级别</span></div><div class="line">        <span class="keyword">return</span> <span class="keyword">null</span>;</div><div class="line">    &#125;</div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">protected</span> Response <span class="title">operate</span><span class="params">(Request request)</span> </span>&#123;</div><div class="line">        <span class="comment">//处理逻辑</span></div><div class="line">        <span class="keyword">return</span> <span class="keyword">null</span>;</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ConcreteHandler3</span> <span class="keyword">extends</span> <span class="title">Handler</span> </span>&#123;</div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">protected</span> Level <span class="title">getHandlerLevel</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="comment">//设置处理级别</span></div><div class="line">        <span class="keyword">return</span> <span class="keyword">null</span>;</div><div class="line">    &#125;</div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">protected</span> Response <span class="title">operate</span><span class="params">(Request request)</span> </span>&#123;</div><div class="line">        <span class="comment">//处理逻辑</span></div><div class="line">        <span class="keyword">return</span> <span class="keyword">null</span>;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure><ul><li>请求</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Request</span> </span>&#123;</div><div class="line">    <span class="function"><span class="keyword">public</span> Level <span class="title">getRequestLevel</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="comment">//请求等级</span></div><div class="line">        <span class="keyword">return</span> <span class="keyword">null</span>;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure><ul><li>结果</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Response</span> </span>&#123;</div><div class="line">    <span class="comment">//处理结果</span></div><div class="line">&#125;</div></pre></td></tr></table></figure><ul><li>级别</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Level</span> </span>&#123;</div><div class="line">    <span class="comment">//请求和处理等级</span></div><div class="line">&#125;</div></pre></td></tr></table></figure><ul><li>调用场景</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Client</span> </span>&#123;</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</div><div class="line">        Handler handler1 = <span class="keyword">new</span> ConcreteHandler1();</div><div class="line">        Handler handler2 = <span class="keyword">new</span> ConcreteHandler2();</div><div class="line">        Handler handler3 = <span class="keyword">new</span> ConcreteHandler3();</div><div class="line">        <span class="comment">//按照123顺序处理</span></div><div class="line">        handler1.setNext(handler2);</div><div class="line">        handler2.setNext(handler3);</div><div class="line">        Response response = handler1.handleRequest(<span class="keyword">new</span> Request());</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure><p>这样就完成了一条责任链的实现，一个请求传过来，逐级处理，非常方便，代码也不难理解。</p><h2 id="适用范围"><a href="#适用范围" class="headerlink" title="适用范围"></a>适用范围</h2><p>责任链模式可以用在逐级处理或者追加逻辑的场景里，由于责任链条是自由组合的，连接起来非常方便，自由组合度也很高。</p><h2 id="优点缺点"><a href="#优点缺点" class="headerlink" title="优点缺点"></a>优点缺点</h2><p>责任链模式的优点在于请求和结果是分开的，请求者不必关心处理者，责任链是一个整体，不需要关心细节，有助于解耦。</p><p>责任链模式的缺点一方面是性能问题，一条整的责任链必须遍历一遍才能得到结果，另一方面是调试的不方便，不容易排查某一个节点的问题。</p><h2 id="注意事项"><a href="#注意事项" class="headerlink" title="注意事项"></a>注意事项</h2><p>只用责任链模式要注意不要太长，要学会控制责任链的复杂程度，否则会严重影响性能。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;责任链模式的定义&quot;&gt;&lt;a href=&quot;#责任链模式的定义&quot; class=&quot;headerlink&quot; title=&quot;责任链模式的定义&quot;&gt;&lt;/a&gt;责任链模式的定义&lt;/h2&gt;&lt;blockquote&gt;
&lt;p&gt;使多个对象都有机会处理请求，从而避免了请求的发送者和接受者之间的耦
      
    
    </summary>
    
    
      <category term="设计模式" scheme="http://fx109138.github.io/tags/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"/>
    
  </entry>
  
  <entry>
    <title>设计模式之命令模式</title>
    <link href="http://fx109138.github.io/2017/09/21/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F%E4%B9%8B%E5%91%BD%E4%BB%A4%E6%A8%A1%E5%BC%8F/"/>
    <id>http://fx109138.github.io/2017/09/21/设计模式之命令模式/</id>
    <published>2017-09-21T10:49:10.000Z</published>
    <updated>2017-09-21T12:38:41.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="什么是命令模式"><a href="#什么是命令模式" class="headerlink" title="什么是命令模式"></a>什么是命令模式</h2><blockquote><p>将一个请求封装为一个对象，从而使你可用不同的请求对客户进行参数化; 对请求排队或记录请求日志，以及支持可撤销的操作。</p></blockquote><p>还是通过例子来理解这种设计模式。</p><h2 id="举个栗子"><a href="#举个栗子" class="headerlink" title="举个栗子"></a>举个栗子</h2><p>命令模式的模型图<br><img src="http://oux9g0njr.bkt.clouddn.com/17-9-21/11670976.jpg" alt=""></p><p>命令模式有三种角色：接收者、命令、调用者，他的封装性特别好，下面来体验一下编码过程</p><ul><li>抽象接收者及实现</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">Receiver</span> </span>&#123;</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">void</span> <span class="title">action</span><span class="params">()</span></span>;</div><div class="line">&#125;</div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ConcreteReceiver</span> <span class="keyword">extends</span> <span class="title">Receiver</span> </span>&#123;</div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">action</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="comment">//接收者任务</span></div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure><ul><li>抽象命令及实现</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">Command</span> </span>&#123;</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">void</span> <span class="title">execute</span><span class="params">()</span></span>;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ConcreteCommand</span> <span class="keyword">extends</span> <span class="title">Command</span> </span>&#123;</div><div class="line">    <span class="keyword">private</span> Receiver receiver;</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="title">ConcreteCommand</span><span class="params">(Receiver receiver)</span> </span>&#123;</div><div class="line">        <span class="keyword">this</span>.receiver = receiver;</div><div class="line">    &#125;</div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">execute</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="comment">//执行命令</span></div><div class="line">        receiver.action();</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure><ul><li>调用者</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Invoker</span> </span>&#123;</div><div class="line">    <span class="comment">//接受并执行</span></div><div class="line">    <span class="keyword">private</span> Command command;</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setCommand</span><span class="params">(Command command)</span> </span>&#123;</div><div class="line">        <span class="keyword">this</span>.command = command;</div><div class="line">    &#125;</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">invokeCommand</span><span class="params">()</span></span>&#123;</div><div class="line">        command.execute();</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure><ul><li>使用场景</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Client</span> </span>&#123;</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</div><div class="line">        Invoker invoker=<span class="keyword">new</span> Invoker();</div><div class="line">        Receiver receiver=<span class="keyword">new</span> ConcreteReceiver();</div><div class="line">        Command command=<span class="keyword">new</span> ConcreteCommand(receiver);</div><div class="line">        invoker.setCommand(command);</div><div class="line">        invoker.invokeCommand();</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure><p>这就是命令模式，它的特点是命令的接收者和调用者之间没有任何耦合，这样可以很容易地应对各种变化。</p><h2 id="适用范围"><a href="#适用范围" class="headerlink" title="适用范围"></a>适用范围</h2><p>命令模式的使用和它的名字一样，只要是命令的地方就可以用命令模式，结合其他设计模式使用会更加能发挥它的价值。</p><h2 id="优点缺点"><a href="#优点缺点" class="headerlink" title="优点缺点"></a>优点缺点</h2><p>优点就是命令的接受和调用完全解耦，有利于扩展，而且开发简单。</p><p>缺点就是命令过多的时候类的数量会增加，如果不结合其他设计模式难以维护。</p><h2 id="封闭接收者的命令模式"><a href="#封闭接收者的命令模式" class="headerlink" title="封闭接收者的命令模式"></a>封闭接收者的命令模式</h2><p>在命令模式中，其实有时候调用者无需知道命令的接收者，此时可以换一种方式，变更代码如下</p><ul><li>抽象命令及实现</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">Command</span> </span>&#123;</div><div class="line">    <span class="keyword">protected</span> <span class="keyword">final</span> Receiver receiver;</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Command</span><span class="params">(Receiver receiver)</span> </span>&#123;</div><div class="line">        <span class="keyword">this</span>.receiver = receiver;</div><div class="line">    &#125;</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">void</span> <span class="title">execute</span><span class="params">()</span></span>;</div><div class="line">&#125;</div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ConcreteCommand</span> <span class="keyword">extends</span> <span class="title">Command</span> </span>&#123;</div><div class="line">    <span class="comment">//默认接收者</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="title">ConcreteCommand</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">super</span>(<span class="keyword">new</span> ConcreteReceiver());</div><div class="line">    &#125;</div><div class="line">    <span class="comment">//自定义接收者</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="title">ConcreteCommand</span><span class="params">(Receiver receiver)</span> </span>&#123;</div><div class="line">        <span class="keyword">super</span>(receiver);</div><div class="line">    &#125;</div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">execute</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="comment">//执行命令</span></div><div class="line">        receiver.action();</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure><ul><li>调用场景</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Client</span> </span>&#123;</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</div><div class="line">        Invoker invoker=<span class="keyword">new</span> Invoker();</div><div class="line">        Command command=<span class="keyword">new</span> ConcreteCommand();</div><div class="line">        invoker.setCommand(command);</div><div class="line">        invoker.invokeCommand();</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure><p>这样高层模块就无需知道具体接收者是谁了，这也是命令模式的一种很常用的用法。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;什么是命令模式&quot;&gt;&lt;a href=&quot;#什么是命令模式&quot; class=&quot;headerlink&quot; title=&quot;什么是命令模式&quot;&gt;&lt;/a&gt;什么是命令模式&lt;/h2&gt;&lt;blockquote&gt;
&lt;p&gt;将一个请求封装为一个对象，从而使你可用不同的请求对客户进行参数化; 对请求
      
    
    </summary>
    
    
      <category term="设计模式" scheme="http://fx109138.github.io/tags/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"/>
    
  </entry>
  
  <entry>
    <title>设计模式之中介者模式</title>
    <link href="http://fx109138.github.io/2017/09/20/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F%E4%B9%8B%E4%B8%AD%E4%BB%8B%E8%80%85%E6%A8%A1%E5%BC%8F/"/>
    <id>http://fx109138.github.io/2017/09/20/设计模式之中介者模式/</id>
    <published>2017-09-20T08:32:38.000Z</published>
    <updated>2017-09-21T09:28:47.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="什么是中介者模式"><a href="#什么是中介者模式" class="headerlink" title="什么是中介者模式"></a>什么是中介者模式</h2><blockquote><p>定义一个中介对象来封装系列对象之间的交互。中介者使各个对象不需要显示地相互引用，从而使其耦合性松散，而且可以独立地改变他们之间的交互。</p></blockquote><p>看完定义其实大概就能知道中介者模式是什么样子了，中介者模式可以把复杂的网状交互模式转化成清晰的星形交互模式，从而降低程序间耦合。</p><h2 id="举个栗子"><a href="#举个栗子" class="headerlink" title="举个栗子"></a>举个栗子</h2><p>中介者模式模型如下<br><img src="http://oux9g0njr.bkt.clouddn.com/17-9-21/34911819.jpg" alt=""></p><p>中介者模式有三种角色组成，分别为抽象中介者、具体中介者、同事，下面是编码实现</p><ul><li>抽象中介者</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">Mediator</span> </span>&#123;</div><div class="line">    <span class="comment">//通过set方法传入同事类</span></div><div class="line">    <span class="keyword">protected</span> ConcreteColleague1 concreteColleague1;</div><div class="line">    <span class="keyword">protected</span> ConcreteColleague2 concreteColleague2;</div><div class="line">    <span class="function"><span class="keyword">public</span> ConcreteColleague1 <span class="title">getConcreteColleague1</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">return</span> concreteColleague1;</div><div class="line">    &#125;</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setConcreteColleague1</span><span class="params">(ConcreteColleague1 concreteColleague1)</span> </span>&#123;</div><div class="line">        <span class="keyword">this</span>.concreteColleague1 = concreteColleague1;</div><div class="line">    &#125;</div><div class="line">    <span class="function"><span class="keyword">public</span> ConcreteColleague2 <span class="title">getConcreteColleague2</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">return</span> concreteColleague2;</div><div class="line">    &#125;</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setConcreteColleague2</span><span class="params">(ConcreteColleague2 concreteColleague2)</span> </span>&#123;</div><div class="line">        <span class="keyword">this</span>.concreteColleague2 = concreteColleague2;</div><div class="line">    &#125;</div><div class="line">    <span class="comment">//中介者自身实现</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">void</span> <span class="title">method1</span><span class="params">()</span></span>;</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">void</span> <span class="title">method2</span><span class="params">()</span></span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure><ul><li>具体中介者</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ConcreteMediator</span> <span class="keyword">extends</span> <span class="title">Mediator</span> </span>&#123;</div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">method1</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="comment">//可以在中介者中调用同事方法</span></div><div class="line">        <span class="keyword">super</span>.concreteColleague1.c1Method();</div><div class="line">        <span class="keyword">super</span>.concreteColleague2.c2Method();</div><div class="line">    &#125;</div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">method2</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">super</span>.concreteColleague1.c1Method();</div><div class="line">        <span class="keyword">super</span>.concreteColleague2.c2Method();</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure><ul><li>抽象同事</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">Colleague</span> </span>&#123;</div><div class="line">    <span class="keyword">protected</span> Mediator mediator;</div><div class="line">    <span class="comment">//通过构造方法传入中介者</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Colleague</span><span class="params">(Mediator mediator)</span> </span>&#123;</div><div class="line">        <span class="keyword">this</span>.mediator = mediator;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure><ul><li>具体同事</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ConcreteColleague1</span> <span class="keyword">extends</span> <span class="title">Colleague</span> </span>&#123;</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="title">ConcreteColleague1</span><span class="params">(Mediator mediator)</span> </span>&#123;</div><div class="line">        <span class="keyword">super</span>(mediator);</div><div class="line">    &#125;</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">c1Method</span><span class="params">()</span></span>&#123;</div><div class="line">        <span class="comment">//自身方法</span></div><div class="line">    &#125;</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">mMethod1</span><span class="params">()</span></span>&#123;</div><div class="line">        <span class="comment">//可以调用中介者的方法</span></div><div class="line">        <span class="keyword">super</span>.mediator.method1();</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ConcreteColleague2</span> <span class="keyword">extends</span> <span class="title">Colleague</span> </span>&#123;</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="title">ConcreteColleague2</span><span class="params">(Mediator mediator)</span> </span>&#123;</div><div class="line">        <span class="keyword">super</span>(mediator);</div><div class="line">    &#125;</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">c2Method</span><span class="params">()</span></span>&#123;</div><div class="line">        <span class="comment">//自身方法</span></div><div class="line">    &#125;</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">mMethod2</span><span class="params">()</span></span>&#123;</div><div class="line">        <span class="comment">//可以调用中介者的方法</span></div><div class="line">        <span class="keyword">super</span>.mediator.method2();</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure><p>以上就是中介者模式，我们可以看到，同事是通过set传入的，中介者是通过构造方法传入的，这是因为中介者不依赖同事，而同事必须要依赖中介者。通过这种方式就可以把一对多的关系转化成一对一的关系。</p><h2 id="适用范围"><a href="#适用范围" class="headerlink" title="适用范围"></a>适用范围</h2><p>中介者模式适用于处理复杂的依赖关系，当类间结构非常复杂难以理清时候，适当使用中介者模式有利于开发。</p><h2 id="优点缺点"><a href="#优点缺点" class="headerlink" title="优点缺点"></a>优点缺点</h2><p>中介者模式的优点是减少了依赖关系，降低了类之间的耦合，使程序更加清晰。</p><p>中介者模式的缺点是中介者类本身会变得很复杂，类中逻辑可能不易处理。</p><h2 id="注意事项"><a href="#注意事项" class="headerlink" title="注意事项"></a>注意事项</h2><p>在面向对象中，独立存在的类是没有意义的，只要有类就一定有依赖，那么是每次都要用中介者模式吗？答案是否定的。中介者模式可以解决依赖关于复杂的问题，但是如果依赖本来不多，强行使用中介者模式可能会给开发带来不必要的麻烦，所以不要滥用。</p><p>一个典型的应用者模式就是MVC中的controller，它把模型层和视图层分离，通过内部调度解除了二者之间的耦合，可以提升框架的扩展性，值得借鉴。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;什么是中介者模式&quot;&gt;&lt;a href=&quot;#什么是中介者模式&quot; class=&quot;headerlink&quot; title=&quot;什么是中介者模式&quot;&gt;&lt;/a&gt;什么是中介者模式&lt;/h2&gt;&lt;blockquote&gt;
&lt;p&gt;定义一个中介对象来封装系列对象之间的交互。中介者使各个对象不需要显
      
    
    </summary>
    
    
      <category term="设计模式" scheme="http://fx109138.github.io/tags/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"/>
    
  </entry>
  
  <entry>
    <title>设计模式之模板方法模式</title>
    <link href="http://fx109138.github.io/2017/09/20/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F%E4%B9%8B%E6%A8%A1%E6%9D%BF%E6%96%B9%E6%B3%95%E6%A8%A1%E5%BC%8F/"/>
    <id>http://fx109138.github.io/2017/09/20/设计模式之模板方法模式/</id>
    <published>2017-09-20T07:19:32.000Z</published>
    <updated>2017-09-20T08:30:02.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="模板方法模式的定义"><a href="#模板方法模式的定义" class="headerlink" title="模板方法模式的定义"></a>模板方法模式的定义</h2><blockquote><p>定义一个算法中的操作框架，而将一些步骤延迟到子类中。使得子类可以不改变算法的结构即可重定义该算法的某些特定步骤。</p></blockquote><p>模板方法模式是一种行为型模式，它是一种很简单很容易理解的模式。</p><h2 id="举个栗子"><a href="#举个栗子" class="headerlink" title="举个栗子"></a>举个栗子</h2><p>模板方法模式的模型图<br><img src="http://oux9g0njr.bkt.clouddn.com/17-9-20/94136974.jpg" alt=""></p><p>类结构非常简单，编码也很简单</p><ul><li>抽象模板类</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">AbstractClass</span> </span>&#123;</div><div class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">abstract</span> <span class="keyword">void</span> <span class="title">operation1</span><span class="params">()</span></span>;</div><div class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">abstract</span> <span class="keyword">void</span> <span class="title">operation2</span><span class="params">()</span></span>;</div><div class="line">    <span class="comment">//模板方法</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">templateMethod</span><span class="params">()</span> </span>&#123;</div><div class="line">        operation1();</div><div class="line">        operation2();</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure><ul><li>具体模板类</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ConcreteClass1</span> <span class="keyword">extends</span> <span class="title">AbstractClass</span> </span>&#123;</div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">operation1</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="comment">//实现</span></div><div class="line">    &#125;</div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">operation2</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="comment">//实现</span></div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ConcreteClass2</span> <span class="keyword">extends</span> <span class="title">AbstractClass</span> </span>&#123;</div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">operation1</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="comment">//实现</span></div><div class="line">    &#125;</div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">operation2</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="comment">//实现</span></div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure><ul><li>调用场景</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Client</span> </span>&#123;</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</div><div class="line">        AbstractClass class1=<span class="keyword">new</span> ConcreteClass1();</div><div class="line">        AbstractClass class2=<span class="keyword">new</span> ConcreteClass2();</div><div class="line">        class1.templateMethod();</div><div class="line">        class2.templateMethod();</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure><p>这样就实现了模板方法模式，在模板方法中，调用完全由模板方法完成。抽象模板中的基本方法尽量设计为protected类型，符合迪米特法则，不需要暴露的属性或方法尽量不要设置为protected类型。实现类若非必要，尽量不要扩大父类中的访问权限。</p><h2 id="适用范围"><a href="#适用范围" class="headerlink" title="适用范围"></a>适用范围</h2><p>在多个子类有共有的方法，并且逻辑基本相同，或者可以有一个大的框架来实现核心逻辑，之类完成细枝末节的时候，模板方法是一种很好的选择。而且模板方法常常用来在重构的时候提取共有逻辑。</p><h2 id="优点缺点"><a href="#优点缺点" class="headerlink" title="优点缺点"></a>优点缺点</h2><p>模板方法模式封装了不变的东西，把变化交给子类扩展，符合开闭原则，有利于系统维护。</p><p>模板方法模式的缺点是它改变了我们以往的编程思维方式，由子类实现来决定父类行为，可能会造成学习成本变高的问题。</p><h2 id="注意事项"><a href="#注意事项" class="headerlink" title="注意事项"></a>注意事项</h2><p>上面的例子有没有问题？如果我想只执行模板里面的一部分功能我们有办法控制吗？这时候上面的模型就产生了缺陷，于是产生了模板方法中另一个概念–钩子方法。</p><h3 id="带有钩子方法的模板方法"><a href="#带有钩子方法的模板方法" class="headerlink" title="带有钩子方法的模板方法"></a>带有钩子方法的模板方法</h3><p>首先来看我们在上面的例子中添加一个钩子方法，模型如下<br><img src="http://oux9g0njr.bkt.clouddn.com/17-9-20/17368138.jpg" alt=""></p><p>修改的编码如下</p><ul><li>抽象模板类</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">AbstractClass</span> </span>&#123;</div><div class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">abstract</span> <span class="keyword">void</span> <span class="title">operation1</span><span class="params">()</span></span>;</div><div class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">abstract</span> <span class="keyword">void</span> <span class="title">operation2</span><span class="params">()</span></span>;</div><div class="line">    <span class="comment">//模板方法</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">templateMethod</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">if</span> (isHooked())&#123;</div><div class="line">            operation1();</div><div class="line">        &#125;</div><div class="line">        operation2();</div><div class="line">    &#125;</div><div class="line">    <span class="comment">//钩子方法</span></div><div class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">boolean</span> <span class="title">isHooked</span><span class="params">()</span></span>&#123;</div><div class="line">        <span class="keyword">return</span> <span class="keyword">true</span>;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure><ul><li>具体模板类</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ConcreteClass1</span> <span class="keyword">extends</span> <span class="title">AbstractClass</span> </span>&#123;</div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">operation1</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="comment">//实现</span></div><div class="line">    &#125;</div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">operation2</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="comment">//实现</span></div><div class="line">    &#125;</div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">boolean</span> <span class="title">isHooked</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">return</span> <span class="keyword">false</span>;</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ConcreteClass2</span> <span class="keyword">extends</span> <span class="title">AbstractClass</span> </span>&#123;</div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">operation1</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="comment">//实现</span></div><div class="line">    &#125;</div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">operation2</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="comment">//实现</span></div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure><p>调用场景不变。我们把在需要由子类控制的方法外添加了一层判断，由子类决定是否重写钩子方法来决定方法是否执行，这样就可以自由的控制调用，模板方法模式就健全了。</p><p>模板方法模式是一种极方便扩展的设计模式，很多开源框架的设计都采用了这种方式来实现扩展开发。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;模板方法模式的定义&quot;&gt;&lt;a href=&quot;#模板方法模式的定义&quot; class=&quot;headerlink&quot; title=&quot;模板方法模式的定义&quot;&gt;&lt;/a&gt;模板方法模式的定义&lt;/h2&gt;&lt;blockquote&gt;
&lt;p&gt;定义一个算法中的操作框架，而将一些步骤延迟到子类中。使得子
      
    
    </summary>
    
    
      <category term="设计模式" scheme="http://fx109138.github.io/tags/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"/>
    
  </entry>
  
  <entry>
    <title>设计模式之桥梁模式</title>
    <link href="http://fx109138.github.io/2017/09/20/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F%E4%B9%8B%E6%A1%A5%E6%A2%81%E6%A8%A1%E5%BC%8F/"/>
    <id>http://fx109138.github.io/2017/09/20/设计模式之桥梁模式/</id>
    <published>2017-09-20T06:07:05.000Z</published>
    <updated>2017-09-20T07:17:01.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="什么是桥梁模式"><a href="#什么是桥梁模式" class="headerlink" title="什么是桥梁模式"></a>什么是桥梁模式</h2><blockquote><p>将抽象和实现解耦，使得两者可以独立地变化。</p></blockquote><p>桥梁模式是最后一种结构型模式了，它也叫桥接模式，是一种重要的解耦手段。</p><h2 id="举个栗子"><a href="#举个栗子" class="headerlink" title="举个栗子"></a>举个栗子</h2><p><img src="http://oux9g0njr.bkt.clouddn.com/17-9-20/79787036.jpg" alt=""></p><p>桥梁模式一共有四种角色，下面是编码实现</p><ul><li>实现化角色</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">Implementor</span> </span>&#123;</div><div class="line">    <span class="function"><span class="keyword">void</span> <span class="title">operationImpl1</span><span class="params">()</span></span>;</div><div class="line">    <span class="function"><span class="keyword">void</span> <span class="title">operationImpl2</span><span class="params">()</span></span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure><ul><li>具体实现化角色</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ContreteImplementor</span> <span class="keyword">implements</span> <span class="title">Implementor</span> </span>&#123;</div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">operationImpl1</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="comment">//具体实现</span></div><div class="line">    &#125;</div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">operationImpl2</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="comment">//具体实现</span></div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure><ul><li>抽象化角色</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Abstraction</span> </span>&#123;</div><div class="line">    <span class="comment">//对实现化角色的引用</span></div><div class="line">    <span class="keyword">private</span> Implementor implementor;</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Abstraction</span><span class="params">(Implementor implementor)</span> </span>&#123;</div><div class="line">        <span class="keyword">this</span>.implementor = implementor;</div><div class="line">    &#125;</div><div class="line">    <span class="comment">//自身属性行为</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">operation</span><span class="params">()</span></span>&#123;</div><div class="line">        implementor.operationImpl1();</div><div class="line">    &#125;</div><div class="line">    <span class="function"><span class="keyword">public</span> Implementor <span class="title">getImplementor</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">return</span> implementor;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure><ul><li>修正抽象化角色</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">RefiendAbstraction</span> <span class="keyword">extends</span> <span class="title">Abstraction</span> </span>&#123;</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="title">RefiendAbstraction</span><span class="params">(Implementor implementor)</span> </span>&#123;</div><div class="line">        <span class="keyword">super</span>(implementor);</div><div class="line">    &#125;</div><div class="line">    <span class="comment">//修正父类行为</span></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">operation</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">super</span>.operation();</div><div class="line">        <span class="keyword">super</span>.getImplementor().operationImpl2();</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure><ul><li>调用场景</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Client</span> </span>&#123;</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</div><div class="line">        Implementor implementor = <span class="keyword">new</span> ContreteImplementor();</div><div class="line">        Abstraction abstraction = <span class="keyword">new</span> RefiendAbstraction(implementor);</div><div class="line">        abstraction.operation();</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure><p>上面的结构一点都不复杂，只要熟练掌握面向对象基本思想就能写出上面的代码，但是你会发现，这个程序的条理非常清晰，结构很完整，而且扩展性也很好，这就是桥梁模式。它好像搭了一座桥，通过抽象建立联系，实现了类结构之间的松耦合，是一种很好用的设计模式。</p><h2 id="适用范围"><a href="#适用范围" class="headerlink" title="适用范围"></a>适用范围</h2><p>桥梁模式适用于当继承的方式受限太大，使用继承的方式制约较大的时候，桥梁模式可以很好的解决代码复用的问题。</p><h2 id="优点缺点"><a href="#优点缺点" class="headerlink" title="优点缺点"></a>优点缺点</h2><p>桥梁模式的优点是可以解决由继承带来的复杂限制问题，实现了低耦合，高扩展性，抽象和实现达到隔离，双方可以自由扩展。</p><h2 id="注意事项"><a href="#注意事项" class="headerlink" title="注意事项"></a>注意事项</h2><p>桥梁模式的根本目的在于对变化的封装，他能够在最小的范围内避免危险，但是不代表继承就一无是处，使用的时候要综合考量。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;什么是桥梁模式&quot;&gt;&lt;a href=&quot;#什么是桥梁模式&quot; class=&quot;headerlink&quot; title=&quot;什么是桥梁模式&quot;&gt;&lt;/a&gt;什么是桥梁模式&lt;/h2&gt;&lt;blockquote&gt;
&lt;p&gt;将抽象和实现解耦，使得两者可以独立地变化。&lt;/p&gt;
&lt;/blockquot
      
    
    </summary>
    
    
      <category term="设计模式" scheme="http://fx109138.github.io/tags/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"/>
    
  </entry>
  
  <entry>
    <title>设计模式之享元模式</title>
    <link href="http://fx109138.github.io/2017/09/19/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F%E4%B9%8B%E4%BA%AB%E5%85%83%E6%A8%A1%E5%BC%8F/"/>
    <id>http://fx109138.github.io/2017/09/19/设计模式之享元模式/</id>
    <published>2017-09-19T13:34:36.000Z</published>
    <updated>2017-09-20T06:05:45.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="享元模式的定义"><a href="#享元模式的定义" class="headerlink" title="享元模式的定义"></a>享元模式的定义</h2><blockquote><p>运用共享技术有效的支持大量细粒度的对象。</p></blockquote><p>享元模式的定义只有这一句，它是池技术的重要实现方式，重点在于细粒度和共享。</p><h2 id="举个栗子"><a href="#举个栗子" class="headerlink" title="举个栗子"></a>举个栗子</h2><p><img src="http://oux9g0njr.bkt.clouddn.com/17-9-20/14209145.jpg" alt=""></p><p>享元模式包含四种角色，两种状态，我们把可以共享的信息，和环境无关的部分称为内部状态，反之为外部状态，四种角色为抽象享元角色、具体享元角色、不可共享的享元角色、享元工厂，编码如下</p><ul><li>抽象享元角色</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">Flyweight</span> </span>&#123;</div><div class="line">    <span class="comment">//内部状态</span></div><div class="line">    <span class="keyword">private</span> String intrinsic;</div><div class="line">    <span class="comment">//外部状态</span></div><div class="line">    <span class="keyword">protected</span> <span class="keyword">final</span> String extrinsic;</div><div class="line">    <span class="function"><span class="keyword">protected</span> <span class="title">Flyweight</span><span class="params">(String extrinsic)</span> </span>&#123;</div><div class="line">        <span class="keyword">this</span>.extrinsic = extrinsic;</div><div class="line">    &#125;</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">void</span> <span class="title">operate</span><span class="params">()</span></span>;</div><div class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getIntrinsic</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">return</span> intrinsic;</div><div class="line">    &#125;</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setIntrinsic</span><span class="params">(String intrinsic)</span> </span>&#123;</div><div class="line">        <span class="keyword">this</span>.intrinsic = intrinsic;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure><ul><li>具体享元角色</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ConcreteFlyweight</span> <span class="keyword">extends</span> <span class="title">Flyweight</span> </span>&#123;</div><div class="line">    <span class="function"><span class="keyword">protected</span> <span class="title">ConcreteFlyweight</span><span class="params">(String extrinsic)</span> </span>&#123;</div><div class="line">        <span class="keyword">super</span>(extrinsic);</div><div class="line">    &#125;</div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">operate</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="comment">//实现业务</span></div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure><ul><li>享元工厂</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">FlyweightFactory</span> </span>&#123;</div><div class="line">    <span class="comment">//池容器</span></div><div class="line">    <span class="keyword">private</span> <span class="keyword">static</span> HashMap&lt;String,Flyweight&gt; pool=<span class="keyword">new</span> HashMap&lt;&gt;();</div><div class="line">    <span class="comment">//享元工厂</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Flyweight <span class="title">getFlyweight</span><span class="params">(String extrinsic)</span></span>&#123;</div><div class="line">        Flyweight flyweight=<span class="keyword">null</span>;</div><div class="line">        <span class="keyword">if</span> (pool.containsKey(extrinsic))&#123;</div><div class="line">            flyweight=pool.get(extrinsic);</div><div class="line">        &#125;<span class="keyword">else</span> &#123;</div><div class="line">            flyweight=<span class="keyword">new</span> ConcreteFlyweight(extrinsic);</div><div class="line">            pool.put(extrinsic,flyweight);</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">return</span> flyweight;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure><p>以上就实现了一个享元模式，还是很容易理解的，享元模式的特点就是实现资源共享，重复利用。</p><h2 id="适用范围"><a href="#适用范围" class="headerlink" title="适用范围"></a>适用范围</h2><p>享元模式适用于在系统中存在大量的相似的对象，他们的内部状态与外部环境无关，而重复的创建和销毁会带来极大地资源浪费，使用享元模式可以增加一个缓冲池，能够降低系统开销。</p><h2 id="优点缺点"><a href="#优点缺点" class="headerlink" title="优点缺点"></a>优点缺点</h2><p>享元模式的优点能减少对象创建，降低内存占用，提高程序性能。</p><p>享元模式的缺点是内外状态的分离增加了开发的难度，程序变复杂。</p><h2 id="注意事项"><a href="#注意事项" class="headerlink" title="注意事项"></a>注意事项</h2><p>享元模式要注意多线程下的安全问题，这个问题也是很常见的，需要注意。</p><p>另一个要注意的就是外部状态尽量使用java基本数据类型，否则会造成运行效率低的问题。</p><p>享元模式在java设计中非常常见，数据库连接池，线程池等等，是一种非常实用的设计模式。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;享元模式的定义&quot;&gt;&lt;a href=&quot;#享元模式的定义&quot; class=&quot;headerlink&quot; title=&quot;享元模式的定义&quot;&gt;&lt;/a&gt;享元模式的定义&lt;/h2&gt;&lt;blockquote&gt;
&lt;p&gt;运用共享技术有效的支持大量细粒度的对象。&lt;/p&gt;
&lt;/blockquote
      
    
    </summary>
    
    
      <category term="设计模式" scheme="http://fx109138.github.io/tags/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"/>
    
  </entry>
  
  <entry>
    <title>设计模式之门面模式</title>
    <link href="http://fx109138.github.io/2017/09/19/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F%E4%B9%8B%E9%97%A8%E9%9D%A2%E6%A8%A1%E5%BC%8F/"/>
    <id>http://fx109138.github.io/2017/09/19/设计模式之门面模式/</id>
    <published>2017-09-19T11:35:48.000Z</published>
    <updated>2017-09-19T13:32:18.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="什么是门面模式"><a href="#什么是门面模式" class="headerlink" title="什么是门面模式"></a>什么是门面模式</h2><blockquote><p>提供一个统一的接口去访问多个子系统的多个不同的接口，它为子系统中的一组接口提供一个统一的高层接口。使得子系统更容易使用。</p></blockquote><p>门面模式也叫外观模式，是一种很常用的封装模式。</p><h2 id="举个栗子"><a href="#举个栗子" class="headerlink" title="举个栗子"></a>举个栗子</h2><p>门面模式的模型图<br><img src="http://oux9g0njr.bkt.clouddn.com/17-9-19/37537963.jpg" alt=""></p><p>上面包含两种角色，门面角色和子系统角色，其中子系统可能是几组类，很多类，不过这不重要，门面模式就是通过统一的门面来完成下面的行为，下面是编码</p><ul><li>子系统</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ClassA</span> </span>&#123;</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">methodA</span><span class="params">()</span></span>&#123;</div><div class="line">        <span class="comment">//方法A</span></div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ClassB</span> </span>&#123;</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">methodB</span><span class="params">()</span></span>&#123;</div><div class="line">        <span class="comment">//方法B</span></div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ClassC</span> </span>&#123;</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">methodC</span><span class="params">()</span></span>&#123;</div><div class="line">        <span class="comment">//方法C</span></div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure><ul><li>门面</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Facade</span> </span>&#123;</div><div class="line">    <span class="keyword">private</span> ClassA classA = <span class="keyword">new</span> ClassA();</div><div class="line">    <span class="keyword">private</span> ClassB classB = <span class="keyword">new</span> ClassB();</div><div class="line">    <span class="keyword">private</span> ClassC classC = <span class="keyword">new</span> ClassC();</div><div class="line">    <span class="comment">//统一方法</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">methodA</span><span class="params">()</span> </span>&#123;</div><div class="line">        classA.methodA();</div><div class="line">    &#125;</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">methodB</span><span class="params">()</span> </span>&#123;</div><div class="line">        classB.methodB();</div><div class="line">    &#125;</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">methodC</span><span class="params">()</span> </span>&#123;</div><div class="line">        classC.methodC();</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure><p>在门面模式中，子系统并不知道门面的存在，门面和普通的调用者没什么区别。而对于真正的调用者而言，他们无需关心子系统有多么复杂，只要和门面进行交互即可，这就是门面模式。</p><h2 id="适用范围"><a href="#适用范围" class="headerlink" title="适用范围"></a>适用范围</h2><p>门面模式实现了一个极好的封装，在子系统复杂且相互独立的时候，使用门面模式可以无需关注细节。同时，深度的封装可以实现黑箱操作，可以防止过多的暴露带来的风险。</p><h2 id="优点缺点"><a href="#优点缺点" class="headerlink" title="优点缺点"></a>优点缺点</h2><p>门面模式把黑盒和白盒的交互通过门面连接起来，实现了两边程序的解耦，系统间无需直接依赖，这样程序更加灵活。同时也能增强系统的安全性。</p><p>门面模式的缺点就是门面作为系统的核心，一旦有接口增减就要面临着修改，这样不符合开闭原则。</p><h2 id="注意事项"><a href="#注意事项" class="headerlink" title="注意事项"></a>注意事项</h2><p>门面可以有多个，如果门面过大可以拆分，有特殊需求可以重组，提供新的门面的时候业务也无需委托子系统，只要委托给现有的系统即可。</p><p>注意门面模式不要依赖子系统内部逻辑，一个门面方法最好只委托给一个子系统的逻辑，这样可以避免子系统的逻辑依赖门面，不会破坏程序原有结构。如果需要充组就提供一个重组的子系统，总之，不要用门面来组合系统的逻辑。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;什么是门面模式&quot;&gt;&lt;a href=&quot;#什么是门面模式&quot; class=&quot;headerlink&quot; title=&quot;什么是门面模式&quot;&gt;&lt;/a&gt;什么是门面模式&lt;/h2&gt;&lt;blockquote&gt;
&lt;p&gt;提供一个统一的接口去访问多个子系统的多个不同的接口，它为子系统中的一组接口
      
    
    </summary>
    
    
      <category term="设计模式" scheme="http://fx109138.github.io/tags/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"/>
    
  </entry>
  
  <entry>
    <title>设计模式之组合模式</title>
    <link href="http://fx109138.github.io/2017/09/19/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F%E4%B9%8B%E7%BB%84%E5%90%88%E6%A8%A1%E5%BC%8F/"/>
    <id>http://fx109138.github.io/2017/09/19/设计模式之组合模式/</id>
    <published>2017-09-19T04:48:26.000Z</published>
    <updated>2017-09-19T11:33:25.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="什么是组合模式"><a href="#什么是组合模式" class="headerlink" title="什么是组合模式"></a>什么是组合模式</h2><blockquote><p>将对象组合成树形结构以表示“部分-整体”的层次结构，使得用户对单个对象和组合对象的使用具有一致性。</p></blockquote><p>组合模式又叫部分-整体模式，理解组合模式就要摸清楚部分和整体的概念。</p><h2 id="举个栗子"><a href="#举个栗子" class="headerlink" title="举个栗子"></a>举个栗子</h2><p>组合模式的模型图<br><img src="http://oux9g0njr.bkt.clouddn.com/17-9-19/12404574.jpg" alt=""></p><p>组合模式有三种角色，下面是编码</p><ul><li>抽象构件</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">Component</span> </span>&#123;</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">operation</span><span class="params">()</span></span>&#123;</div><div class="line">        <span class="comment">//共有业务</span></div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure><ul><li>叶子构件</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Leaf</span> <span class="keyword">extends</span> <span class="title">Component</span> </span>&#123;</div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">operation</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="comment">//重写父类方法</span></div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure><ul><li>树枝构件</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Composite</span> <span class="keyword">extends</span> <span class="title">Component</span> </span>&#123;</div><div class="line">    <span class="comment">//构建容器</span></div><div class="line">    <span class="keyword">private</span> ArrayList&lt;Component&gt; componentArrayList = <span class="keyword">new</span> ArrayList&lt;&gt;();</div><div class="line">    <span class="comment">//添加构件</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">add</span><span class="params">(Component component)</span> </span>&#123;</div><div class="line">        componentArrayList.add(component);</div><div class="line">    &#125;</div><div class="line">    <span class="comment">//删除构件</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">remove</span><span class="params">(Component component)</span> </span>&#123;</div><div class="line">        componentArrayList.remove(component);</div><div class="line">    &#125;</div><div class="line">    <span class="comment">//获取构件集合</span></div><div class="line">    <span class="function"><span class="keyword">public</span> ArrayList&lt;Component&gt; <span class="title">getChildren</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">return</span> componentArrayList;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure><p>三个角色齐了，调用者负责组装整个树形结构，这样就很容易完成了构件的组合，这就是组合模式。不过注意，调用者由于要组装具体的构件，没有办法只依赖于抽象，这是与依赖倒置原则相悖的，我们后面还要讨论。</p><h2 id="适用范围"><a href="#适用范围" class="headerlink" title="适用范围"></a>适用范围</h2><p>组合模式适合于构建部分和整体的关系，整体和部分可以一致性处理的情况。</p><h2 id="优点缺点"><a href="#优点缺点" class="headerlink" title="优点缺点"></a>优点缺点</h2><p>组合模式的优点最明显的就是组合及其自由，扩展性特别好，而且部分和整体的处理方式相同，维护简单。</p><p>组合模式的缺点也是很明显的，它违反依赖倒置原则，不利于面向接口编程，所以使用时候要权衡。</p><h2 id="注意事项"><a href="#注意事项" class="headerlink" title="注意事项"></a>注意事项</h2><p>在真实的使用中，数据间关联关系可以存储在关系型数据库中，使用时候直接读取，所以其实不需要担心构建时候的复杂过程。</p><p>到此为止，上面讲到的只是组合模式的一种，叫安全模式，组合模式还有一种透明模式，也是比较常见的。</p><h2 id="透明的组合模式"><a href="#透明的组合模式" class="headerlink" title="透明的组合模式"></a>透明的组合模式</h2><p>透明模式和安全模式的区别很简单，直接看模型图<br><img src="http://oux9g0njr.bkt.clouddn.com/17-9-19/38003134.jpg" alt=""></p><p>这就是透明模式，去不就在于构建的方法这次被转移到了抽象构件中。这样处理之后叶子构件和树枝构件在表面上就看不出来区别了，我们需要通过getChildern的返回情况来判断是叶子还是树枝，这样显然没有上一种方法安全，下面是编码。</p><ul><li>抽象构件</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">Component</span> </span>&#123;</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">operation</span><span class="params">()</span></span>&#123;</div><div class="line">        <span class="comment">//共有业务</span></div><div class="line">    &#125;</div><div class="line">    <span class="comment">//添加构件</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">void</span> <span class="title">add</span><span class="params">(Component component)</span></span>;</div><div class="line">    <span class="comment">//删除构件</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">void</span> <span class="title">remove</span><span class="params">(Component component)</span></span>;</div><div class="line">    <span class="comment">//获取构件集合</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">abstract</span> ArrayList&lt;Component&gt; <span class="title">getChildren</span><span class="params">()</span></span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure><p>树枝构件和上面相同</p><ul><li>树叶构件</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Leaf</span> <span class="keyword">extends</span> <span class="title">Component</span> </span>&#123;</div><div class="line">    <span class="comment">//空实现</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">add</span><span class="params">(Component component)</span> <span class="keyword">throws</span> UnsupportedOperationException</span>&#123;</div><div class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> UnsupportedOperationException();</div><div class="line">    &#125;</div><div class="line">    <span class="comment">//空实现</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">remove</span><span class="params">(Component component)</span> <span class="keyword">throws</span> UnsupportedOperationException</span>&#123;</div><div class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> UnsupportedOperationException();    </div><div class="line">    &#125;</div><div class="line">    <span class="comment">//空实现</span></div><div class="line">    <span class="function"><span class="keyword">public</span> ArrayList&lt;Component&gt; <span class="title">getChildren</span><span class="params">()</span> <span class="keyword">throws</span> UnsupportedOperationException</span>&#123;</div><div class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> UnsupportedOperationException();</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure><p>使用了透明模式实现的组合模式是遵循依赖倒置原则的。</p><p>最后，组合模式还可以在抽象构件中增加父节点的引用，这样的好处是可以应对反向遍历的需求，具体的编码在此就不演示了。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;什么是组合模式&quot;&gt;&lt;a href=&quot;#什么是组合模式&quot; class=&quot;headerlink&quot; title=&quot;什么是组合模式&quot;&gt;&lt;/a&gt;什么是组合模式&lt;/h2&gt;&lt;blockquote&gt;
&lt;p&gt;将对象组合成树形结构以表示“部分-整体”的层次结构，使得用户对单个对象和组
      
    
    </summary>
    
    
      <category term="设计模式" scheme="http://fx109138.github.io/tags/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"/>
    
  </entry>
  
  <entry>
    <title>设计模式之适配器模式</title>
    <link href="http://fx109138.github.io/2017/09/17/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F%E4%B9%8B%E9%80%82%E9%85%8D%E5%99%A8%E6%A8%A1%E5%BC%8F/"/>
    <id>http://fx109138.github.io/2017/09/17/设计模式之适配器模式/</id>
    <published>2017-09-17T13:04:28.000Z</published>
    <updated>2017-09-19T04:45:54.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="什么是适配器模式"><a href="#什么是适配器模式" class="headerlink" title="什么是适配器模式"></a>什么是适配器模式</h2><blockquote><p>将一个类的接口适配成客户端所期待的另一种接口，从而使原本因接口不匹配而无法在一起工作的两个类能够在一起工作。</p></blockquote><p>适配器的概念其实非常容易理解，生活中有很多适配器的例子，各种各样的转接设备，很常见也很实用。而程序中的适配器也是这样，同样也是起到一个转接的作用。</p><h2 id="举个栗子"><a href="#举个栗子" class="headerlink" title="举个栗子"></a>举个栗子</h2><p><img src="http://oux9g0njr.bkt.clouddn.com/17-9-18/23995627.jpg" alt=""></p><p>适配器模式中一共有三种角色：目标角色、源角色和适配器角色，下面编码来感受一下</p><ul><li>目标角色及实现</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">Target</span> </span>&#123;</div><div class="line">    <span class="comment">//目标角色的方法</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">request</span><span class="params">()</span></span>;</div><div class="line">&#125;</div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ConcreteTarget</span> <span class="keyword">implements</span> <span class="title">Target</span> </span>&#123;</div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">request</span><span class="params">()</span> </span>&#123;</div><div class="line">        System.out.println(<span class="string">"Target"</span>);</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure><ul><li>源角色</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Adaptee</span> </span>&#123;</div><div class="line">    <span class="comment">//源角色方法</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">specificRequest</span><span class="params">()</span></span>&#123;</div><div class="line">        System.out.println(<span class="string">"Adaptee"</span>);</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure><ul><li>适配器</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Adapter</span> <span class="keyword">extends</span> <span class="title">Adaptee</span> <span class="keyword">implements</span> <span class="title">Target</span> </span>&#123;</div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">request</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">super</span>.specificRequest();</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure><ul><li>应用场景</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Client</span> </span>&#123;</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</div><div class="line">        Target target;</div><div class="line">        target = <span class="keyword">new</span> ConcreteTarget();</div><div class="line">        target.request();</div><div class="line">        target = <span class="keyword">new</span> Adapter();</div><div class="line">        target.request();</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure><p>输出结果</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">Target</div><div class="line">Adaptee</div></pre></td></tr></table></figure><p>上面的例子可以看出来，经过适配器处理之后，同样是调用目标角色的接口，却能实现源角色的功能，这样就实现了功能的适配。</p><h2 id="适用范围"><a href="#适用范围" class="headerlink" title="适用范围"></a>适用范围</h2><p>适用范围也很容易理解，和现实中的场景也一样，新功能旧功能之间，或者两个不兼容的系统之间无法共存，就可以通过适配器模式来实现。</p><h2 id="优点缺点"><a href="#优点缺点" class="headerlink" title="优点缺点"></a>优点缺点</h2><p>适配器模式优点很多，首先是它可以使不相关的类之间建立联系，并且能够运行在一起，增加了类的复用度和透明度，而且它作为独立的一部分增加和删除都不会对原系统产生影响，扩展很安全。</p><h2 id="注意事项"><a href="#注意事项" class="headerlink" title="注意事项"></a>注意事项</h2><p>到此，适配器模式其实还没有结束。考虑到实际场景中，通常需要适配的源角色往往不是只有一个，由于java语言不支持多继承，此时采用上面的模式就力不从心了，难道这样就没办法适配了吗？当然不是，上限介绍的其实只是适配器模式的一种，叫做类适配器，是通过继承的方式实现的。而还有一种通过组合来实现的适配器，叫做对象适配器。</p><h2 id="对象适配器"><a href="#对象适配器" class="headerlink" title="对象适配器"></a>对象适配器</h2><p>先画一个模型图<br><img src="http://oux9g0njr.bkt.clouddn.com/17-9-19/77191014.jpg" alt=""></p><p>其中目标角色的编码和上面相同，下面是其他部分编码</p><ul><li>源角色</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Adaptee1</span> </span>&#123;</div><div class="line">    <span class="comment">//源角色方法</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">specificRequest</span><span class="params">()</span></span>&#123;</div><div class="line">        System.out.println(<span class="string">"Adaptee1"</span>);</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Adaptee2</span> </span>&#123;</div><div class="line">    <span class="comment">//源角色方法</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">specificRequest</span><span class="params">()</span></span>&#123;</div><div class="line">        System.out.println(<span class="string">"Adaptee2"</span>);</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure><ul><li>适配器</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Adapter</span> <span class="keyword">implements</span> <span class="title">Target</span> </span>&#123;</div><div class="line">    <span class="comment">//源角色对象</span></div><div class="line">    <span class="keyword">private</span> Adaptee1 adaptee1;</div><div class="line">    <span class="keyword">private</span> Adaptee2 adaptee2;</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Adapter</span><span class="params">(Adaptee1 adaptee1, Adaptee2 adaptee2)</span> </span>&#123;</div><div class="line">        <span class="keyword">this</span>.adaptee1 = adaptee1;</div><div class="line">        <span class="keyword">this</span>.adaptee2 = adaptee2;</div><div class="line">    &#125;</div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">request</span><span class="params">()</span> </span>&#123;</div><div class="line">        adaptee1.specificRequest();</div><div class="line">        adaptee2.specificRequest();</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure><ul><li>应用场景</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Client</span> </span>&#123;</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</div><div class="line">        Target target;</div><div class="line">        target = <span class="keyword">new</span> ConcreteTarget();</div><div class="line">        target.request();</div><div class="line">        target = <span class="keyword">new</span> Adapter(<span class="keyword">new</span> Adaptee1(), <span class="keyword">new</span> Adaptee2());</div><div class="line">        target.request();</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure><p>输出结果</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">Target</div><div class="line">Adaptee1</div><div class="line">Adaptee2</div></pre></td></tr></table></figure><p>这样就可以实现针对多个适配源的适配，对象适配器没有那么多的局限性，但是不容易扩展。不过要记住，适配器模式本身就是一种补救的设计模式，在实际应用中往往是为了解决一些不可避免的特定需求而存在的，正确使用才能用好这种设计模式。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;什么是适配器模式&quot;&gt;&lt;a href=&quot;#什么是适配器模式&quot; class=&quot;headerlink&quot; title=&quot;什么是适配器模式&quot;&gt;&lt;/a&gt;什么是适配器模式&lt;/h2&gt;&lt;blockquote&gt;
&lt;p&gt;将一个类的接口适配成客户端所期待的另一种接口，从而使原本因接口不匹
      
    
    </summary>
    
    
      <category term="设计模式" scheme="http://fx109138.github.io/tags/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"/>
    
  </entry>
  
  <entry>
    <title>设计模式之装饰模式</title>
    <link href="http://fx109138.github.io/2017/09/17/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F%E4%B9%8B%E8%A3%85%E9%A5%B0%E6%A8%A1%E5%BC%8F/"/>
    <id>http://fx109138.github.io/2017/09/17/设计模式之装饰模式/</id>
    <published>2017-09-17T11:24:32.000Z</published>
    <updated>2017-09-17T13:02:09.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="装饰模式的概念"><a href="#装饰模式的概念" class="headerlink" title="装饰模式的概念"></a>装饰模式的概念</h2><blockquote><p>动态地给一个对象添加一些额外的职责。就增加功能来说，装饰模式相比生成子类更为灵活。</p></blockquote><p>装饰模式也是一种给类增加功能的设计模式，还是结合具体实例来分析。</p><h2 id="举个栗子"><a href="#举个栗子" class="headerlink" title="举个栗子"></a>举个栗子</h2><p>下面是装饰模式的模型图<br><img src="http://oux9g0njr.bkt.clouddn.com/17-9-17/22428817.jpg" alt=""></p><p>装饰者模式中有四种角色：构件抽象，具体构件，装饰角色，具体装饰角色。下面来编码体验一下</p><ul><li>构建抽象</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">Component</span> </span>&#123;</div><div class="line">    <span class="comment">//抽象方法</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">void</span> <span class="title">operate</span><span class="params">()</span></span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure><ul><li>具体构件</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ConcreteComponent</span> <span class="keyword">extends</span> <span class="title">Component</span> </span>&#123;</div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">operate</span><span class="params">()</span> </span>&#123;</div><div class="line">        System.out.println(<span class="string">"do something"</span>);</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure><ul><li>装饰角色</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Decorator</span> <span class="keyword">extends</span> <span class="title">Component</span> </span>&#123;</div><div class="line">    <span class="keyword">private</span> Component component=<span class="keyword">null</span>;</div><div class="line">    <span class="comment">//传递被修饰者</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Decorator</span><span class="params">(Component component)</span></span>&#123;</div><div class="line">        <span class="keyword">this</span>.component=component;</div><div class="line">    &#125;</div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">operate</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="comment">//委托给被修饰者执行</span></div><div class="line">        <span class="keyword">this</span>.component.operate();</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure><ul><li>具体装饰角色</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ConcreteDecorator1</span> <span class="keyword">extends</span> <span class="title">Decorator</span></span>&#123;</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="title">ConcreteDecorator1</span><span class="params">(Component component)</span> </span>&#123;</div><div class="line">        <span class="keyword">super</span>(component);</div><div class="line">    &#125;</div><div class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">method1</span><span class="params">()</span></span>&#123;</div><div class="line">        System.out.println(<span class="string">"method1修饰"</span>);</div><div class="line">    &#125;</div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">operate</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">this</span>.method1();</div><div class="line">        <span class="keyword">super</span>.operate();</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ConcreteDecorator2</span> <span class="keyword">extends</span> <span class="title">Decorator</span></span>&#123;</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="title">ConcreteDecorator2</span><span class="params">(Component component)</span> </span>&#123;</div><div class="line">        <span class="keyword">super</span>(component);</div><div class="line">    &#125;</div><div class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">method2</span><span class="params">()</span></span>&#123;</div><div class="line">        System.out.println(<span class="string">"method2修饰"</span>);</div><div class="line">    &#125;</div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">operate</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">super</span>.operate();</div><div class="line">        <span class="keyword">this</span>.method2();</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure><ul><li>调用场景</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Client</span> </span>&#123;</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</div><div class="line">        Component component = <span class="keyword">new</span> ConcreteComponent();</div><div class="line">        component = <span class="keyword">new</span> ConcreteDecorator1(component);</div><div class="line">        component = <span class="keyword">new</span> ConcreteDecorator2(component);</div><div class="line">        component.operate();</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure><p>输出结果</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">method1修饰</div><div class="line">do something</div><div class="line">method2修饰</div></pre></td></tr></table></figure><p>这就是一个装饰模式的实例，特别简单，装饰着和被装饰着继承同样的抽象，通过多层包装来实现功能扩展。</p><h2 id="适用场景"><a href="#适用场景" class="headerlink" title="适用场景"></a>适用场景</h2><p>需要扩展一个类，动态的增加功能，而且这些功能还要求能灵活的控制变化，装饰模式会很有用。</p><h2 id="优点缺点"><a href="#优点缺点" class="headerlink" title="优点缺点"></a>优点缺点</h2><p>装饰着模式的优点就是实现灵活，扩展性好。它是继承扩展的一个替代方案，相比较于继承的方式，装饰模式可以实现多重功能自由排列组合，避免了子类爆炸性增长的可怕局面。</p><p>装饰模式的缺点就是多层装饰会增加系统的复杂度，出现问题时候不易修复。</p><h2 id="注意事项"><a href="#注意事项" class="headerlink" title="注意事项"></a>注意事项</h2><p>装饰模式可以简单理解为是代理模式的一种扩展，不过他们其实不太一样。代理模式中，代理类对被代理的对象有控制权，决定其执行或者不执行。而装饰模式中，装饰类对代理对象没有控制权，只能为其增加一层装饰，以加强被装饰对象的功能，仅此而已。</p><p>最典型的装饰模式实例就是jdk总io相关类的设计，使用过的应该会深有体会。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;装饰模式的概念&quot;&gt;&lt;a href=&quot;#装饰模式的概念&quot; class=&quot;headerlink&quot; title=&quot;装饰模式的概念&quot;&gt;&lt;/a&gt;装饰模式的概念&lt;/h2&gt;&lt;blockquote&gt;
&lt;p&gt;动态地给一个对象添加一些额外的职责。就增加功能来说，装饰模式相比生成子类更
      
    
    </summary>
    
    
      <category term="设计模式" scheme="http://fx109138.github.io/tags/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"/>
    
  </entry>
  
  <entry>
    <title>设计模式之代理模式</title>
    <link href="http://fx109138.github.io/2017/09/17/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F%E4%B9%8B%E4%BB%A3%E7%90%86%E6%A8%A1%E5%BC%8F/"/>
    <id>http://fx109138.github.io/2017/09/17/设计模式之代理模式/</id>
    <published>2017-09-17T08:37:35.000Z</published>
    <updated>2017-09-17T11:20:21.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="代理模式的定义"><a href="#代理模式的定义" class="headerlink" title="代理模式的定义"></a>代理模式的定义</h2><blockquote><p>为其他对象提供一种代理以控制对这个对象的访问。</p></blockquote><p>就是这么简单的一句话，内容却绝对不简单。代理模式是最重要的几种设计模式之一，它的功能及其强大。代理模式也叫委托模式，它是在不改变在原有代码结构的基础上对类增强的一种有效的手段，面向切面编程（AOP）就可以通过动态代理来实现。下面开始由浅入深地学习代理模式。</p><h2 id="举个栗子"><a href="#举个栗子" class="headerlink" title="举个栗子"></a>举个栗子</h2><p>代理模式的模型图<br><img src="http://oux9g0njr.bkt.clouddn.com/17-9-17/47076431.jpg" alt=""></p><p>这就是代理模式的三个角色，抽象主题角色，具体主题角色，代理主题角色，下面开始编码</p><ul><li>抽象主题角色</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">Subject</span> </span>&#123;</div><div class="line">    <span class="comment">//一个方法</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">request</span><span class="params">()</span></span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure><ul><li>具体主题角色</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">RealSubject</span> <span class="keyword">implements</span> <span class="title">Subject</span> </span>&#123;</div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">request</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="comment">//方法实现</span></div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure><ul><li>代理主题角色</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Proxy</span> <span class="keyword">implements</span> <span class="title">Subject</span> </span>&#123;</div><div class="line">    <span class="keyword">private</span> Subject subject = <span class="keyword">null</span>;</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Proxy</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">this</span>.subject = <span class="keyword">new</span> Proxy();</div><div class="line">    &#125;</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Proxy</span><span class="params">(Subject subject)</span> </span>&#123;</div><div class="line">        <span class="keyword">this</span>.subject=subject;</div><div class="line">    &#125;</div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">request</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">this</span>.before();</div><div class="line">        <span class="keyword">this</span>.subject.request();</div><div class="line">        <span class="keyword">this</span>.after();</div><div class="line">    &#125;</div><div class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">before</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="comment">//前置增强逻辑</span></div><div class="line">    &#125;</div><div class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">after</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="comment">//后置增强逻辑</span></div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure><p>这样处理过之后，代理角色调用原方法时候就会对原方法进行增强，以上就是一个简单的静态代理模型。</p><h2 id="适用范围及好处"><a href="#适用范围及好处" class="headerlink" title="适用范围及好处"></a>适用范围及好处</h2><p>代理模式适用于想要在原业务上面作增强处理还要不改变原有业务逻辑的场景，在实际开发中用途十分广泛。</p><p>代理模式有很多优点，它能够让真实角色不必关心业务无关的内容，使得程序结构更清晰，同时可以实现无侵入的扩展，有利于维护。</p><h2 id="动态代理"><a href="#动态代理" class="headerlink" title="动态代理"></a>动态代理</h2><p>前面说了这么多都是仅限于静态代理，下面介绍的动态代理才是代理模式的精髓。</p><p>动态代理指的是无需自己定义代理类，在程序运行时自动生成。动态代理方式有很多</p><ul><li>JDK自带的动态代理</li><li>javaassist字节码操作库实现</li><li>CGLIB</li><li>ASM（底层使用指令，可维护性较差）</li></ul><p>其中可以在java代码层面控制的是jdk静态代理和CGLIB动态代理两种，其中JDK动态代理只能对实现了接口的类生成代理，而不能针对类，而CGLIB是针对类实现代理，主要是对指定的类生成一个子类，覆盖其中的方法。第三方的CGLIB在此不展开介绍了，下面重点来看一下jdk动态代理。</p><p>首先来看一下动态代理的通用模型图<br><img src="http://oux9g0njr.bkt.clouddn.com/17-9-17/31655902.jpg" alt=""></p><p>下面是编码(省略导包语句)</p><ul><li>抽象主题和真实主题</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">Subject</span> </span>&#123;</div><div class="line">    <span class="comment">//定义一个方法</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">doSomething</span><span class="params">(String s)</span></span>;</div><div class="line">&#125;</div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">RealSubject</span> <span class="keyword">implements</span> <span class="title">Subject</span> </span>&#123;</div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">doSomething</span><span class="params">(String s)</span> </span>&#123;</div><div class="line">        <span class="comment">//实现方法</span></div><div class="line">        System.out.println(<span class="string">"do something "</span>+s);</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure><ul><li>InvocationHandler实现类</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyInvocationHandler</span> <span class="keyword">implements</span> <span class="title">InvocationHandler</span> </span>&#123;</div><div class="line">    <span class="comment">//被代理对象</span></div><div class="line">    <span class="keyword">private</span> Object target=<span class="keyword">null</span>;</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="title">MyInvocationHandler</span><span class="params">(Object target)</span> </span>&#123;</div><div class="line">        <span class="keyword">this</span>.target = target;</div><div class="line">    &#125;</div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> Object <span class="title">invoke</span><span class="params">(Object proxy, Method method, Object[] args)</span> <span class="keyword">throws</span> Throwable </span>&#123;</div><div class="line">        <span class="comment">//执行被代理方法</span></div><div class="line">        <span class="keyword">return</span> method.invoke(target,args);</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure><ul><li>通知接口及前置通知实现类</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">Advice</span> </span>&#123;</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">exec</span><span class="params">()</span></span>;</div><div class="line">&#125;</div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">BeforeAdvice</span> <span class="keyword">implements</span> <span class="title">Advice</span> </span>&#123;</div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">exec</span><span class="params">()</span> </span>&#123;</div><div class="line">        System.out.println(<span class="string">"before advice"</span>);</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure><ul><li>通用的动态代理类和具体的动态代理</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DynamicProxy</span>&lt;<span class="title">T</span>&gt; </span>&#123;</div><div class="line">    <span class="keyword">public</span> <span class="keyword">static</span> &lt;T&gt; <span class="function">T <span class="title">newProxyInstance</span><span class="params">(ClassLoader loader, Class&lt;?&gt;[] interfaces, InvocationHandler h)</span> </span>&#123;</div><div class="line">    <span class="comment">//找到切入点，执行前置通知</span></div><div class="line">        <span class="keyword">new</span> BeforeAdvice().exec();</div><div class="line">        <span class="comment">//执行并返回结果</span></div><div class="line">        <span class="keyword">return</span> (T) Proxy.newProxyInstance(loader, interfaces, h);</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SubjectDynamicProxy</span> <span class="keyword">extends</span> <span class="title">DynamicProxy</span> </span>&#123;</div><div class="line">    <span class="keyword">public</span> <span class="keyword">static</span> &lt;T&gt; <span class="function">T <span class="title">newProxyInstance</span><span class="params">(Subject subject)</span> </span>&#123;</div><div class="line">    <span class="comment">//获取ClassLoader</span></div><div class="line">        ClassLoader loader = subject.getClass().getClassLoader();</div><div class="line">        <span class="comment">//获取接口数组</span></div><div class="line">        Class&lt;?&gt;[] classes = subject.getClass().getInterfaces();</div><div class="line">        <span class="comment">//获取handler</span></div><div class="line">        InvocationHandler handler = <span class="keyword">new</span> MyInvocationHandler(subject);</div><div class="line">        <span class="keyword">return</span> newProxyInstance(loader, classes, handler);</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure><ul><li>使用场景</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Client</span> </span>&#123;</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</div><div class="line">        Subject subject=<span class="keyword">new</span> RealSubject();</div><div class="line">        Subject proxy=SubjectDynamicProxy.newProxyInstance(subject);</div><div class="line">        proxy.doSomething(<span class="string">"called"</span>);</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure><ul><li>输出结果</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">before advice</div><div class="line">do something called</div></pre></td></tr></table></figure><p>以上就是一个简单的动态代理场景，代理对象通过反射来动态实现，使得能够在不修改原有代码的前提下面向切面编程，增强或控制已有功能。代理模式是使用最广泛的一种设计模式，理解了代理模式，有助于对AOP的更深的了解。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;代理模式的定义&quot;&gt;&lt;a href=&quot;#代理模式的定义&quot; class=&quot;headerlink&quot; title=&quot;代理模式的定义&quot;&gt;&lt;/a&gt;代理模式的定义&lt;/h2&gt;&lt;blockquote&gt;
&lt;p&gt;为其他对象提供一种代理以控制对这个对象的访问。&lt;/p&gt;
&lt;/blockqu
      
    
    </summary>
    
    
      <category term="设计模式" scheme="http://fx109138.github.io/tags/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"/>
    
  </entry>
  
  <entry>
    <title>设计模式之原型模式</title>
    <link href="http://fx109138.github.io/2017/09/17/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F%E4%B9%8B%E5%8E%9F%E5%9E%8B%E6%A8%A1%E5%BC%8F/"/>
    <id>http://fx109138.github.io/2017/09/17/设计模式之原型模式/</id>
    <published>2017-09-17T05:00:21.000Z</published>
    <updated>2017-09-17T08:20:58.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="什么是原型模式"><a href="#什么是原型模式" class="headerlink" title="什么是原型模式"></a>什么是原型模式</h2><blockquote><p>用原型实例指定创建对象的种类，并且通过拷贝这些原型创建新的对象。</p></blockquote><p>原型模式是最后一种创建型设计模式了，这也是一种非常简单的设计模式，下面来具体看实例。</p><h2 id="举个栗子"><a href="#举个栗子" class="headerlink" title="举个栗子"></a>举个栗子</h2><p>原型模式的模型图<br><img src="http://oux9g0njr.bkt.clouddn.com/17-9-17/26421533.jpg" alt=""></p><p>原型模式的核心就是java中的克隆机制，Prototype类需要实现Cloneable接口，覆盖clone方法，然后就实现了原型模式，通用代码如下</p><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Prototype</span> <span class="keyword">implements</span> <span class="title">Cloneable</span> </span>&#123;</div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">protected</span> Object <span class="title">clone</span><span class="params">()</span> </span>&#123;</div><div class="line">        Prototype prototype = <span class="keyword">null</span>;</div><div class="line">        <span class="keyword">try</span> &#123;</div><div class="line">            prototype = (Prototype) <span class="keyword">super</span>.clone();</div><div class="line">        &#125; <span class="keyword">catch</span> (CloneNotSupportedException e) &#123;</div><div class="line">            <span class="comment">//处理异常</span></div><div class="line">        &#125;</div><div class="line">        <span class="keyword">return</span> prototype;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure><p>原型模式就是这么简单，是比单例模式还简单的设计模式，下面来看一看具体的使用。</p><h2 id="适用范围"><a href="#适用范围" class="headerlink" title="适用范围"></a>适用范围</h2><p>使用原型模式创建对象比直接new一个对象在性能上要好的多，因为Object类的clone方法是一个本地方法，它直接操作内存中的二进制流，特别是复制大对象时，性能的差别非常明显，在需要重复地创建相似对象时可以考虑使用原型模式。比如需要在一个循环体内创建对象，假如对象创建过程比较复杂或者循环次数很多的话，使用原型模式不但可以简化创建过程，而且可以使系统的整体性能提高很多。</p><h2 id="优点缺点"><a href="#优点缺点" class="headerlink" title="优点缺点"></a>优点缺点</h2><p>原型模式的优点是性能好，能够极大程度上降低创建新对象带来的系统开销。</p><p>另一方面，运行模式避开了构造方法的约束，这一点既是优点也是缺点，需要结合实际情况。</p><h2 id="注意事项"><a href="#注意事项" class="headerlink" title="注意事项"></a>注意事项</h2><p>首先要记住，使用克隆的方式创建对象是不会触发构造方法的，原因上面提到过。</p><p>另一个注意的点就是需要clone的类中任何成员不要用final修饰。</p><p>还有一个很重要的问题，涉及到java中克隆的特性，那就是浅拷贝和深拷贝</p><h3 id="浅拷贝"><a href="#浅拷贝" class="headerlink" title="浅拷贝"></a>浅拷贝</h3><p>看一下下面的例子</p><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Prototype</span> <span class="keyword">implements</span> <span class="title">Cloneable</span> </span>&#123;</div><div class="line"><span class="keyword">private</span> ArrayList list = <span class="keyword">new</span> ArrayList();</div><div class="line"><span class="function"><span class="keyword">public</span> Prototype <span class="title">clone</span><span class="params">()</span></span>&#123;</div><div class="line">Prototype prototype = <span class="keyword">null</span>;</div><div class="line"><span class="keyword">try</span>&#123;</div><div class="line">prototype = (Prototype)<span class="keyword">super</span>.clone();</div><div class="line">&#125;<span class="keyword">catch</span>(CloneNotSupportedException e)&#123;</div><div class="line"><span class="comment">//处理异常</span></div><div class="line">&#125;</div><div class="line"><span class="keyword">return</span> prototype; </div><div class="line">&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure><p>这样就可以复制出一个新对象吗，答案是否定的，这样创建的对象会和旧对象公用同一个list，也就是说list实际上没有被复制，两个对象共享一块空间，问题就很严重了。为什么会这样呢，因为java总clone方法只会对基本数据类型和String进行复制，其他的内容都只是浅拷贝，这是一种及其不安全的做法，于是就引出了深拷贝的概念。</p><h3 id="深拷贝"><a href="#深拷贝" class="headerlink" title="深拷贝"></a>深拷贝</h3><p>在上面的例子中做一点小的改动</p><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Prototype</span> <span class="keyword">implements</span> <span class="title">Cloneable</span> </span>&#123;</div><div class="line"><span class="keyword">private</span> ArrayList list = <span class="keyword">new</span> ArrayList();</div><div class="line"><span class="function"><span class="keyword">public</span> Prototype <span class="title">clone</span><span class="params">()</span></span>&#123;</div><div class="line">Prototype prototype = <span class="keyword">null</span>;</div><div class="line"><span class="keyword">try</span>&#123;</div><div class="line">prototype = (Prototype)<span class="keyword">super</span>.clone();</div><div class="line">prototype.list = (ArrayList) <span class="keyword">this</span>.list.clone();</div><div class="line">&#125;<span class="keyword">catch</span>(CloneNotSupportedException e)&#123;</div><div class="line"><span class="comment">//处理异常</span></div><div class="line">&#125;</div><div class="line"><span class="keyword">return</span> prototype; </div><div class="line">&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure><p>只是添加了一行代码，此时就可以实现深拷贝。在执行过程中把不能自动拷贝的数组，对象引用等等内容手动拷贝一份，这样完成的才是安全的拷贝。</p><p>原型模式要注意的大概就这么多，至此，五种创建型模式全部结束了，接下来会介绍结构型模式。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;什么是原型模式&quot;&gt;&lt;a href=&quot;#什么是原型模式&quot; class=&quot;headerlink&quot; title=&quot;什么是原型模式&quot;&gt;&lt;/a&gt;什么是原型模式&lt;/h2&gt;&lt;blockquote&gt;
&lt;p&gt;用原型实例指定创建对象的种类，并且通过拷贝这些原型创建新的对象。&lt;/p&gt;

      
    
    </summary>
    
    
      <category term="设计模式" scheme="http://fx109138.github.io/tags/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"/>
    
  </entry>
  
  <entry>
    <title>设计模式之建造者模式</title>
    <link href="http://fx109138.github.io/2017/09/17/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F%E4%B9%8B%E5%BB%BA%E9%80%A0%E8%80%85%E6%A8%A1%E5%BC%8F/"/>
    <id>http://fx109138.github.io/2017/09/17/设计模式之建造者模式/</id>
    <published>2017-09-17T02:59:23.000Z</published>
    <updated>2017-09-17T04:57:06.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="什么是建造者模式"><a href="#什么是建造者模式" class="headerlink" title="什么是建造者模式"></a>什么是建造者模式</h2><blockquote><p>将一个复杂对象的构建与它的表示分离，使得同样的构建过程可以创建不同的表示。</p></blockquote><p>建造者模式也叫生成器模式，也是一种创建型模式，我们还是先看实例。</p><h2 id="举个栗子"><a href="#举个栗子" class="headerlink" title="举个栗子"></a>举个栗子</h2><p>建造者模式的模型图<br><img src="http://oux9g0njr.bkt.clouddn.com/17-9-17/70604124.jpg" alt=""></p><p>从图上可以看出，建造者模式也有四种角色：导演，抽象建造者，具体建造者和产品。下面通过编码来展示一下四种角色之间的关系</p><ul><li>产品类</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Product</span> </span>&#123;</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">method</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="comment">//产品内业务</span></div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure><ul><li>抽象建造者类</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">Builder</span> </span>&#123;</div><div class="line">    <span class="comment">//设置不同的产品组成</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">void</span> <span class="title">setPart</span><span class="params">()</span></span>;</div><div class="line">    <span class="comment">//创建产品</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">abstract</span> Product <span class="title">buildProduct</span><span class="params">()</span></span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure><ul><li>具体建造者类</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ConcreteBuilder</span> <span class="keyword">extends</span> <span class="title">Builder</span> </span>&#123;</div><div class="line">    <span class="keyword">private</span> Product product = <span class="keyword">new</span> Product();</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setPart</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="comment">//不同产品的设置</span></div><div class="line">    &#125;</div><div class="line">    <span class="function"><span class="keyword">public</span> Product <span class="title">buildProduct</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">return</span> product;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure><ul><li>导演类</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Director</span> </span>&#123;</div><div class="line">    <span class="keyword">private</span> Builder builder = <span class="keyword">new</span> ConcreteBuilder();</div><div class="line">    <span class="function"><span class="keyword">public</span> Product <span class="title">getProduct</span><span class="params">()</span> </span>&#123;</div><div class="line">        builder.setPart();</div><div class="line">        <span class="comment">//不同产品组装</span></div><div class="line">        <span class="keyword">return</span> builder.buildProduct();</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure><p>产品类代表着一个具体的产品，我们的目的就是为了生产出一个产品，抽象创建者为创建具体的产品提供了接口，其中包含建造产品和返回产品的方法，而具体的建造者负责实现抽象的创建方法，最后是导演，它负责封装对建造者的调用过程。</p><h2 id="适用范围"><a href="#适用范围" class="headerlink" title="适用范围"></a>适用范围</h2><p>建造者模式最大的特点就在于不同构建的组装，所以它适用于需要组装的场景，当相同的内容在不同的组装后会产生不同的结果时，就需要使用建造者模式。</p><h2 id="优点缺点"><a href="#优点缺点" class="headerlink" title="优点缺点"></a>优点缺点</h2><p>建造者模式的优点一方面是封装性好，上层调用者无需关注产品内部实现细节，不需要关心内部实现，另一方面是扩展性好，创建者之间是完全独立的，有新的需求只要添加新的创建者即可。</p><h2 id="注意事项"><a href="#注意事项" class="headerlink" title="注意事项"></a>注意事项</h2><p>要注意创建者模式和工厂模式不一样，工厂模式的重点是创建的过程，而创建者模式重点在于组装，一般来说，当构建复杂的系统的时候，要使用创建者模式而不是工厂模式。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;什么是建造者模式&quot;&gt;&lt;a href=&quot;#什么是建造者模式&quot; class=&quot;headerlink&quot; title=&quot;什么是建造者模式&quot;&gt;&lt;/a&gt;什么是建造者模式&lt;/h2&gt;&lt;blockquote&gt;
&lt;p&gt;将一个复杂对象的构建与它的表示分离，使得同样的构建过程可以创建不同
      
    
    </summary>
    
    
      <category term="设计模式" scheme="http://fx109138.github.io/tags/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"/>
    
  </entry>
  
  <entry>
    <title>设计模式之抽象工厂模式</title>
    <link href="http://fx109138.github.io/2017/09/16/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F%E4%B9%8B%E6%8A%BD%E8%B1%A1%E5%B7%A5%E5%8E%82%E6%A8%A1%E5%BC%8F/"/>
    <id>http://fx109138.github.io/2017/09/16/设计模式之抽象工厂模式/</id>
    <published>2017-09-16T15:00:42.000Z</published>
    <updated>2017-09-17T02:55:38.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="抽象工厂模式的定义"><a href="#抽象工厂模式的定义" class="headerlink" title="抽象工厂模式的定义"></a>抽象工厂模式的定义</h2><blockquote><p>为创建一组相关或相互依赖的对象提供一个接口，而且无需指定他们的具体类。</p></blockquote><p>这个定义和它的名字一样抽象，至少我从这个定义里面无法获取到任何有价值的信息，所以直接来看实例。</p><h2 id="举个栗子"><a href="#举个栗子" class="headerlink" title="举个栗子"></a>举个栗子</h2><p>抽象工厂模式的模型图<br><img src="http://oux9g0njr.bkt.clouddn.com/17-9-16/21220091.jpg" alt=""></p><p>这个图仍然看不出任何问题，甚至看不出来抽象工厂抽象在哪，所以再看一个具体一点的业务模型<br><img src="http://oux9g0njr.bkt.clouddn.com/17-9-17/44103290.jpg" alt=""></p><p>在这里就可以看出来问题了，抽象工厂其实是对工厂模式维度的扩展，在抽象工厂中可以有不同的产品族，每个产品族的产品又可以划分成多个具体的等级，而每一种工厂专门负责生产某一等级的产品，下面是编码实现</p><ul><li>产品族A及1、2两个产品等级</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">AbstractProductA</span> </span>&#123;</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">method1</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="comment">//A产品共有逻辑</span></div><div class="line">    &#125;</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">void</span> <span class="title">method2</span><span class="params">()</span></span>;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ConcreteProductA1</span> <span class="keyword">extends</span> <span class="title">AbstractProductA</span> </span>&#123;</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">method2</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="comment">//A1的实现</span></div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ConcreteProductA2</span> <span class="keyword">extends</span> <span class="title">AbstractProductA</span> </span>&#123;</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">method2</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="comment">//A2的实现</span></div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure><ul><li>产品族B及1、2两个产品等级</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">AbstractProductB</span> </span>&#123;</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">method1</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="comment">//B产品共有逻辑</span></div><div class="line">    &#125;</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">void</span> <span class="title">method2</span><span class="params">()</span></span>;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ConcreteProductB1</span> <span class="keyword">extends</span> <span class="title">AbstractProductB</span> </span>&#123;</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">method2</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="comment">//B1的实现</span></div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ConcreteProductB2</span> <span class="keyword">extends</span> <span class="title">AbstractProductB</span> </span>&#123;</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">method2</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="comment">//B2的实现</span></div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure><ul><li>抽象工厂及1、2两个产品等级的工厂</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">AbstractFactory</span> </span>&#123;</div><div class="line">    <span class="comment">//产品族A创建方法</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">abstract</span> AbstractProductA <span class="title">createProductA</span><span class="params">()</span></span>;</div><div class="line">    <span class="comment">//产品族B创建方法</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">abstract</span> AbstractProductB <span class="title">createProductB</span><span class="params">()</span></span>;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ConcreteFactory1</span> <span class="keyword">extends</span> <span class="title">AbstractFactory</span> </span>&#123;</div><div class="line">    <span class="function"><span class="keyword">public</span> AbstractProductA <span class="title">createProductA</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">return</span> <span class="keyword">new</span> ConcreteProductA1();</div><div class="line">    &#125;</div><div class="line">    <span class="function"><span class="keyword">public</span> AbstractProductB <span class="title">createProductB</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">return</span> <span class="keyword">new</span> ConcreteProductB1();</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ConcreteFactory2</span> <span class="keyword">extends</span> <span class="title">AbstractFactory</span> </span>&#123;</div><div class="line">    <span class="function"><span class="keyword">public</span> AbstractProductA <span class="title">createProductA</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">return</span> <span class="keyword">new</span> ConcreteProductA2();</div><div class="line">    &#125;</div><div class="line">    <span class="function"><span class="keyword">public</span> AbstractProductB <span class="title">createProductB</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">return</span> <span class="keyword">new</span> ConcreteProductB2();</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure><p>在抽象工厂中，有X个产品族，抽象工厂内就要有X个创建方法，有Y个产品等级就要有Y个实现工厂类，每个具体工厂中实现不同产品族的生产。在调用时候，完全不用关心具体实现，只需要确定产品族和等级，就能创建出自己想要的产品。</p><h2 id="适用范围"><a href="#适用范围" class="headerlink" title="适用范围"></a>适用范围</h2><p>抽象工厂是对工厂方法模式的升级，它的解决的是一个继承体系中，如果存在着多个等级结构（即存在着多个抽象类），并且分属各个等级结构中的实现类之间存在着一定的关联或者约束，这样的情况下可以使用抽象工厂模式。</p><h2 id="优点缺点"><a href="#优点缺点" class="headerlink" title="优点缺点"></a>优点缺点</h2><p>抽象工厂的优点是封装性非常好，产品组的内部约束是完全隐藏状态，调用者无需关心除了工厂之外的东西。</p><p>抽象工厂的缺点就是产品族无法扩展，一旦需要增加内容，就要进行大幅度调整和修改，一方面违反开闭原则，另一方面随着结构复杂修改将会越来越多。</p><h2 id="注意事项"><a href="#注意事项" class="headerlink" title="注意事项"></a>注意事项</h2><p>上面在缺点中提到了产品族扩展困难，但是从另一个角度来看，抽象工厂扩展产品等级还是很容易的，也是符合开闭原则的，实际使用中还是要在详细考量业务需求后再做出选择。</p><p>简单工厂模式，工厂方法模式和抽象工厂模式都是为了降低程序之间的耦合而设计的，使用的时候往往不需要纠结具体用的是哪一种，在具体的业务场景下我们只要关心能否解耦就可以了。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;抽象工厂模式的定义&quot;&gt;&lt;a href=&quot;#抽象工厂模式的定义&quot; class=&quot;headerlink&quot; title=&quot;抽象工厂模式的定义&quot;&gt;&lt;/a&gt;抽象工厂模式的定义&lt;/h2&gt;&lt;blockquote&gt;
&lt;p&gt;为创建一组相关或相互依赖的对象提供一个接口，而且无需指定他
      
    
    </summary>
    
    
      <category term="设计模式" scheme="http://fx109138.github.io/tags/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"/>
    
  </entry>
  
  <entry>
    <title>设计模式之工厂方法模式</title>
    <link href="http://fx109138.github.io/2017/09/16/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F%E4%B9%8B%E5%B7%A5%E5%8E%82%E6%96%B9%E6%B3%95%E6%A8%A1%E5%BC%8F/"/>
    <id>http://fx109138.github.io/2017/09/16/设计模式之工厂方法模式/</id>
    <published>2017-09-16T12:29:40.000Z</published>
    <updated>2017-09-16T14:09:26.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="工厂方法模式的概念"><a href="#工厂方法模式的概念" class="headerlink" title="工厂方法模式的概念"></a>工厂方法模式的概念</h2><blockquote><p>定义一个创建产品对象的工厂接口，让子类决定实例化哪一个类，工厂方法使类的推迟到其子类当中。</p></blockquote><p>工厂方法模式是一种非常常用的创建设计模式，它通过进一步的抽象使得类中不变的部分和具体的实现剥离开，通过依赖注入以达到解耦、复用和方便后期维护拓展的目的。</p><h2 id="举个栗子"><a href="#举个栗子" class="headerlink" title="举个栗子"></a>举个栗子</h2><p>工厂方法模式的模型图<br><img src="http://oux9g0njr.bkt.clouddn.com/17-9-16/69045257.jpg" alt=""></p><p>从图中我们可以看出，工厂方法模式一共有四个基本角色，抽象产品，抽象工厂，具体产品，具体工厂。这四种角色的关系也很明确，下面看一下简单的代码实现</p><ul><li>抽象产品</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">Product</span> </span>&#123;</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">method1</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="comment">//公共方法</span></div><div class="line">    &#125;</div><div class="line">    <span class="comment">//抽象方法</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">void</span> <span class="title">method2</span><span class="params">()</span></span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure><ul><li>具体产品</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ConcreteProduct1</span> <span class="keyword">extends</span> <span class="title">Product</span></span>&#123;</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">method2</span><span class="params">()</span></span>&#123;</div><div class="line">        <span class="comment">//产品一的实现</span></div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ConcreteProduct2</span> <span class="keyword">extends</span> <span class="title">Product</span></span>&#123;</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">method2</span><span class="params">()</span></span>&#123;</div><div class="line">        <span class="comment">//产品二的实现</span></div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure><ul><li>抽象工厂</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">Creator</span> </span>&#123;</div><div class="line"><span class="comment">//抽象创建方法</span></div><div class="line">    <span class="keyword">public</span> <span class="keyword">abstract</span> &lt;T extends Product&gt; <span class="function">T <span class="title">createProduct</span><span class="params">(Class&lt;T&gt; c)</span></span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure><ul><li>具体工厂</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ConcreteCreator</span> <span class="keyword">extends</span> <span class="title">Creator</span> </span>&#123;</div><div class="line">    <span class="keyword">public</span> &lt;T extends Product&gt; <span class="function">T <span class="title">createProduct</span><span class="params">(Class&lt;T&gt; c)</span> </span>&#123;</div><div class="line">        Product product = <span class="keyword">null</span>;</div><div class="line">        <span class="keyword">try</span> &#123;</div><div class="line">            product = (Product) Class.forName(c.getName()).newInstance();</div><div class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</div><div class="line"></div><div class="line">        &#125;</div><div class="line">        <span class="keyword">return</span> (T) product;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure><p>这样处理之后，当需要创建一个新的产品时，只需要实例化出工厂，把需要创建的类传递进去，就可以创建出这个类的实例，调用者不需要关心产品类的细节，只要接口不变，上层调用者就不需要变更。</p><h2 id="适用范围"><a href="#适用范围" class="headerlink" title="适用范围"></a>适用范围</h2><p>工厂方法模式最大的用途就是解除代码之间的耦合，在设计一个灵活的可扩展的系统的时候，使用工厂模式定义通用接口，我们可以很方便地扩展实现。</p><h2 id="优点缺点"><a href="#优点缺点" class="headerlink" title="优点缺点"></a>优点缺点</h2><p>工厂方法模式的优点很多，首先它符合设计原则，可以很方便地对其进行扩展，代码结构清晰，同时它可以屏蔽产品类细节，封装性良好。</p><p>缺点大概就是过度使用可能会强行增加代码复杂度，在添加工厂类之前应该考虑清楚。</p><h2 id="注意事项"><a href="#注意事项" class="headerlink" title="注意事项"></a>注意事项</h2><p>工厂方法模式还有很多特殊情况，下面进行详细说明</p><h3 id="简单工厂模式"><a href="#简单工厂模式" class="headerlink" title="简单工厂模式"></a>简单工厂模式</h3><p>简单工厂模式也叫静态工厂方法模式，它不属于23种设计模式，但是很常用。简单工厂模式的需求是，当一组产品只需要同一个工厂的时候，我们不需要对工厂进行抽象，也并不需要进行实例化，此时可以取消抽象工厂，同时工厂方法可以设置为静态方法，此时的模型图如下<br><img src="http://oux9g0njr.bkt.clouddn.com/17-9-16/68118783.jpg" alt=""></p><p>简单工厂的优点就是简单，缺点就是工厂无法扩展，虽然如此，这种设计还是很常见的。</p><h3 id="多个工厂类的工厂模式"><a href="#多个工厂类的工厂模式" class="headerlink" title="多个工厂类的工厂模式"></a>多个工厂类的工厂模式</h3><p>上面的工厂方法我们只有一个具体的工厂，使用时候根据参数确定实例化的对象，我们也可以采用多个具体工厂的方式，代码如下(产品类同上)</p><ul><li>抽象工厂</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">Creator</span> </span>&#123;</div><div class="line">    <span class="comment">//抽象创建方法</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">abstract</span> Product <span class="title">createProduct</span><span class="params">()</span></span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure><ul><li>具体工厂</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ConcreteProduct1Creator</span> <span class="keyword">extends</span> <span class="title">Creator</span> </span>&#123;</div><div class="line">    <span class="function"><span class="keyword">public</span> Product <span class="title">createProduct</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">return</span> <span class="keyword">new</span> ConcreteProduct1();</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ConcreteProduct2Creator</span> <span class="keyword">extends</span> <span class="title">Creator</span> </span>&#123;</div><div class="line">    <span class="function"><span class="keyword">public</span> Product <span class="title">createProduct</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">return</span> <span class="keyword">new</span> ConcreteProduct2();</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure><p>运行结果和上面的相同，结构变得清晰了，缺点就是代码量增加了。</p><h3 id="单例工厂设计"><a href="#单例工厂设计" class="headerlink" title="单例工厂设计"></a>单例工厂设计</h3><p>在单例设计模式中，我们利用构造方法私有化，实现了外部无法创建多例的效果，此时我们是依靠由单例类自己控制的唯一一个对象来实现的。而工厂的单例唯一的实例不是由单例类自己管理，而是把它交给一个工厂来管理，在工厂内部可以通过反射来创建实例。</p><p>当然，这种单例并不是真正意义上的单例，在其他类中其实也可以通过反射来创建对象。我们只要知道有这样一种设计方式就够了，此处不贴代码了。</p><h2 id="尾声"><a href="#尾声" class="headerlink" title="尾声"></a>尾声</h2><p>工厂方法模式到此就要结束了，这是一种很常用的创建型设计模式，和很多模式都可以很好的组合，多使用才能熟练掌握。</p><p>如果我们要想从多个角度来控制产品，那么工厂方法模式可能就不够用了，需要用到下一篇介绍的抽象工厂模式。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;工厂方法模式的概念&quot;&gt;&lt;a href=&quot;#工厂方法模式的概念&quot; class=&quot;headerlink&quot; title=&quot;工厂方法模式的概念&quot;&gt;&lt;/a&gt;工厂方法模式的概念&lt;/h2&gt;&lt;blockquote&gt;
&lt;p&gt;定义一个创建产品对象的工厂接口，让子类决定实例化哪一个类，
      
    
    </summary>
    
    
      <category term="设计模式" scheme="http://fx109138.github.io/tags/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"/>
    
  </entry>
  
  <entry>
    <title>设计模式之单例模式</title>
    <link href="http://fx109138.github.io/2017/09/09/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F%E4%B9%8B%E5%8D%95%E4%BE%8B%E6%A8%A1%E5%BC%8F/"/>
    <id>http://fx109138.github.io/2017/09/09/设计模式之单例模式/</id>
    <published>2017-09-09T12:29:07.000Z</published>
    <updated>2017-09-16T13:02:30.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="设计模式分类"><a href="#设计模式分类" class="headerlink" title="设计模式分类"></a>设计模式分类</h2><p>23种设计模式一共分为三种类型：</p><ul><li>创建型模式：单例模式、工厂方法模式、抽象工厂模式、建造者模式、原型模式</li><li>结构型模式：代理模式、装饰模式、适配器模式、组合模式、门面模式、享元模式、桥梁模式</li><li>行为型模式：模版方法模式、中介者模式、命令模式、责任链模式、策略模式、迭代器模式、观察者模式、备忘录模式、访问者模式、状态模式、解释器模式</li></ul><p>这一篇首先来介绍单例模式。</p><h2 id="单例模式的概念"><a href="#单例模式的概念" class="headerlink" title="单例模式的概念"></a>单例模式的概念</h2><blockquote><p>保证一个类仅有一个实例，并提供一个访问它的全局访问点。</p></blockquote><p>单例模式是23种设计模式中最简单的一种，单例模式保证了在系统运行的全局只有一个该类的实例对象，在特定的需求下有非常重要的作用。</p><h3 id="举个栗子"><a href="#举个栗子" class="headerlink" title="举个栗子"></a>举个栗子</h3><p>一个简单的单例模型图<br><img src="http://oux9g0njr.bkt.clouddn.com/17-9-10/11592691.jpg" alt=""><br>单例模式的常见实现方式有两种</p><ul><li>懒汉式</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Singleton</span></span>&#123;</div><div class="line">    <span class="keyword">private</span> <span class="keyword">static</span> Singleton singleton=<span class="keyword">null</span>;</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span>　<span class="keyword">synchronized</span>　SingletonClass <span class="title">getInstance</span><span class="params">()</span></span>&#123;</div><div class="line">        <span class="keyword">if</span>(instance==<span class="keyword">null</span>)&#123;</div><div class="line">               singleton =<span class="keyword">new</span> SingletonClass();</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">return</span> singleton;</div><div class="line">    &#125;</div><div class="line">    <span class="function"><span class="keyword">private</span> <span class="title">Singleton</span><span class="params">()</span></span>&#123;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure><ul><li>饿汉式</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Singleton</span></span>&#123;</div><div class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> Singleton singleton = <span class="keyword">new</span> Singleton();</div><div class="line">    <span class="function"><span class="keyword">private</span> <span class="title">Singleton</span><span class="params">()</span></span>&#123;</div><div class="line">    &#125;</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Singleton <span class="title">getInstance</span><span class="params">()</span></span>&#123;</div><div class="line">        <span class="keyword">return</span> singleton;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure><p>这两种实现方式保证了系统在运行时全局只存在唯一一个Singleton类的实例，区别在于懒汉式在需要的时候创建实例，可以节约系统开销，但是与此同时产生了多线程下可能产生多个实例的问题，需要加锁同步。结合两方面的问题，还有一种双重锁的单例实现模式</p><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Singleton</span></span>&#123;</div><div class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">volatile</span> Singleton singleton=<span class="keyword">null</span>;</div><div class="line">    <span class="function"><span class="keyword">private</span> <span class="title">Singleton</span><span class="params">()</span></span>&#123;</div><div class="line">    &#125;</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Singleton <span class="title">getInstance</span><span class="params">()</span></span>&#123;</div><div class="line">        <span class="keyword">if</span>(singleton ==<span class="keyword">null</span>)&#123;</div><div class="line">            <span class="keyword">synchronized</span>(Singleton.class)&#123;</div><div class="line">                <span class="keyword">if</span>(singleton ==<span class="keyword">null</span>)&#123;</div><div class="line">                    singleton =<span class="keyword">new</span> Singleton();</div><div class="line">                &#125;</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">return</span> singleton;</div><div class="line">     &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure><p>这种方式把同步放在if判断内部，不需要每次都同步，因此提升了懒汉式单例的性能。</p><h3 id="适用范围"><a href="#适用范围" class="headerlink" title="适用范围"></a>适用范围</h3><ol><li>需要生成全局唯一变量的环境</li><li>需要进行大规模资源共享的环境</li><li>使用静态资源，方法的工具类</li></ol><h3 id="优点缺点"><a href="#优点缺点" class="headerlink" title="优点缺点"></a>优点缺点</h3><p>单例模式的优点在于全局只生成一个实例，减少了系统的开销，可以避免重复占用资源，方便进行全局的管理。</p><p>单例模式的缺点在于一旦被声明为单例，它的扩展性就会受到影响，所以单例模式只能在需要的时候使用。</p><h3 id="注意事项"><a href="#注意事项" class="headerlink" title="注意事项"></a>注意事项</h3><p>单例模式需要注意的最主要的问题就是多线程下面的同步问题，还有就是记住，只有需要使用单例的特定环境才能使用单例设计模式。</p><h3 id="补充内容"><a href="#补充内容" class="headerlink" title="补充内容"></a>补充内容</h3><p>上面我说的内容其实只是最基本的单例设计模式，实际应用中还有很多复杂的情况，也衍生了很多新的单例模式，所以在这里增加了一些补充的内容。</p><p>首先上面的单例即使同步了难道就真的做到单例了吗，其实不然，创建对象的可以不用new，创建对象有很多种方式：</p><ul><li>通过new关键词 【也只最常用的一种实现方式】</li><li>通过反射机制实现 【这里通过反射有两种实现方式：a、Class类的newInstance方法创建对象 b、java.lang.relect.Constructor类里也有一个newInstance方法可以创建对象】</li><li>通过clone方法实现 【该方法需要让当前类实现Cloneable接口 重写clone方法】</li><li>通过序列化以及反序列化实现 【该方法需要当前类实现】</li></ul><p>而一旦不使用new，上面的方式就不一定生效了，克隆的问题后面原型模式会详细分析，这里只看反序列化和反射，不幸的是，上面的方式都保证不了单例，于是有了一种新的方式</p><ul><li>枚举式</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="keyword">enum</span> Singleton&#123;</div><div class="line">INSTANCE;</div><div class="line">&#125;</div></pre></td></tr></table></figure><p>在这种单例模式中，INSTANCE可以被看做是Singleton的一个实例，我们也可以定义它的属性和方法，用Singleton.INSTANCE可以获取到这个唯一的实例，这种方式避免了反射和反序列化的漏洞。调用的效率比较高，线程安全，实现简单。唯一的缺点是没有实现延时加载。</p><p>此外还有一种比较好的结合懒汉式和饿汉式的一种方式，利用静态内部类实现单例</p><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Singleton</span></span>&#123;</div><div class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">SingletonHolder</span></span>&#123;</div><div class="line"><span class="keyword">private</span> <span class="keyword">static</span> singletonInstance=<span class="keyword">new</span> Singleton();</div><div class="line">&#125;</div><div class="line"><span class="keyword">private</span> Singleton&#123;</div><div class="line">&#125;</div><div class="line"><span class="keyword">public</span> <span class="keyword">static</span> getSingleton&#123;</div><div class="line"><span class="keyword">return</span> SingletonHolder. singletonInstance;</div><div class="line">&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure><p>还有一种登记式的单例模式，由于不常见，在这里不说明了，单例模式到此全部结束。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;设计模式分类&quot;&gt;&lt;a href=&quot;#设计模式分类&quot; class=&quot;headerlink&quot; title=&quot;设计模式分类&quot;&gt;&lt;/a&gt;设计模式分类&lt;/h2&gt;&lt;p&gt;23种设计模式一共分为三种类型：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;创建型模式：单例模式、工厂方法模式、抽象工厂模式
      
    
    </summary>
    
    
      <category term="设计模式" scheme="http://fx109138.github.io/tags/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"/>
    
  </entry>
  
  <entry>
    <title>设计模式之设计原则</title>
    <link href="http://fx109138.github.io/2017/09/09/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F%E4%B9%8B%E8%AE%BE%E8%AE%A1%E5%8E%9F%E5%88%99/"/>
    <id>http://fx109138.github.io/2017/09/09/设计模式之设计原则/</id>
    <published>2017-09-09T05:05:18.000Z</published>
    <updated>2017-09-09T09:52:37.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="写在前面的话"><a href="#写在前面的话" class="headerlink" title="写在前面的话"></a>写在前面的话</h1><p>从今天开始，我要每天学习一点设计模式。其实设计模式的书我之前就看过，而且不止一遍，不过阅读是一回事，理解又是另一回事。这次我决定把每次的学习，实践全都记录下来，一方面可以加深理解，另一方面也可以强制自己动手实践，我争取保证每种设计模式都要有理解，编码和UML三方面的内容记录，为了防止偷懒，每天写博客打卡记录。<br>现在说到设计模式，普遍指的就是四人帮总结的23种设计模式，每天学一种，尚且需要学习将近一个月，所以要抓紧时间，随着开发经验的积累，我觉得这次我会有新的理解和感受，第一篇博客，先看一下六大设计原则。</p><h1 id="六大设计原则是什么"><a href="#六大设计原则是什么" class="headerlink" title="六大设计原则是什么"></a>六大设计原则是什么</h1><p>23种设计模式其实都是围绕着六种设计原则来设计的的，它们分别是单一职责原则，里氏替换原则，依赖倒置原则，接口隔离原则，迪米特法则和开闭原则。这六种设计原则是设计模式的基础，下面逐一来看。</p><h2 id="单一职责原则SRP"><a href="#单一职责原则SRP" class="headerlink" title="单一职责原则SRP"></a>单一职责原则SRP</h2><blockquote><p>单一职责原则（Single Responsiblity Principle）：一个类只负责一个功能领域中的相应职责，或者可以定义为：就一个类而言，应该只有一个引起它变化的原因。</p></blockquote><p>从字面上看很简单，它的作用也是显而易见的，试想，如果有一个功能需要修改，只需要调整该功能所对应的类即可，不会影响到其它部分代码的实现，遵循单一职责原则可以把业务变更带来的风险降至最低。</p><p>但是，在实际开发过程中，真正意义上遵循单一职责原则的例子却很少见，实际开发中，需要考虑到结构复杂度等等问题，过分的细化会造成类的数量不断增多，更多的时候在方法级别满足单一职责原则就够了。单一职责原则是是实现高内聚、低耦合的指导方针，体现了模块化编程的思想。</p><h2 id="里氏替换原则LSP"><a href="#里氏替换原则LSP" class="headerlink" title="里氏替换原则LSP"></a>里氏替换原则LSP</h2><blockquote><p>里氏替换原则（Liskov Substitution Principle）：所有引用基类（父类）的地方必须能透明地使用其子类的对象。</p></blockquote><p>该设计原则由2008年图灵奖得主、美国第一位计算机科学女博士Barbara Liskov教授和卡内基·梅隆大学Jeannette Wing教授于1994年提出，也因此得名。这条设计原则针对的是面向对象中非常重要的一大特性–继承。</p><p>继承有很多优点，可以代码扩展，增强复用性，提高代码可扩展性等等。但是随之而来也带来了很多问题，继承是侵入性的，使用继承会限制代码的灵活性同时增加了代码的耦合程度，显然这不是我们想要的。所以《Effective Java》中提到了很重要的一点：组合优于继承。</p><p>那么应该如何使用好继承呢，里氏替换原则提供了几个方面的限制：</p><ul><li>子类可以实现父类的抽象方法，但不能覆盖父类的非抽象方法。</li><li>子类中可以增加自己特有的方法。</li><li>当子类的方法重载父类的方法时，方法的前置条件（即方法的形参）要比父类方法的输入参数更宽松。</li><li>当子类的方法实现父类的抽象方法时，方法的后置条件（即方法的返回值）要比父类更严格。</li></ul><p>只有遵守里氏替换原则，当有需要的时候，只声明其基类，实现换做任何一个之类都能够不影响代码运行，这样代码的扩展性和可维护性才会更好。</p><h2 id="依赖倒置原则DIP"><a href="#依赖倒置原则DIP" class="headerlink" title="依赖倒置原则DIP"></a>依赖倒置原则DIP</h2><blockquote><p>依赖倒置原则（Dependence Inversion Principle）：高层次的模块不应该依赖于低层次的模块，他们都应该依赖于抽象。抽象不应该依赖于具体实现，具体实现应该依赖于抽象。</p></blockquote><p>依赖倒置原则体现了面向对象编程的一个核心思想–面向接口编程。考虑到复杂多变的业务场景，很多时候同一功能极有可能会变更实现方式。如果按照传统的思维方式，我们直接把具体的某一种实现逻辑写到程序中去，一旦有变更，那么整个程序都需要全部重写。面向实现编程带来的最大影响就是代码之间耦合度极高，变更代码带来的风险极大。</p><p>此时，我们需要一种接触实现类之间耦合的方式，java中接口的概念就是解决这种问题的。一件事物的抽象形式是固定的，而事物之间的依赖可以通过抽象来确定，基于此，我们在这些固定不变的东西上建立依赖关系，而具体的实现遵从里氏替换原则，就可以保证实现类的变化不会影响各级关系依赖。面向接口编程是解耦的一种重要手段。</p><h2 id="接口隔离原则ISP"><a href="#接口隔离原则ISP" class="headerlink" title="接口隔离原则ISP"></a>接口隔离原则ISP</h2><blockquote><p>接口隔离原则（Interface Segregation Principle）：客户端不应该依赖它不需要的接口；一个类对另一个类的依赖应该建立在最小的接口上。</p></blockquote><p>接口隔离原则限制了接口的滥用。具体的实现是受接口限制的，一旦接口过大，实现者就必须要为其所有的方法做出实现，然而有些时候，这样会造成很多没必要的东西。接口设计出来应该是做该做的事，复杂的业务其实可以拆分，把所有的东西都放到同一个接口里面其实降低了系统的灵活程度。所以接口要尽量小，至于小到什么程度，肯定不能无限小下去，在满足单一职责的前提下接口可以不用再拆分。不要忘了所有的设计都是为了更好的实现业务，提高接口的内聚性，这样设计才有意义。</p><h2 id="迪米特法则LoD"><a href="#迪米特法则LoD" class="headerlink" title="迪米特法则LoD"></a>迪米特法则LoD</h2><blockquote><p>迪米特法则（Law of Demete）：又叫作最少知道原则（Least Knowledge Principle 简写LKP），就是指一个对象应当对其他对象有尽可能少的了解。</p></blockquote><p>迪米特法则限制了系统之间的联系。因为我们都知道，类之间联系越大，耦合度越高，一旦修改带来的影响就越大，迪米特法则要求只与直接的朋友通信，朋友包括以下几种：</p><ul><li>当前对象本身(this)</li><li>以参数形式传入到当前对象方法中的对象</li><li>当前对象的成员对象</li><li>如果当前对象的成员对象是一个集合，那么集合中的元素也都是朋友</li><li>当前对象所创建的对象</li></ul><p>除此之外，所有的对象都是陌生人，不能直接通信。这种限制强制了代码间的解耦，要求非朋友之间通信都要使用中介来完成。但是这种做法不一定是完全对的，最大的问题就在于一旦特别复杂，就会产生大量的传递类使系统变得庞大。对于迪米特法则，应用时候一定要权衡一下，既要做到结构清晰，又要高内聚低耦合。</p><h2 id="开闭原则OCP"><a href="#开闭原则OCP" class="headerlink" title="开闭原则OCP"></a>开闭原则OCP</h2><blockquote><p>开闭原则（Open Closed Principle）：一个软件实体如类、模块和函数应该对扩展开放，对修改关闭。</p></blockquote><p>开闭原则是面向对象设计中最基础的设计原则，在六种设计原则中它的定义最模糊，但是会发现实际上其余五种原则乃至23种设计模式无一不是遵守开闭原则。开闭原则中说不出来什么具体的东西，不过在软件开发的任何阶段都要记得开闭原则。我们尽可能的少修改代码，多扩充代码，就是为了使系统能更稳定地适应各种各样的变化。</p><hr><p>六种设计原则首字母开头的单词是solid（稳定的），设计出稳定灵活健壮的程序，是学习设计模式的最终目的，后面的23种设计模式都围绕着这六种设计原则。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;写在前面的话&quot;&gt;&lt;a href=&quot;#写在前面的话&quot; class=&quot;headerlink&quot; title=&quot;写在前面的话&quot;&gt;&lt;/a&gt;写在前面的话&lt;/h1&gt;&lt;p&gt;从今天开始，我要每天学习一点设计模式。其实设计模式的书我之前就看过，而且不止一遍，不过阅读是一回事，理解又是
      
    
    </summary>
    
    
      <category term="设计模式" scheme="http://fx109138.github.io/tags/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"/>
    
  </entry>
  
  <entry>
    <title>SSM框架整合--框架搭建</title>
    <link href="http://fx109138.github.io/2017/09/09/SSM%E6%A1%86%E6%9E%B6%E6%95%B4%E5%90%88-%E6%A1%86%E6%9E%B6%E6%90%AD%E5%BB%BA/"/>
    <id>http://fx109138.github.io/2017/09/09/SSM框架整合-框架搭建/</id>
    <published>2017-09-09T03:06:29.000Z</published>
    <updated>2017-09-09T10:00:50.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="SSM框架整合思路"><a href="#SSM框架整合思路" class="headerlink" title="SSM框架整合思路"></a>SSM框架整合思路</h1><p>不同于SSH整合，由于springMVC本身就是spring家族的一部分，所以SSM整合其实只要整合spring和mybatis即可。我们需要引入spring和mybatis整合的相关jar包，使用spring容器管理dataSource，sqlSessionFactory。而springMVC只需要配置视图解析器等等相关内容即可，而需要整合其他内容，比如shiro等等，都可以通过在spring中添加相关配置，进行相关整合。</p><h1 id="SSM整合实战"><a href="#SSM整合实战" class="headerlink" title="SSM整合实战"></a>SSM整合实战</h1><h2 id="在IDEA中创建maven工程"><a href="#在IDEA中创建maven工程" class="headerlink" title="在IDEA中创建maven工程"></a>在IDEA中创建maven工程</h2><p>打开IDEA，创建工程时候选择maven，按照模板来创建，模板选择maven-archetype-webapp,填入坐标信息，就可以创建一个简单的web工程，然后补全项目结构，一个标准的maven工程项目结构是这样的<br><img src="http://oux9g0njr.bkt.clouddn.com/17-9-9/55250568.jpg" alt=""></p><h2 id="配置pom-xml"><a href="#配置pom-xml" class="headerlink" title="配置pom.xml"></a>配置pom.xml</h2><p>工程模板搭建好之后，就要开始正式的编码了，首先要修改pom.xml，这个文件是maven工程的核心,一个基本的SSM工程需要的配置如下<br>    <figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div><div class="line">99</div><div class="line">100</div><div class="line">101</div><div class="line">102</div><div class="line">103</div><div class="line">104</div><div class="line">105</div><div class="line">106</div><div class="line">107</div><div class="line">108</div><div class="line">109</div><div class="line">110</div><div class="line">111</div><div class="line">112</div><div class="line">113</div><div class="line">114</div><div class="line">115</div><div class="line">116</div><div class="line">117</div><div class="line">118</div><div class="line">119</div><div class="line">120</div><div class="line">121</div><div class="line">122</div><div class="line">123</div><div class="line">124</div><div class="line">125</div><div class="line">126</div><div class="line">127</div><div class="line">128</div><div class="line">129</div><div class="line">130</div><div class="line">131</div><div class="line">132</div><div class="line">133</div><div class="line">134</div><div class="line">135</div><div class="line">136</div><div class="line">137</div><div class="line">138</div><div class="line">139</div><div class="line">140</div><div class="line">141</div><div class="line">142</div><div class="line">143</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">project</span> <span class="attr">xmlns</span>=<span class="string">"http://maven.apache.org/POM/4.0.0"</span></span></div><div class="line"><span class="tag">        <span class="attr">xmlns:xsi</span>=<span class="string">"http://www.w3.org/2001/XMLSchema-instance"</span></span></div><div class="line"><span class="tag">        <span class="attr">xsi:schemaLocation</span>=<span class="string">"http://maven.apache.org/POM/4.0.0</span></span></div><div class="line"><span class="tag"><span class="string">         http://maven.apache.org/maven-v4_0_0.xsd"</span>&gt;</span></div><div class="line">   <span class="tag">&lt;<span class="name">modelVersion</span>&gt;</span>4.0.0<span class="tag">&lt;/<span class="name">modelVersion</span>&gt;</span></div><div class="line">   <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.fx<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></div><div class="line">   <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>test<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></div><div class="line">   <span class="tag">&lt;<span class="name">packaging</span>&gt;</span>war<span class="tag">&lt;/<span class="name">packaging</span>&gt;</span></div><div class="line">   <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.0-SNAPSHOT<span class="tag">&lt;/<span class="name">version</span>&gt;</span></div><div class="line">   <span class="tag">&lt;<span class="name">name</span>&gt;</span>test Maven Webapp<span class="tag">&lt;/<span class="name">name</span>&gt;</span></div><div class="line">   <span class="tag">&lt;<span class="name">url</span>&gt;</span>http://maven.apache.org<span class="tag">&lt;/<span class="name">url</span>&gt;</span></div><div class="line">   <span class="tag">&lt;<span class="name">properties</span>&gt;</span></div><div class="line">       <span class="tag">&lt;<span class="name">spring.version</span>&gt;</span>4.1.4.RELEASE<span class="tag">&lt;/<span class="name">spring.version</span>&gt;</span></div><div class="line">       <span class="tag">&lt;<span class="name">mybatis.version</span>&gt;</span>3.2.8<span class="tag">&lt;/<span class="name">mybatis.version</span>&gt;</span></div><div class="line">   <span class="tag">&lt;/<span class="name">properties</span>&gt;</span></div><div class="line">   <span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></div><div class="line">       <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></div><div class="line">           <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></div><div class="line">           <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-core<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></div><div class="line">           <span class="tag">&lt;<span class="name">version</span>&gt;</span>$&#123;spring.version&#125;<span class="tag">&lt;/<span class="name">version</span>&gt;</span></div><div class="line">       <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></div><div class="line">       <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></div><div class="line">           <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></div><div class="line">           <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-context<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></div><div class="line">           <span class="tag">&lt;<span class="name">version</span>&gt;</span>$&#123;spring.version&#125;<span class="tag">&lt;/<span class="name">version</span>&gt;</span></div><div class="line">       <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></div><div class="line">       <span class="comment">&lt;!-- 添加spring-tx包 --&gt;</span></div><div class="line">       <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></div><div class="line">           <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></div><div class="line">           <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-tx<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></div><div class="line">           <span class="tag">&lt;<span class="name">version</span>&gt;</span>$&#123;spring.version&#125;<span class="tag">&lt;/<span class="name">version</span>&gt;</span></div><div class="line">       <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></div><div class="line">       <span class="comment">&lt;!-- 添加spring-jdbc包 --&gt;</span></div><div class="line">       <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></div><div class="line">           <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></div><div class="line">           <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-jdbc<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></div><div class="line">           <span class="tag">&lt;<span class="name">version</span>&gt;</span>$&#123;spring.version&#125;<span class="tag">&lt;/<span class="name">version</span>&gt;</span></div><div class="line">       <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></div><div class="line">       <span class="comment">&lt;!-- 为了方便进行单元测试，添加spring-test包 --&gt;</span></div><div class="line">       <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></div><div class="line">           <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></div><div class="line">           <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-test<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></div><div class="line">           <span class="tag">&lt;<span class="name">version</span>&gt;</span>$&#123;spring.version&#125;<span class="tag">&lt;/<span class="name">version</span>&gt;</span></div><div class="line">       <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></div><div class="line">       <span class="comment">&lt;!--添加spring-web包 --&gt;</span></div><div class="line">       <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></div><div class="line">           <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></div><div class="line">           <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-web<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></div><div class="line">           <span class="tag">&lt;<span class="name">version</span>&gt;</span>$&#123;spring.version&#125;<span class="tag">&lt;/<span class="name">version</span>&gt;</span></div><div class="line">       <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></div><div class="line">       <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></div><div class="line">           <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></div><div class="line">           <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-webmvc<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></div><div class="line">           <span class="tag">&lt;<span class="name">version</span>&gt;</span>$&#123;spring.version&#125;<span class="tag">&lt;/<span class="name">version</span>&gt;</span></div><div class="line">       <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></div><div class="line">       <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></div><div class="line">           <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></div><div class="line">           <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-aop<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></div><div class="line">           <span class="tag">&lt;<span class="name">version</span>&gt;</span>$&#123;spring.version&#125;<span class="tag">&lt;/<span class="name">version</span>&gt;</span></div><div class="line">       <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></div><div class="line">       <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></div><div class="line">           <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></div><div class="line">           <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-context-support<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></div><div class="line">           <span class="tag">&lt;<span class="name">version</span>&gt;</span>$&#123;spring.version&#125;<span class="tag">&lt;/<span class="name">version</span>&gt;</span></div><div class="line">       <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></div><div class="line">       <span class="comment">&lt;!--添加aspectjweaver包 --&gt;</span></div><div class="line">       <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></div><div class="line">           <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.aspectj<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></div><div class="line">           <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>aspectjweaver<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></div><div class="line">           <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.8.5<span class="tag">&lt;/<span class="name">version</span>&gt;</span></div><div class="line">       <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></div><div class="line">       <span class="comment">&lt;!-- 添加mybatis的核心包 --&gt;</span></div><div class="line">       <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></div><div class="line">           <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.mybatis<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></div><div class="line">           <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mybatis<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></div><div class="line">           <span class="tag">&lt;<span class="name">version</span>&gt;</span>$&#123;mybatis.version&#125;<span class="tag">&lt;/<span class="name">version</span>&gt;</span></div><div class="line">       <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></div><div class="line">       <span class="comment">&lt;!-- 添加mybatis与Spring整合的核心包 --&gt;</span></div><div class="line">       <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></div><div class="line">           <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.mybatis<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></div><div class="line">           <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mybatis-spring<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></div><div class="line">           <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.2.2<span class="tag">&lt;/<span class="name">version</span>&gt;</span></div><div class="line">       <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></div><div class="line">       <span class="comment">&lt;!-- 添加servlet3.0核心包 --&gt;</span></div><div class="line">       <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></div><div class="line">           <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>javax.servlet<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></div><div class="line">           <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>javax.servlet-api<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></div><div class="line">           <span class="tag">&lt;<span class="name">version</span>&gt;</span>3.0.1<span class="tag">&lt;/<span class="name">version</span>&gt;</span></div><div class="line">       <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></div><div class="line">       <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></div><div class="line">           <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>javax.servlet.jsp<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></div><div class="line">           <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>javax.servlet.jsp-api<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></div><div class="line">           <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.3.2-b01<span class="tag">&lt;/<span class="name">version</span>&gt;</span></div><div class="line">       <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></div><div class="line">       <span class="comment">&lt;!-- jstl --&gt;</span></div><div class="line">       <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></div><div class="line">           <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>javax.servlet<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></div><div class="line">           <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>jstl<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></div><div class="line">           <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.2<span class="tag">&lt;/<span class="name">version</span>&gt;</span></div><div class="line">       <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></div><div class="line">       <span class="comment">&lt;!-- 添加mysql驱动包 --&gt;</span></div><div class="line">       <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></div><div class="line">           <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>mysql<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></div><div class="line">           <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mysql-connector-java<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></div><div class="line">           <span class="tag">&lt;<span class="name">version</span>&gt;</span>5.1.34<span class="tag">&lt;/<span class="name">version</span>&gt;</span></div><div class="line">       <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></div><div class="line">       <span class="comment">&lt;!-- 添加druid连接池包 --&gt;</span></div><div class="line">       <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></div><div class="line">           <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.alibaba<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></div><div class="line">           <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>druid<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></div><div class="line">           <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.0.12<span class="tag">&lt;/<span class="name">version</span>&gt;</span></div><div class="line">       <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></div><div class="line">       <span class="comment">&lt;!-- 格式化对象 --&gt;</span></div><div class="line">       <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></div><div class="line">           <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.alibaba<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></div><div class="line">           <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>fastjson<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></div><div class="line">           <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.1.41<span class="tag">&lt;/<span class="name">version</span>&gt;</span></div><div class="line">       <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></div><div class="line">   <span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></div><div class="line">   <span class="tag">&lt;<span class="name">build</span>&gt;</span></div><div class="line">       <span class="tag">&lt;<span class="name">finalName</span>&gt;</span>test<span class="tag">&lt;/<span class="name">finalName</span>&gt;</span></div><div class="line">       <span class="tag">&lt;<span class="name">resources</span>&gt;</span></div><div class="line">       <span class="comment">&lt;!-- 编译时编译mybatis映射文件 --&gt;</span></div><div class="line">           <span class="tag">&lt;<span class="name">resource</span>&gt;</span></div><div class="line">               <span class="tag">&lt;<span class="name">directory</span>&gt;</span>src/main/java<span class="tag">&lt;/<span class="name">directory</span>&gt;</span></div><div class="line">               <span class="tag">&lt;<span class="name">includes</span>&gt;</span></div><div class="line">                   <span class="tag">&lt;<span class="name">include</span>&gt;</span>**/*.xml<span class="tag">&lt;/<span class="name">include</span>&gt;</span></div><div class="line">               <span class="tag">&lt;/<span class="name">includes</span>&gt;</span></div><div class="line">           <span class="tag">&lt;/<span class="name">resource</span>&gt;</span></div><div class="line">       <span class="tag">&lt;/<span class="name">resources</span>&gt;</span></div><div class="line">       <span class="tag">&lt;<span class="name">plugins</span>&gt;</span></div><div class="line">       <span class="comment">&lt;!-- 指定jdk版本 --&gt;</span></div><div class="line">           <span class="tag">&lt;<span class="name">plugin</span>&gt;</span></div><div class="line">               <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.apache.maven.plugins<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></div><div class="line">               <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>maven-compiler-plugin<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></div><div class="line">               <span class="tag">&lt;<span class="name">configuration</span>&gt;</span></div><div class="line">                   <span class="tag">&lt;<span class="name">source</span>&gt;</span>1.8<span class="tag">&lt;/<span class="name">source</span>&gt;</span></div><div class="line">                   <span class="tag">&lt;<span class="name">target</span>&gt;</span>1.8<span class="tag">&lt;/<span class="name">target</span>&gt;</span></div><div class="line">               <span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></div><div class="line">           <span class="tag">&lt;/<span class="name">plugin</span>&gt;</span></div><div class="line">       <span class="tag">&lt;/<span class="name">plugins</span>&gt;</span></div><div class="line">   <span class="tag">&lt;/<span class="name">build</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">project</span>&gt;</span></div></pre></td></tr></table></figure></p><p>开启自动导入，系统就会为maven引入相关依赖。</p><h2 id="配置spring"><a href="#配置spring" class="headerlink" title="配置spring"></a>配置spring</h2><p>由于我们采用了spring整合mybatis的方式，所以mybatis的配置文件可以省略，而spring的配置我们采用注解方式，在resources目录下创建spring配置文件命名为applicationContext.xml（此处命名任意），applicationContext.xml内容如下</p><pre><code><figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div></pre></td><td class="code"><pre><div class="line">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</div><div class="line"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">xmlns</span>=<span class="string">"http://www.springframework.org/schema/beans"</span></span></div><div class="line"><span class="tag">      <span class="attr">xmlns:xsi</span>=<span class="string">"http://www.w3.org/2001/XMLSchema-instance"</span></span></div><div class="line"><span class="tag">      <span class="attr">xmlns:context</span>=<span class="string">"http://www.springframework.org/schema/context"</span></span></div><div class="line"><span class="tag">      <span class="attr">xmlns:aop</span>=<span class="string">"http://www.springframework.org/schema/aop"</span></span></div><div class="line"><span class="tag">      <span class="attr">xmlns:tx</span>=<span class="string">"http://www.springframework.org/schema/tx"</span></span></div><div class="line"><span class="tag">      <span class="attr">xsi:schemaLocation</span>=<span class="string">"http://www.springframework.org/schema/beans</span></span></div><div class="line"><span class="tag"><span class="string">   http://www.springframework.org/schema/beans/spring-beans-4.0.xsd</span></span></div><div class="line"><span class="tag"><span class="string">   http://www.springframework.org/schema/context</span></span></div><div class="line"><span class="tag"><span class="string">   http://www.springframework.org/schema/context/spring-context-4.0.xsd</span></span></div><div class="line"><span class="tag"><span class="string">   http://www.springframework.org/schema/aop</span></span></div><div class="line"><span class="tag"><span class="string">   http://www.springframework.org/schema/aop/spring-aop-4.0.xsd</span></span></div><div class="line"><span class="tag"><span class="string">   http://www.springframework.org/schema/tx</span></span></div><div class="line"><span class="tag"><span class="string">   http://www.springframework.org/schema/tx/spring-tx-4.0.xsd"</span>&gt;</span></div><div class="line"></div><div class="line">   <span class="comment">&lt;!--开启切面编程自动代理--&gt;</span></div><div class="line">   <span class="tag">&lt;<span class="name">aop:aspectj-autoproxy</span> <span class="attr">proxy-target-class</span>=<span class="string">"true"</span>/&gt;</span></div><div class="line"></div><div class="line">   <span class="comment">&lt;!--扫描注解生成bean--&gt;</span></div><div class="line">   <span class="tag">&lt;<span class="name">context:annotation-config</span>/&gt;</span></div><div class="line"></div><div class="line">   <span class="comment">&lt;!--包扫描--&gt;</span></div><div class="line">   <span class="tag">&lt;<span class="name">context:component-scan</span> <span class="attr">base-package</span>=<span class="string">"com.fx"</span>/&gt;</span></div><div class="line"></div><div class="line"><span class="comment">&lt;!-- 加载jdbc配置文件 --&gt;</span></div><div class="line">   <span class="tag">&lt;<span class="name">context:property-placeholder</span> <span class="attr">location</span>=<span class="string">"classpath:jdbc.properties"</span>/&gt;</span></div><div class="line"></div><div class="line">   <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"sqlSessionFactory"</span> <span class="attr">class</span>=<span class="string">"org.mybatis.spring.SqlSessionFactoryBean"</span>&gt;</span></div><div class="line">       <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"dataSource"</span> <span class="attr">ref</span>=<span class="string">"dataSource"</span>/&gt;</span></div><div class="line">       <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"mapperLocations"</span> <span class="attr">value</span>=<span class="string">"classpath:com/fx/**/**.xml"</span>/&gt;</span></div><div class="line">   <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></div><div class="line"></div><div class="line">   <span class="tag">&lt;<span class="name">bean</span> <span class="attr">class</span>=<span class="string">"org.mybatis.spring.mapper.MapperScannerConfigurer"</span>&gt;</span></div><div class="line">       <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"basePackage"</span> <span class="attr">value</span>=<span class="string">"com.fx.*.dao"</span>/&gt;</span></div><div class="line">       <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"sqlSessionFactoryBeanName"</span> <span class="attr">value</span>=<span class="string">"sqlSessionFactory"</span>/&gt;</span></div><div class="line">   <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></div><div class="line"></div><div class="line">   <span class="comment">&lt;!--声明事务管理 采用注解方式--&gt;</span></div><div class="line">   <span class="tag">&lt;<span class="name">tx:annotation-driven</span> <span class="attr">transaction-manager</span>=<span class="string">"transactionManager"</span>/&gt;</span></div><div class="line"></div><div class="line">   <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"transactionManager"</span> <span class="attr">class</span>=<span class="string">"org.springframework.jdbc.datasource.DataSourceTransactionManager"</span>&gt;</span></div><div class="line">       <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"dataSource"</span> <span class="attr">ref</span>=<span class="string">"dataSource"</span>/&gt;</span></div><div class="line">   <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></div><div class="line"></div><div class="line">   <span class="comment">&lt;!--数据库设置--&gt;</span></div><div class="line">   <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"dataSource"</span> <span class="attr">class</span>=<span class="string">"com.alibaba.druid.pool.DruidDataSource"</span> <span class="attr">destroy-method</span>=<span class="string">"close"</span> <span class="attr">init-method</span>=<span class="string">"init"</span>&gt;</span></div><div class="line">       <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"driverClassName"</span> <span class="attr">value</span>=<span class="string">"$&#123;driverClassName&#125;"</span>/&gt;</span></div><div class="line">       <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"url"</span> <span class="attr">value</span>=<span class="string">"$&#123;jdbc_url&#125;"</span>/&gt;</span></div><div class="line">       <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"username"</span> <span class="attr">value</span>=<span class="string">"$&#123;jdbc_username&#125;"</span>/&gt;</span></div><div class="line">       <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"password"</span> <span class="attr">value</span>=<span class="string">"$&#123;jdbc_password&#125;"</span>/&gt;</span></div><div class="line">       <span class="comment">&lt;!-- 初始化连接大小 --&gt;</span></div><div class="line">       <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"initialSize"</span> <span class="attr">value</span>=<span class="string">"0"</span>/&gt;</span></div><div class="line">       <span class="comment">&lt;!-- 连接池最大使用连接数量 --&gt;</span></div><div class="line">       <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"maxActive"</span> <span class="attr">value</span>=<span class="string">"20"</span>/&gt;</span></div><div class="line">       <span class="comment">&lt;!-- 连接池最小空闲 --&gt;</span></div><div class="line">       <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"minIdle"</span> <span class="attr">value</span>=<span class="string">"0"</span>/&gt;</span></div><div class="line">       <span class="comment">&lt;!-- 获取连接最大等待时间 --&gt;</span></div><div class="line">       <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"maxWait"</span> <span class="attr">value</span>=<span class="string">"60000"</span>/&gt;</span></div><div class="line">       <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"validationQuery"</span> <span class="attr">value</span>=<span class="string">"$&#123;validationQuery&#125;"</span>/&gt;</span></div><div class="line">       <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"testOnBorrow"</span> <span class="attr">value</span>=<span class="string">"false"</span>/&gt;</span></div><div class="line">       <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"testOnReturn"</span> <span class="attr">value</span>=<span class="string">"false"</span>/&gt;</span></div><div class="line">       <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"testWhileIdle"</span> <span class="attr">value</span>=<span class="string">"true"</span>/&gt;</span></div><div class="line">       <span class="comment">&lt;!-- 配置间隔多久才进行一次检测，检测需要关闭的空闲连接，单位是毫秒 --&gt;</span></div><div class="line">       <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"timeBetweenEvictionRunsMillis"</span> <span class="attr">value</span>=<span class="string">"60000"</span>/&gt;</span></div><div class="line">       <span class="comment">&lt;!-- 配置一个连接在池中最小生存的时间，单位是毫秒 --&gt;</span></div><div class="line">       <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"minEvictableIdleTimeMillis"</span> <span class="attr">value</span>=<span class="string">"25200000"</span>/&gt;</span></div><div class="line">       <span class="comment">&lt;!-- 打开removeAbandoned功能 --&gt;</span></div><div class="line">       <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"removeAbandoned"</span> <span class="attr">value</span>=<span class="string">"true"</span>/&gt;</span></div><div class="line">       <span class="comment">&lt;!-- 1800秒，也就是30分钟 --&gt;</span></div><div class="line">       <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"removeAbandonedTimeout"</span> <span class="attr">value</span>=<span class="string">"1800"</span>/&gt;</span></div><div class="line">       <span class="comment">&lt;!-- 关闭abanded连接时输出错误日志 --&gt;</span></div><div class="line">       <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"logAbandoned"</span> <span class="attr">value</span>=<span class="string">"true"</span>/&gt;</span></div><div class="line">       <span class="comment">&lt;!-- 监控数据库 --&gt;</span></div><div class="line">       <span class="comment">&lt;!-- &lt;property name="filters" value="stat" /&gt; --&gt;</span></div><div class="line">       <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"filters"</span> <span class="attr">value</span>=<span class="string">"mergeStat"</span>/&gt;</span></div><div class="line">   <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></div><div class="line">   <span class="tag">&lt;/<span class="name">beans</span>&gt;</span></div></pre></td></tr></table></figure></code></pre><p>数据库连接池使用druid，在resources目录下创建jdbc的配置文件，我们就完成了spring和mybatis的配置。</p><h2 id="配置springMVC"><a href="#配置springMVC" class="headerlink" title="配置springMVC"></a>配置springMVC</h2><p>在resources目录下再创建一个spring-mvc.xml（命名任意），在里面配置表现层的相关内容<br>    <figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div></pre></td><td class="code"><pre><div class="line">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</div><div class="line"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">xmlns</span>=<span class="string">"http://www.springframework.org/schema/beans"</span></span></div><div class="line"><span class="tag">      <span class="attr">xmlns:xsi</span>=<span class="string">"http://www.w3.org/2001/XMLSchema-instance"</span></span></div><div class="line"><span class="tag">      <span class="attr">xmlns:mvc</span>=<span class="string">"http://www.springframework.org/schema/mvc"</span></span></div><div class="line"><span class="tag">      <span class="attr">xmlns:contex</span>=<span class="string">"http://www.springframework.org/schema/context"</span></span></div><div class="line"><span class="tag">      <span class="attr">xsi:schemaLocation</span>=<span class="string">"http://www.springframework.org/schema/beans</span></span></div><div class="line"><span class="tag"><span class="string">        http://www.springframework.org/schema/beans/spring-beans.xsd</span></span></div><div class="line"><span class="tag"><span class="string">        http://www.springframework.org/schema/mvc</span></span></div><div class="line"><span class="tag"><span class="string">        http://www.springframework.org/schema/mvc/spring-mvc.xsd</span></span></div><div class="line"><span class="tag"><span class="string">        http://www.springframework.org/schema/context</span></span></div><div class="line"><span class="tag"><span class="string">        http://www.springframework.org/schema/context/spring-context.xsd"</span>&gt;</span></div><div class="line"></div><div class="line"><span class="comment">&lt;!-- 注解驱动 --&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">mvc:annotation-driven</span>/&gt;</span></div><div class="line"></div><div class="line"><span class="comment">&lt;!-- 处理静态资源 --&gt;</span></div><div class="line">   <span class="tag">&lt;<span class="name">mvc:default-servlet-handler</span>/&gt;</span></div><div class="line"></div><div class="line"><span class="comment">&lt;!-- 视图解析器 --&gt;</span></div><div class="line">   <span class="tag">&lt;<span class="name">bean</span> <span class="attr">class</span>=<span class="string">"org.springframework.web.servlet.view.InternalResourceViewResolver"</span>&gt;</span></div><div class="line">       <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"viewClass"</span> <span class="attr">value</span>=<span class="string">"org.springframework.web.servlet.view.JstlView"</span>/&gt;</span></div><div class="line">       <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"prefix"</span> <span class="attr">value</span>=<span class="string">"/WEB-INF/jsp/"</span>/&gt;</span></div><div class="line">       <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"suffix"</span> <span class="attr">value</span>=<span class="string">".jsp"</span>/&gt;</span></div><div class="line">   <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></div><div class="line"></div><div class="line"><span class="comment">&lt;!-- 包扫描 --&gt;</span></div><div class="line">   <span class="tag">&lt;<span class="name">contex:component-scan</span> <span class="attr">base-package</span>=<span class="string">"com.fx.*.controller"</span>/&gt;</span></div><div class="line">   <span class="tag">&lt;/<span class="name">beans</span>&gt;</span></div></pre></td></tr></table></figure></p><p>至此，表现层就配置完成了。</p><h2 id="配置web-xml"><a href="#配置web-xml" class="headerlink" title="配置web.xml"></a>配置web.xml</h2><p>maven默认生成的web.xml默认是2.3版本的，需要改成3.1版本的，之后在里面添加启动配置信息<br>    <figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div></pre></td><td class="code"><pre><div class="line">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</div><div class="line"><span class="tag">&lt;<span class="name">web-app</span> <span class="attr">xmlns</span>=<span class="string">"http://xmlns.jcp.org/xml/ns/javaee"</span></span></div><div class="line"><span class="tag">        <span class="attr">xmlns:xsi</span>=<span class="string">"http://www.w3.org/2001/XMLSchema-instance"</span></span></div><div class="line"><span class="tag">        <span class="attr">xsi:schemaLocation</span>=<span class="string">"http://xmlns.jcp.org/xml/ns/javaee</span></span></div><div class="line"><span class="tag"><span class="string">         http://xmlns.jcp.org/xml/ns/javaee/web-app_3_1.xsd"</span></span></div><div class="line"><span class="tag">        <span class="attr">version</span>=<span class="string">"3.1"</span>&gt;</span></div><div class="line"></div><div class="line">   <span class="comment">&lt;!--加载spring容器配置--&gt;</span></div><div class="line">   <span class="tag">&lt;<span class="name">context-param</span>&gt;</span></div><div class="line">       <span class="tag">&lt;<span class="name">param-name</span>&gt;</span>contextConfigLocation<span class="tag">&lt;/<span class="name">param-name</span>&gt;</span></div><div class="line">       <span class="tag">&lt;<span class="name">param-value</span>&gt;</span>classpath:applicationContext.xml<span class="tag">&lt;/<span class="name">param-value</span>&gt;</span></div><div class="line">   <span class="tag">&lt;/<span class="name">context-param</span>&gt;</span></div><div class="line"></div><div class="line">   <span class="comment">&lt;!--spring监听器--&gt;</span></div><div class="line">   <span class="tag">&lt;<span class="name">listener</span>&gt;</span></div><div class="line">       <span class="tag">&lt;<span class="name">listener-class</span>&gt;</span>org.springframework.web.context.ContextLoaderListener<span class="tag">&lt;/<span class="name">listener-class</span>&gt;</span></div><div class="line">   <span class="tag">&lt;/<span class="name">listener</span>&gt;</span></div><div class="line"></div><div class="line">   <span class="comment">&lt;!--springMVC前端控制器--&gt;</span></div><div class="line">   <span class="tag">&lt;<span class="name">servlet</span>&gt;</span></div><div class="line">       <span class="tag">&lt;<span class="name">servlet-name</span>&gt;</span>springMVC<span class="tag">&lt;/<span class="name">servlet-name</span>&gt;</span></div><div class="line">       <span class="tag">&lt;<span class="name">servlet-class</span>&gt;</span>org.springframework.web.servlet.DispatcherServlet<span class="tag">&lt;/<span class="name">servlet-class</span>&gt;</span></div><div class="line">       <span class="tag">&lt;<span class="name">init-param</span>&gt;</span></div><div class="line">           <span class="tag">&lt;<span class="name">param-name</span>&gt;</span>contextConfigLocation<span class="tag">&lt;/<span class="name">param-name</span>&gt;</span></div><div class="line">           <span class="tag">&lt;<span class="name">param-value</span>&gt;</span>classpath:spring-mvc.xml<span class="tag">&lt;/<span class="name">param-value</span>&gt;</span></div><div class="line">       <span class="tag">&lt;/<span class="name">init-param</span>&gt;</span></div><div class="line">       <span class="tag">&lt;<span class="name">load-on-startup</span>&gt;</span>1<span class="tag">&lt;/<span class="name">load-on-startup</span>&gt;</span></div><div class="line">       <span class="tag">&lt;<span class="name">async-supported</span>&gt;</span>true<span class="tag">&lt;/<span class="name">async-supported</span>&gt;</span></div><div class="line">   <span class="tag">&lt;/<span class="name">servlet</span>&gt;</span></div><div class="line">   <span class="tag">&lt;<span class="name">servlet-mapping</span>&gt;</span></div><div class="line">       <span class="tag">&lt;<span class="name">servlet-name</span>&gt;</span>springMVC<span class="tag">&lt;/<span class="name">servlet-name</span>&gt;</span></div><div class="line">       <span class="tag">&lt;<span class="name">url-pattern</span>&gt;</span>/<span class="tag">&lt;/<span class="name">url-pattern</span>&gt;</span></div><div class="line">   <span class="tag">&lt;/<span class="name">servlet-mapping</span>&gt;</span></div><div class="line"></div><div class="line">   <span class="comment">&lt;!--编码过滤器--&gt;</span></div><div class="line">   <span class="tag">&lt;<span class="name">filter</span>&gt;</span></div><div class="line">       <span class="tag">&lt;<span class="name">filter-name</span>&gt;</span>encodingFilter<span class="tag">&lt;/<span class="name">filter-name</span>&gt;</span></div><div class="line">       <span class="tag">&lt;<span class="name">filter-class</span>&gt;</span>org.springframework.web.filter.CharacterEncodingFilter<span class="tag">&lt;/<span class="name">filter-class</span>&gt;</span></div><div class="line">       <span class="tag">&lt;<span class="name">async-supported</span>&gt;</span>true<span class="tag">&lt;/<span class="name">async-supported</span>&gt;</span></div><div class="line">       <span class="tag">&lt;<span class="name">init-param</span>&gt;</span></div><div class="line">           <span class="tag">&lt;<span class="name">param-name</span>&gt;</span>encoding<span class="tag">&lt;/<span class="name">param-name</span>&gt;</span></div><div class="line">           <span class="tag">&lt;<span class="name">param-value</span>&gt;</span>utf-8<span class="tag">&lt;/<span class="name">param-value</span>&gt;</span></div><div class="line">       <span class="tag">&lt;/<span class="name">init-param</span>&gt;</span></div><div class="line">   <span class="tag">&lt;/<span class="name">filter</span>&gt;</span></div><div class="line">   <span class="tag">&lt;<span class="name">filter-mapping</span>&gt;</span></div><div class="line">       <span class="tag">&lt;<span class="name">filter-name</span>&gt;</span>encodingFilter<span class="tag">&lt;/<span class="name">filter-name</span>&gt;</span></div><div class="line">       <span class="tag">&lt;<span class="name">url-pattern</span>&gt;</span>/*<span class="tag">&lt;/<span class="name">url-pattern</span>&gt;</span></div><div class="line">   <span class="tag">&lt;/<span class="name">filter-mapping</span>&gt;</span></div><div class="line"></div><div class="line">   <span class="tag">&lt;<span class="name">welcome-file-list</span>&gt;</span></div><div class="line">       <span class="tag">&lt;<span class="name">welcome-file</span>&gt;</span>login.jsp<span class="tag">&lt;/<span class="name">welcome-file</span>&gt;</span></div><div class="line">   <span class="tag">&lt;/<span class="name">welcome-file-list</span>&gt;</span></div><div class="line"></div><div class="line"><span class="tag">&lt;/<span class="name">web-app</span>&gt;</span></div></pre></td></tr></table></figure></p><p>配置了以上内容，项目就可以启动了。</p><hr><p>由于spring采用注解方式配置，所以在项目中使用@Service，@Controller注解标记的bean都可交给spring管理，可以使用@Autowired注解进行注入，在Controller中通过@RequestMapping注解来映射url路径。以上就是搭建一个简单的SSM工程的全部内容。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;SSM框架整合思路&quot;&gt;&lt;a href=&quot;#SSM框架整合思路&quot; class=&quot;headerlink&quot; title=&quot;SSM框架整合思路&quot;&gt;&lt;/a&gt;SSM框架整合思路&lt;/h1&gt;&lt;p&gt;不同于SSH整合，由于springMVC本身就是spring家族的一部分，所以SSM
      
    
    </summary>
    
    
      <category term="java" scheme="http://fx109138.github.io/tags/java/"/>
    
      <category term="ssm" scheme="http://fx109138.github.io/tags/ssm/"/>
    
  </entry>
  
  <entry>
    <title>SSM框架整合--工具准备</title>
    <link href="http://fx109138.github.io/2017/09/08/SSM%E6%A1%86%E6%9E%B6%E6%95%B4%E5%90%88/"/>
    <id>http://fx109138.github.io/2017/09/08/SSM框架整合/</id>
    <published>2017-09-08T07:38:11.000Z</published>
    <updated>2017-09-09T10:00:57.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="使用Intellij-IDEA开发Java应用"><a href="#使用Intellij-IDEA开发Java应用" class="headerlink" title="使用Intellij IDEA开发Java应用"></a>使用Intellij IDEA开发Java应用</h1><h2 id="Intellij-IDEA是什么"><a href="#Intellij-IDEA是什么" class="headerlink" title="Intellij IDEA是什么"></a>Intellij IDEA是什么</h2><p>首先Intellij IDEA是一款Java集成开发环境（IDE），是由JetBrains公司所创，该公司总部位于捷克共和国的首都布拉格，是一家在IDE领域十分优秀的公司，该公司还开发了WebStorm，PyCharm，PHPStorm等等多款IDE工具，囊括了很多门主流编程语言的开发，而这些软件本身都是用Java语言开发的，所以支持主流的Windows，Linux，macOS操作系统。Google推出的Android开发工具就是基于IDEA开发的，而新一代JVM语言kotlin也是由该公司所创，今年它被Google定位Android开发的官方指定语言之一。说这些就是想说，这家公司的实力是非常强的，可以在<a href="https://www.jetbrains.com/" target="_blank" rel="external">这个网站</a>看到更多他们公司的产品信息。而Intellij IDEA，是这个公司最大的最成功的一款产品，也是他们的代表产品，可以说是出身高贵了。不过可能也许是第一印象再加上统治时间长，提起JavaIDE更多人第一反应还是eclipse和myeclipse，那么看一组数据</p><p><img src="http://oux9g0njr.bkt.clouddn.com/17-9-8/28720617.jpg" alt=""></p><p>图片展示的是2016年的JavaIDE使用统计，其实这几年，Intellij IDEA一直在默默地追赶eclipse的份额，而到现在为止，它已经真的确实超过了eclipse系列，成为了使用范围最广的JavaIDE，那么我们选择idea，仅仅是因为用的人多吗，我可以明确回答不是，为什么用idea，idea的优势究竟在哪，接下来要具体说一说。</p><h2 id="为什么要使用Intellij-IDEA"><a href="#为什么要使用Intellij-IDEA" class="headerlink" title="为什么要使用Intellij IDEA"></a>为什么要使用Intellij IDEA</h2><p>IDEA分社区版和旗舰版，旗舰版是收费的，不过要知道myeclipse也是收费的，所以这点可以忽略，我们只看功能。其实官方网站上有具体的idea功能介绍，idea不只是一个JavaIDE，JetBrains的IDE采用了插件化管理的方式，Intellij IDEA作为最完整的一个项目，它里面拥有一个完整的WebStorm和DataGrip的功能，使得它可以成为一个完整的web全栈开发IDE。内部集成终端，对Git，SVN等版本控制系统，maven，gradle等构建工具的集成都非常好。</p><p>很多功能，可能也许eclipse也能实现，但是有一点，idea是一个智能化的IDE，在代码提示背后存在着复杂的分析算法，使得每次提示都能根据语境上下文智能排序，而不像其它IDE那样固定的顺序，这一点能极大提高编程效率，有了idea，可以省了很多看文档的时间，因为它真的足够智能，使用后你一定会喜欢它的。</p><h1 id="使用maven管理项目"><a href="#使用maven管理项目" class="headerlink" title="使用maven管理项目"></a>使用maven管理项目</h1><h2 id="maven是什么"><a href="#maven是什么" class="headerlink" title="maven是什么"></a>maven是什么</h2><p>maven是一种项目构建工具，是Apache基金会的一个项目，它可以管理项目结构，处理项目依赖，对于大型的项目开发来说必不可少。想想看，我们从前没有maven的时候，构建一个工程jar依赖要自己手动去找，去引入，还要跟着项目一起发布，项目冲突之类的问题都得自己解决，而且这是针对小项目，面对业务复杂的多个聚合工程，根本无从下手，而有了构建工具就不一样了。现阶段主流的构建工具有maven，gradle，ant等等，gradle是一款很优秀的工具，未来可能会大放异彩，不过现在来看，maven还是主流，下面是2016年的数据<br><img src="http://oux9g0njr.bkt.clouddn.com/17-9-8/15575140.jpg" alt=""></p><h2 id="如何使用maven"><a href="#如何使用maven" class="headerlink" title="如何使用maven"></a>如何使用maven</h2><p>使用maven首先要到<a href="http://maven.apache.org/" target="_blank" rel="external">官网</a>上下载maven，解压，配置MAVEN_HOME环境变量，把bin目录加到path下，就可以在命令行中使用maven了。下载好了还不够，我们需要配置一下maven，首先要明白它的工作原理。</p><p>maven管理的项目其实是利用项目里面的pom.xml文件配置，一个基于maven模板的项目结构是固定的，而项目依赖，打包方式，插件等等信息就写在pom.xml文件里面，项目依赖格式为</p><pre><code>&lt;dependency&gt;    &lt;groupId&gt;com.jenkov&lt;/groupId&gt;    &lt;artifactId&gt;java-web-crawler&lt;/artifactId&gt;    &lt;version&gt;1.0.0&lt;/version&gt;&lt;/dependency&gt;</code></pre><p>里面三个节点共同确定了唯一的依赖坐标，maven会自动从本地仓库里面拉取对应的jar包，如果没有，就从中央仓库下载到本地，也就是说，只要拥有了pom.xml，就拥有了所有的jar包。而由于maven中央仓库在国外，下载速度太慢，我们可以使用镜像仓库，国内比较著名的比如阿里云，配置方式是在MAVEN_HOME下面conf目录下有一个setting.xml文件，只要在里面mirrors标签内加入</p><pre><code>&lt;mirror&gt;        &lt;id&gt;alimaven&lt;/id&gt;        &lt;name&gt;aliyun maven&lt;/name&gt;        &lt;url&gt;http://maven.aliyun.com/nexus/content/groups/public/&lt;/url&gt;        &lt;mirrorOf&gt;central&lt;/mirrorOf&gt;          &lt;/mirror&gt; </code></pre><p>就可以成功把镜像替换成阿里云镜像。</p><p>配置好了maven后就可以创建maven工程了，可以使用命令行来创建，也可以在idea中配置好maven然后直接使用idea创建，对于web工程可以选择webapp模板，创建好的就是一个标准的maven工程。</p><h1 id="使用Git托管代码"><a href="#使用Git托管代码" class="headerlink" title="使用Git托管代码"></a>使用Git托管代码</h1><h2 id="Git是什么"><a href="#Git是什么" class="headerlink" title="Git是什么"></a>Git是什么</h2><p>Git是一种分布式的版本控制系统，它的作者是大名鼎鼎的Linux之父Linus Torvalds，最早开发出来是为了帮助管理Linux内核开发。它可以跟踪历史版本，可以多人合作，在代码管理中必不可少。版本管理系统其实也有很多，不过如今Git已经以压倒性优势击败了其他的版本控制系统</p><p><img src="http://oux9g0njr.bkt.clouddn.com/17-9-8/42606112.jpg" alt=""></p><p>究其根本原因，是因为Git是一个分布式的版本控制系统。集中式版本控制系统需要有一个中央仓库，所有的代码都提交到中央仓库去，这就造成一个问题，一但中央仓库出现差池，就会带来无法挽回的损失。而Git与此不同，每一个开发者都可以拿到一份完整的代码仓库，这样就不存在单点故障带来的损失。</p><h2 id="如何使用Git"><a href="#如何使用Git" class="headerlink" title="如何使用Git"></a>如何使用Git</h2><p>首先到Git的<a href="https://git-scm.com/" target="_blank" rel="external">官网</a>上面下载安装Git，然后在命令行配置两个全局的信息</p><pre><code>$ git config --global user.name &quot;Your Name&quot; $ git config --global user.email &quot;email@example.com&quot;</code></pre><p>然后就可以使用了。Git的常用命令不多</p><pre><code># 在当前目录新建一个Git代码库$ git init# 添加当前目录的所有文件到暂存区$ git add .# 提交暂存区到仓库区$ git commit -m [message]</code></pre><p>而远程仓库可以选择GitHub，首先注册账号（邮箱要使用Git全局配置的邮箱），然后创建远程代码仓库，可以复制仓库地址</p><pre><code># 增加一个新的远程仓库，并命名$ git remote add [shortname] [url]# 上传本地指定分支到远程仓库$ git push [remote] [branch]# 取回远程仓库的变化，并与本地分支合并$ git pull [remote] [branch]</code></pre><p>这些是常用的，还有分支的管理，合并等等，我们都可以使用命令行来完成，如果不喜欢，idea里面有图形化界面，操作起来也很容易。</p><hr><p>至此，开发中的工具都介绍完了，接下来要正式开始搭建SSM框架了。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;使用Intellij-IDEA开发Java应用&quot;&gt;&lt;a href=&quot;#使用Intellij-IDEA开发Java应用&quot; class=&quot;headerlink&quot; title=&quot;使用Intellij IDEA开发Java应用&quot;&gt;&lt;/a&gt;使用Intellij IDEA开发
      
    
    </summary>
    
    
      <category term="java" scheme="http://fx109138.github.io/tags/java/"/>
    
      <category term="ssm" scheme="http://fx109138.github.io/tags/ssm/"/>
    
  </entry>
  
</feed>
