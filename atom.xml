<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>隋堤倦客</title>
  
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://fx109138.github.io/"/>
  <updated>2018-01-10T14:17:29.530Z</updated>
  <id>http://fx109138.github.io/</id>
  
  <author>
    <name>隋堤倦客</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>谈一谈移动开发的几种模式</title>
    <link href="http://fx109138.github.io/2018/01/10/%E8%B0%88%E4%B8%80%E8%B0%88%E7%A7%BB%E5%8A%A8%E5%BC%80%E5%8F%91%E7%9A%84%E5%87%A0%E7%A7%8D%E6%A8%A1%E5%BC%8F/"/>
    <id>http://fx109138.github.io/2018/01/10/谈一谈移动开发的几种模式/</id>
    <published>2018-01-10T06:23:13.000Z</published>
    <updated>2018-01-10T14:17:29.530Z</updated>
    
    <content type="html"><![CDATA[<p>随着移动设备的普及和移动互联网的发展，基于移动设备的开发已经成为主流趋势。由于其屏幕较小，设备便携，同时支持很多传感器等特有功能，外加越来越快的网速，基于移动设备的应用程序开发越来越热门，各种新技术也层出不穷。在此对移动开发曾经出现过的主流的技术做一下梳理，并根据个人对其了解情况做一个简单的对比。</p><h2 id="Native-App"><a href="#Native-App" class="headerlink" title="Native App"></a>Native App</h2><p>Native App即原生应用，即最传统最普通的客户端应用，采用对应于平台的特定编程语言来编写，其中Android系统主要采用的编程语言是Java或kotlin，iOS系统主要使用的编程语言是Objective-C或swift。由于是采用操作系统的原生编程语言，这种方式编写的app可以直接和操作系统交互，运行效率高，并且可以直接调用设备。这就是最原始的移动app开发方式，如果需要适配两个不同的平台就要开发两个app，而且原生API开发效率不高，版本更新，发布等等流程都比较复杂，页面布局也不够灵活。虽然局限性很大，但是仍然是一种重要的移动开发解决方案。</p><h2 id="Web-App"><a href="#Web-App" class="headerlink" title="Web App"></a>Web App</h2><p>Web App就是网页应用，它的兴起得益于HTML5技术的发展。HTML5使得移动端的网页体验变得越来越好，由于web浏览器具有的天生的跨平台优势，开发一个适配移动端的网页就可以同时实现Android和iOS的适配，并且，前端页面布局非常灵活，无论是页面展示还是交互设计都很容易。不过这种开发模式的缺点也是很明显的：首先web页面是从网络端请求的，加载时间和效率肯定不高，同时运行在浏览器中的程序无法与操作系统直接交互，对于本地资源无法充分利用。虽然HTML5的某些新特性能够在一定程度上改善这一些列问题，但是仍然存在运行效率和操作系统交互性上的制约，因此，这种方式使用受限很多。要知道Web App的本质就是网页，所以完全使用这种方式开发的场景并不多。</p><h2 id="Hybrid-App"><a href="#Hybrid-App" class="headerlink" title="Hybrid App"></a>Hybrid App</h2><p>Hybrid App叫做混合应用，是介于native和web之间的一种解决方案，混合开发，指的就是原生开发和网页开发的混合，它结合了原生开发和网页开发的优势，是一种权衡开发效率和运行效率的一种解决方案。最简单的混合开发就是在原生app中使用webview组件展示网页，在网页中呈现想要的内容。这种模式开发的应用特点是平衡了性能和效率，同时结合了web的布局优势和native的底层优势，是现代很多大型app的首选模式。缺点就是学习成本高，对开发者的综合素质有一定要求。而特别的，混合开发还有几个不同的层次。</p><h3 id="原生框架-webview"><a href="#原生框架-webview" class="headerlink" title="原生框架+webview"></a>原生框架+webview</h3><p>这是最简单的混合开发，采用原生组件构建软件框架，里面放置webview，在webview里面显示网页内容，这种方式性能瓶颈主要在于网页部分和原生组件的渲染速度差异。同时最好还要理解webview配置，要求开发者对移动端开发和web前端都比较熟悉。另一方面，webview中的内容与操作系统的底层交互不便，有些资源的调用可能必须使用原生组件，受限还是比较多的。</p><h3 id="PhoneGap、cordova、mui等"><a href="#PhoneGap、cordova、mui等" class="headerlink" title="PhoneGap、cordova、mui等"></a>PhoneGap、cordova、mui等</h3><p>这类东西是一套成型的解决方案，提供了部分开放的与底层交互的api，使得开发者能够更容易的通过前端技术构建移动应用。可以理解为它是对网页更深层次的打包，增强了网页与底层系统的结合性，更好的屏蔽了原生组件的差异性。而最大的问题就是需要学习其内部的特定api，不具有通用性。这种方式的性能比简单的webview好一些，不过总体来看还是比较一般，在要求性能的场景下可能不太合适。</p><h3 id="React-Native和weex"><a href="#React-Native和weex" class="headerlink" title="React Native和weex"></a>React Native和weex</h3><p>React Native是Facebook公司推出的以前端框架React.js为基础的一项技术，它不同于传统的webview，而是提供了一种可以直接通过js来调用原生组件的开发环境。类似的，weex是阿里推出的以前端框架vue.js为基础的一套类似的技术。使用这种方式构建的app一方面减少了通过webview交互带来的复杂性和低能性，同时保留了js开发的灵活性。由于需要采用特定的技术，这种方式也需要有一定的相关技术学习成本，性能较好但不如原生应用。</p><p>以上是移动端应用开发的几种常见的技术选择，要做好移动开发，要有原生移动开发基础和较强的移动开发能力或前端开发能力，现代的移动开发大多数以混合开发为主，对开发者综合能力要求较高。在实际的开发中，具体的技术选择主要还是取决于业务需求，综合考量各种技术的优缺点，没有最好的技术，只有最合适的技术。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;随着移动设备的普及和移动互联网的发展，基于移动设备的开发已经成为主流趋势。由于其屏幕较小，设备便携，同时支持很多传感器等特有功能，外加越来越快的网速，基于移动设备的应用程序开发越来越热门，各种新技术也层出不穷。在此对移动开发曾经出现过的主流的技术做一下梳理，并根据个人对其了
      
    
    </summary>
    
    
      <category term="移动开发" scheme="http://fx109138.github.io/tags/%E7%A7%BB%E5%8A%A8%E5%BC%80%E5%8F%91/"/>
    
  </entry>
  
  <entry>
    <title>我的React之路--初识</title>
    <link href="http://fx109138.github.io/2018/01/07/%E6%88%91%E7%9A%84React%E4%B9%8B%E8%B7%AF/"/>
    <id>http://fx109138.github.io/2018/01/07/我的React之路/</id>
    <published>2018-01-06T17:19:11.000Z</published>
    <updated>2018-01-11T16:09:23.107Z</updated>
    
    <content type="html"><![CDATA[<h2 id="现代化前端"><a href="#现代化前端" class="headerlink" title="现代化前端"></a>现代化前端</h2><p>React.js是现代化前端三大主流框架之一。什么是现代化前端？随着node.js出现，前端工程化产生，前端开发者的工作已经早已不再是简单的画页面填数据了，曾经只会jQuery就可以完成工作的时代已经结束了。h5的出现，ajax的广泛应用，大前端时代的概念越来越清晰，web前端开发者承担的任务越来越多，移动端，桌面端，服务端的开发也受到了很多颠覆性的变革。这种变化，个人认为是一种机遇，采用工程化模式构建原本散乱无规范的前端本身就是一件好事，而拥抱这种变化，就要学习现代化前端开发的新技术。</p><h2 id="为什么选择React"><a href="#为什么选择React" class="headerlink" title="为什么选择React"></a>为什么选择React</h2><p>现代化前端的三大主流框架是angular，vue，react，对于前端开发者来说，下面这张图片很亲切</p><p><img src="http://oux9g0njr.bkt.clouddn.com/18-1-11/46701657.jpg" alt=""></p><p>angular是Google推出的从angular2开始采用typescript构建，并且引入大量新的概念，通常把一代称为angular.js，angular特指2以上版本，可以理解为是一个全新的框架，位列三大框架之一的也是angular。vue是国人尤雨溪个人开发的，是一个比较难得的非常受欢迎的个人项目，也是在国际上影响力最大的国人开发的项目，是一个非常好的框架。react是facebook公司推出的，是目前三大框架中全球用户量最多，最活跃的前端框架。</p><p>前端技术的特点就是多，而且社区特别活跃，变化特别快，所以一方面个人肯定不能贪多，另一方面还要能够及时拥抱变化。三大框架angular特点学习门槛高，对后端开发者友好，vue特点渐进式，新手友好，react本身很小，系统庞大，而且思想独特。框架的好坏和难易没有必然联系，也不是复杂的就一定是最好的。就我而言，angular我不了解，作为熟悉后端开发的我也许会喜欢上它，不过我没学过。vue是我最早接触的前端框架了，对于新手来说真的容易上手，开始完全可以像引入jquery一样直接引入单个文件来使用，而且它完美的融合了其他框架的优点，写起来特别优雅，而随着项目逐渐复杂，又可以使用工程化方式构建。react与vue完全相反，一上来就要先接触构建工具，学习jsx，初学者很容易就放弃了。</p><p>我从前开发一直使用的都是vue.js，用的时间也不长，现在也在用vue写一个项目，了解了一些前端工程化的东西，vue相关内容也使用过，算是掌握基本使用吧。而对于react，从前了解的并不多，了解到它是完全基于js来构建前端，当时觉得这个东西可能更适合我，于是今年，2018年第一个小目标就是学会使用react了。</p><p>react和vue都是采用虚拟DOM，数据更新会实时响应到视图上，两者很多东西也都很相似。而不同之处，也就是最吸引我的地方，就是react颠覆了一种思想。过去的前端，都是html为主，css和js全都写在html中。而在react中，一切都是js，html是通过js对象来构建的的，只是为了易读性引入了jsx语法糖，css也完全是js对象。此外，由于react完全基于工程化前端来构建，在react中可以享受最新的es语法等等工程化带来的好处。很多人不会喜欢react也大抵是因为此，仅仅是为了构建页面js是否有必要有那么高要求，我觉得这也体现了不同人思维方式的不同。就我而言，服务端编程出身，一直在和数据和逻辑打交道，页面展示布局一直都不是强项，也不够敏感。react能够把逻辑程序设计的体验带到页面设计上，大概是它最大的魅力吧。</p><h2 id="react系列的认识"><a href="#react系列的认识" class="headerlink" title="react系列的认识"></a>react系列的认识</h2><p>无论是react.js还是vue.js本身都是只是一个视图层解决方案，要想构建一个完整的前端工程这只是其中一部分。曾经使用vue.js时候,使用过vue+vue-router+vuex+axios的组合，而对于react也是需要有这么一套完整的集合的。而且选择也不唯一，按照目前来看，至少要学习redux，react-router，后面还会有很多，随着学习会进一步总结经验。特别的，学习react当然少不了react native，这是一个移动端的开发框架。这样算起来，要学习的东西其实很多，这篇是开始的一篇，只是谈一谈简单地认识，后面学习的过程中会有经验记录，如果可以后面还会有react和vue的对比。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;现代化前端&quot;&gt;&lt;a href=&quot;#现代化前端&quot; class=&quot;headerlink&quot; title=&quot;现代化前端&quot;&gt;&lt;/a&gt;现代化前端&lt;/h2&gt;&lt;p&gt;React.js是现代化前端三大主流框架之一。什么是现代化前端？随着node.js出现，前端工程化产生，前端开发者的
      
    
    </summary>
    
    
      <category term="前端开发" scheme="http://fx109138.github.io/tags/%E5%89%8D%E7%AB%AF%E5%BC%80%E5%8F%91/"/>
    
      <category term="React" scheme="http://fx109138.github.io/tags/React/"/>
    
  </entry>
  
  <entry>
    <title>当输入网址之后...</title>
    <link href="http://fx109138.github.io/2017/11/25/%E5%BD%93%E8%BE%93%E5%85%A5%E7%BD%91%E5%9D%80%E4%B9%8B%E5%90%8E/"/>
    <id>http://fx109138.github.io/2017/11/25/当输入网址之后/</id>
    <published>2017-11-25T04:57:01.000Z</published>
    <updated>2017-11-25T06:20:40.419Z</updated>
    
    <content type="html"><![CDATA[<p>在互联网时代，用户打开计算机第一件事大概就是打开浏览器，输入网址，按下回车就会看到想要的内容。而这个过程，在开发者眼中却远没有那么简单，在浏览器背后的工作很多，也可以分得很详细，在此只是说一下一时间能想到的，尽量详尽，如果有不完整的地方后面还会补充。</p><h3 id="发生在网络前面的事"><a href="#发生在网络前面的事" class="headerlink" title="发生在网络前面的事"></a>发生在网络前面的事</h3><p>首先，用户想输入内容按下回车，直接需要交互的就是键盘鼠标显示器等等，这些东西称之为I/O设备。I/O就是input和output，这类设备负责处理用户和计算机之间的输入输出的交互，其中键盘鼠标是输入设备，显示器是输出设备。</p><p>然后，接下来的调度就要由操作系统来进行了，常见的操作系统有很多，Windows、macOS、Linux等等，操作系统负责管理硬件，为程序运行提供环境，而我们的浏览器就是运行在操作系统上的一个进程。</p><p>接下来就到浏览器了，浏览器是大家非常熟悉的一个软件，到了这里，就要开始和网络交互了。</p><h3 id="网络请求与相应"><a href="#网络请求与相应" class="headerlink" title="网络请求与相应"></a>网络请求与相应</h3><p>网络请求实际上是浏览器和服务器之间的交互，一个简单的模型就是浏览器作为客户端向服务器发送请求，服务器处理请求并给浏览器响应。而想要发送请求的第一步就是要找到服务器在哪。</p><p>在互联网的世界里，每一台接入公网的主机都会拥有一个独一无二的地址，这个地址叫做IP地址，服务器也不例外，要知道服务器不过就是一台运行了特定程序的主机而已，与PC并没有本质的区别。不过我们大多数时候并不会直接向浏览器中输入IP地址，因为IP地址不容易记忆。拿百度为例<code>61.135.169.121</code>很明显没有<code>www.baidu.com</code>直观。所以我们通常输入的其实都是域名，此时就需要一种机制来把域名解释成对应的IP地址，这就是DNS。DNS是一个基于UDP的网络协议，用于服务器IP地址的解析，DNS服务由DNS服务器提供，默认端口是UDP的53。一个计算机的DNS服务器配置在操作系统中，也是计算机上网必须配置的一项。有了DNS，当我们请求网络时候，浏览器会先把域名发送给系统默认DNS服务器，如果该服务器本地有缓存，且缓存未过期，则直接返回结果，否则向上一级DNS服务器查询，直到DNS根服务器，找到了就会返回目标IP地址，找不到就会提示错误。浏览器就可以向目标发送请求了。</p><p>发送网络请求，首先要建立连接，客户端和服务端在底层建立的是socket连接，而可靠传输协议需要建立TCP连接，此时需要进行三次握手，三次握手机制保证了消息传递的相对可靠性，之后就可以在上层建立高级的传输协议了，在此只讨论浏览网页的http和tttps协议。</p><p>http（超文本传输协议）和https区别就在于https多了一层安全协议SSL（Secure Sockets Layer，安全套接层），所以https理论上比http安全。http主要包括请求和响应两部分，现在客户端的就是请求，浏览器会自动为我们生成请求消息，请求消息分如下三部分：</p><ul><li>请求行：请求的方法（POST/GET/…）、URL、HTTP版本（1.1/2）；</li><li>消息头：请求的附加信息，以空行结束；</li><li>消息体：数据，比如 POST 请求时的表单数据。</li></ul><p>连接一旦建成就可以发送消息了，客户端把请求发给了服务器，接下来就是服务器端程序的工作了。</p><p>服务端的任务就是处理请求，给出相应的处理结果。这部分处理包括解析请求内容、查询数据库、处理数据格式、运算等等，最终要给用户返回结果，有可能是完整的html页面，也有可能只是json数据，这取决于该网站的开发方式。之后就要把结果反馈给浏览器了，同样的要生成响应消息：</p><ul><li>状态行：HTTP版本、状态码（200/304/404/…）、解释状态的响应短语；</li><li>消息头</li><li>消息体：返回的数据。</li></ul><p>传送结束连接就会断开，http是无状态的协议。此时浏览器就会拿到响应消息开始展示了。</p><p>浏览器中展示的最终内容是html（超文本标记语言），内容来自于服务端，有可能是完整的一页内容，也可能是空页面加数据两部分，然后在浏览器里面渲染成页面，不管怎么说，此时用户就可以看到想要的页面了。</p><p>说的好像不太清楚，后面还会补充。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;在互联网时代，用户打开计算机第一件事大概就是打开浏览器，输入网址，按下回车就会看到想要的内容。而这个过程，在开发者眼中却远没有那么简单，在浏览器背后的工作很多，也可以分得很详细，在此只是说一下一时间能想到的，尽量详尽，如果有不完整的地方后面还会补充。&lt;/p&gt;
&lt;h3 id=
      
    
    </summary>
    
    
      <category term="-- 网络" scheme="http://fx109138.github.io/tags/%E7%BD%91%E7%BB%9C/"/>
    
  </entry>
  
  <entry>
    <title>css中的浮动和BFC</title>
    <link href="http://fx109138.github.io/2017/11/15/css%E4%B8%AD%E7%9A%84%E6%B5%AE%E5%8A%A8%E5%92%8CBFC/"/>
    <id>http://fx109138.github.io/2017/11/15/css中的浮动和BFC/</id>
    <published>2017-11-15T12:00:25.000Z</published>
    <updated>2017-11-15T15:35:47.018Z</updated>
    
    <content type="html"><![CDATA[<p>写了两篇，发现自己给自己挖了好多坑，现在得一点点慢慢填了。这次还是继续写一篇css的内容，来看一下浮动和BFC这两个概念。</p><h3 id="浮动float"><a href="#浮动float" class="headerlink" title="浮动float"></a>浮动float</h3><blockquote><p>float 属性定义元素在哪个方向浮动。以往这个属性总应用于图像，使文本围绕在图像周围，不过在 CSS 中，任何元素都可以浮动。浮动元素会生成一个块级框，而不论它本身是何种元素。</p><p>如果浮动非替换元素，则要指定一个明确的宽度；否则，它们会尽可能地窄。</p><p>假如在一行之上只有极少的空间可供浮动元素，那么这个元素会跳至下一行，这个过程会持续到某一行拥有足够的空间为止。</p></blockquote><p>这些东西都是最基本的定义，写过css的人都应该知道，不过浮动会产生很多副作用，甚至产生很多难以解释的结果，弄清楚这些问题，才是深入理解浮动属性的关键。</p><h4 id="float的产生"><a href="#float的产生" class="headerlink" title="float的产生"></a>float的产生</h4><p>首先应该知道float属性最初被设计出来的目的。float属性最早被设计出来是在很久以前，网页技术还不发达的时代，当时的页面远没有现在复杂，设计出float仅仅是为了实现图文混排，文字能像流水一样环绕在文字周围。</p><p>为了实现文字环绕效果，float做了几件事，首先是使块状元素产生类似行内元素的包裹特性–如果不设置宽度，元素会仅包裹内容而不是占一整行。 另一件重要的事就是高度塌陷，一旦元素被设置成为了float，元素的父元素就会认为它的高度是0，也就是说float会使父元素塌陷。</p><p>而随着互联网的发展，网站页面越来越复杂，float被拿来实现其它的显示效果，然而由于float的独有特性，float元素是脱离文档流的。通常，只要页面中有float元素，就会存在着潜在的危险。</p><h4 id="清除浮动"><a href="#清除浮动" class="headerlink" title="清除浮动"></a>清除浮动</h4><p>浮动有很多副作用，如何清除浮动就是一个比较有价值的问题了。清除浮动的方式有很多，根据其原理分两类场景：</p><ul><li>使用clear属性清除浮动</li></ul><blockquote><p>clear 属性规定元素的哪一侧不允许其他浮动元素。</p><p>clear 属性定义了元素的哪边上不允许出现浮动元素。在 CSS1 和 CSS2 中，这是通过自动为清除元素（即设置了 clear 属性的元素）增加上外边距实现的。在 CSS2.1 中，会在元素上外边距之上增加清除空间，而外边距本身并不改变。不论哪一种改变，最终结果都一样，如果声明为左边或右边清除，会使元素的上外边框边界刚好在该边上浮动元素的下外边距边界之下。</p></blockquote><p>clear属性能够清除元素，不过要注意，clear属性作用在浮动元素上面是无效的，原理很简单，因为float元素是脱离文档流的。可以采用在后面加空的<code>div</code>标签，在空标签上使用<code>clear:both;</code>，不过这并不是最佳方案，因为浪费了一个标签。更好的方式是使用伪类选择器<code>:after</code>，为其添加属性<code>{display:block; content:&#39;clear&#39;; clear:both; height:0; visibility:hidden;}</code><br>即可实现，如果要兼容不支持伪类的IE6/7，可以设置<code>{zoom:1;}</code>属性（zoom属性通过触发ie的 haslayout属性来实现清除浮动，由于旧版本IE几乎淡出市场，所以不做过多讨论）。</p><ul><li>使用BFC清除浮动<br>用父元素创建BFC即可实现清除浮动的效果，IE6/7同样不支持BFC，解决方案还是zoom属性，在此不做多谈。下面就来详细探讨一下BFC的问题。</li></ul><h3 id="块级格式化上下文BFC"><a href="#块级格式化上下文BFC" class="headerlink" title="块级格式化上下文BFC"></a>块级格式化上下文BFC</h3><p>BFC全称是块级格式化上下文，它是指一个独立的块级渲染区域，BFC有几个很重要的特性：</p><ol><li>内部的BOX会在垂直方向上一个接一个的放置；</li><li>垂直方向上的距离由margin决定。（完整的说法是：属于同一个BFC的俩个相邻的BOX的margin会发生重叠，与方向无关。）</li><li>每个元素的左外边距与包含块的左边界相接触（从左到右），即使浮动元素也是如此。（这说明BFC中的子元素不会超出它的包含块，而position为absolute的元素可以超出它的包含块边界）；</li><li>BFC的区域不会与float的元素区域重叠；</li><li>计算BFC的高度时，浮动子元素也参与计算；</li><li>BFC就是页面上的一个隔离的独立容器，容器里面的子元素不会影响到外面的元素，反之亦然；</li></ol><p>这几点特性非常重要，在此也说一下margin重叠现象</p><h5 id="margin重叠"><a href="#margin重叠" class="headerlink" title="margin重叠"></a>margin重叠</h5><p>margin重叠的几种情况</p><ol><li>当一个元素出现在另一个元素上面时，第一个元素的下外边距与第二个元素的上外边距会发生合并。</li><li>当一个元素包含在另一个元素中时（假设没有内边距或边框把外边距分隔开），第一个子元素的上边距会和父元素的上边距合并；最后一个子元素的下边距会和父元素的下边距合并。</li><li>假设有一个空元素，它有外边距，但是没有边框或填充。在这种情况下，上外边距与下外边距就碰到了一起，它们会发生合并。如果这个外边距遇到另一个元素的外边距，它还会发生合并。</li></ol><p>重叠的计算方式：</p><ol><li>当两个margin都是正值的时候，取两者的最大值；</li><li>当margin都是负值的时候，取的是其中绝对值较大的，然后，从 0 位置，负向位移；</li><li>当有正有负的时候，先取出负 margin 中绝对值中最大的，然后，和正 margin 值中最大的 margin 相加。</li></ol><p>了解上面的BFC特性，我们可以很容易理解，通过创建一个新的的BFC可以消除margin重叠。</p><p>BFC另一个用途是清除浮动，我们上面已经提到了。</p><p>最后关键的问题是如何创建一个BFC，其实很简单，在css中，以下声明都可以创建BFC：</p><ul><li>根元素</li><li>float的值不为none；</li><li>overflow的值不为visible；</li><li>display的值为inline-block、table-cell、table-caption（table会默认生成一个匿名的table-cell也可以生成BFC）；</li><li>position的值为absolute或fixed；</li></ul><p>以上就是关于浮动和BFC的内容，总体来说，其实这些知识点属于比较保守的，倾向于向下兼容的内容，当然知识原理还是要懂的，而且这部分很重要。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;写了两篇，发现自己给自己挖了好多坑，现在得一点点慢慢填了。这次还是继续写一篇css的内容，来看一下浮动和BFC这两个概念。&lt;/p&gt;
&lt;h3 id=&quot;浮动float&quot;&gt;&lt;a href=&quot;#浮动float&quot; class=&quot;headerlink&quot; title=&quot;浮动float&quot;&gt;
      
    
    </summary>
    
    
      <category term="css" scheme="http://fx109138.github.io/tags/css/"/>
    
  </entry>
  
  <entry>
    <title>css两边固定中间自适应布局</title>
    <link href="http://fx109138.github.io/2017/11/15/css%E4%B8%A4%E8%BE%B9%E5%9B%BA%E5%AE%9A%E4%B8%AD%E9%97%B4%E8%87%AA%E9%80%82%E5%BA%94%E5%B8%83%E5%B1%80/"/>
    <id>http://fx109138.github.io/2017/11/15/css两边固定中间自适应布局/</id>
    <published>2017-11-15T05:00:21.000Z</published>
    <updated>2017-11-15T11:44:31.482Z</updated>
    
    <content type="html"><![CDATA[<p>三栏布局是一种常见的网页布局方案，最常见的需求就是两边固定，中间自适应效果，而这种布局有很多种不同的实现方案，在不同的需求和兼容性要求下适用性各不相同，下面来看一下常见的几种实现方式和它们的特点。</p><h3 id="普通浮动布局"><a href="#普通浮动布局" class="headerlink" title="普通浮动布局"></a>普通浮动布局</h3><p>流体布局非常简单，就是利用元素浮动的特性来实现布局，实现起来其实并不难</p><figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="undefined"></span></div><div class="line"><span class="undefined">       .container&gt;div&#123;</span></div><div class="line"><span class="undefined">           height: 200px;</span></div><div class="line"><span class="undefined">       &#125;</span></div><div class="line"><span class="undefined">       .left &#123;</span></div><div class="line"><span class="undefined">           float: left;</span></div><div class="line"><span class="undefined">           width: 300px;</span></div><div class="line"><span class="undefined">           background: red;</span></div><div class="line"><span class="undefined">       &#125;</span></div><div class="line"><span class="undefined"></span></div><div class="line"><span class="undefined">       .right &#123;</span></div><div class="line"><span class="undefined">           float: right;</span></div><div class="line"><span class="undefined">           width: 300px;</span></div><div class="line"><span class="undefined">           background: blue;</span></div><div class="line"><span class="undefined">       &#125;</span></div><div class="line"><span class="undefined"></span></div><div class="line"><span class="undefined">       .center &#123;</span></div><div class="line"><span class="undefined">       overflow: hidden;</span></div><div class="line"><span class="undefined">           background: yellow;</span></div><div class="line"><span class="undefined">       &#125;</span></div><div class="line"><span class="undefined">   </span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></div><div class="line">   <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"container"</span>&gt;</span></div><div class="line">       <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"left"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line">       <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"right"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line">       <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"center"</span>&gt;</span></div><div class="line">           <span class="tag">&lt;<span class="name">h1</span>&gt;</span>浮动布局<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></div><div class="line">       <span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line">   <span class="tag">&lt;/<span class="name">div</span>&gt;</span></div></pre></td></tr></table></figure><p><img src="http://oux9g0njr.bkt.clouddn.com/17-11-15/93210352.jpg" alt=""><br>这种布局主要是控制元素浮动来实现的，要注意的一点就是中间元素要创建BFC（关于BFC的相关内容后面文章会分析）,否则一旦高度变化就会无法正常工作。这种布局的特点就是浮动对旧浏览器兼容性好，缺点就是主体内容需要放到最后加载，当页面元素较多时候可能会影响体验，于是有了下面两种非常经典的改进方案。</p><h3 id="圣杯布局"><a href="#圣杯布局" class="headerlink" title="圣杯布局"></a>圣杯布局</h3><p>圣杯布局并不是因为长得像杯子，在西方，圣杯是表达“渴求之物”的意思，题外话，下面回来看它的实现。首先我们的目的是要实现中间部分先加载，所以html结构大体上是确定的，接下来一步一步来看圣杯布局的形成。</p><figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"container"</span>&gt;</span></div><div class="line">       <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"center"</span>&gt;</span></div><div class="line">           <span class="tag">&lt;<span class="name">h1</span>&gt;</span>圣杯布局<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></div><div class="line">       <span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line">       <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"left"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line">       <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"right"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line">   <span class="tag">&lt;/<span class="name">div</span>&gt;</span></div></pre></td></tr></table></figure><p>1.给元素添加左浮动效果，代码和效果如下</p><figure class="highlight css"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div></pre></td><td class="code"><pre><div class="line"><span class="selector-class">.container</span>&gt;<span class="selector-tag">div</span> &#123;</div><div class="line">          <span class="attribute">height</span>: <span class="number">200px</span>;</div><div class="line">      &#125;</div><div class="line"></div><div class="line">      <span class="selector-class">.center</span> &#123;</div><div class="line">          <span class="attribute">float</span>: left;</div><div class="line">          <span class="attribute">width</span>: <span class="number">100%</span>;</div><div class="line">          <span class="attribute">background</span>: yellow;</div><div class="line">      &#125;</div><div class="line"></div><div class="line">      <span class="selector-class">.left</span> &#123;</div><div class="line">          <span class="attribute">float</span>: left;</div><div class="line">          <span class="attribute">width</span>: <span class="number">300px</span>;</div><div class="line">          <span class="attribute">background</span>: red;</div><div class="line">      &#125;</div><div class="line"></div><div class="line">      <span class="selector-class">.right</span> &#123;</div><div class="line">          <span class="attribute">float</span>: left;</div><div class="line">          <span class="attribute">width</span>: <span class="number">300px</span>;</div><div class="line">          <span class="attribute">background</span>: blue;</div><div class="line">      &#125;</div></pre></td></tr></table></figure><p><img src="http://oux9g0njr.bkt.clouddn.com/17-11-15/51179225.jpg" alt=""><br>此时肯定是不符合预期的，所以要进行下一步调整。</p><p>2.这一步是重点，为左右元素设置-margin值，其中需要设置左边元素左边距为负的中间盒子的宽度，也就是<code>.left {margin-left:-100%;}</code>，需要设置右边元素左边距为负的自己的宽度，也就是<code>.right {margin-left：-300px;}</code>，此时效果如图<br><img src="http://oux9g0njr.bkt.clouddn.com/17-11-15/5818615.jpg" alt=""><br>看上去似乎实现了，不过中间元素此时是被压在下面的，所以还需要进一步处理。</p><p>3.要想把左右元素放在中间元素两边，就需要让两边有边距，所以首先要给父元素加一个内边距，即添加<code>.container {padding: 0 300px;}</code>显示效果如下。此时两边已经产生边距，不过两边元素还是在上中间元素面显示。<br><img src="http://oux9g0njr.bkt.clouddn.com/17-11-15/45633810.jpg" alt=""></p><p>4.最后一步，给两边的元素加相对定位，然后把它们定位到两边空位处，即可实现最终效果，最终全部代码和显示效果如下</p><figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="undefined"></span></div><div class="line"><span class="css">       <span class="selector-class">.container</span> &#123;</span></div><div class="line"><span class="undefined">           padding: 0 300px;</span></div><div class="line"><span class="undefined">       &#125;</span></div><div class="line"><span class="undefined"></span></div><div class="line"><span class="css">       <span class="selector-class">.container</span>&gt;<span class="selector-tag">div</span> &#123;</span></div><div class="line"><span class="undefined">           height: 200px;</span></div><div class="line"><span class="undefined">       &#125;</span></div><div class="line"><span class="undefined"></span></div><div class="line"><span class="css">       <span class="selector-class">.center</span> &#123;</span></div><div class="line"><span class="undefined">           float: left;</span></div><div class="line"><span class="undefined">           width: 100%;</span></div><div class="line"><span class="undefined">           background: yellow;</span></div><div class="line"><span class="undefined">       &#125;</span></div><div class="line"><span class="undefined"></span></div><div class="line"><span class="css">       <span class="selector-class">.left</span> &#123;</span></div><div class="line"><span class="undefined">           float: left;</span></div><div class="line"><span class="undefined">           width: 300px;</span></div><div class="line"><span class="undefined">           background: red;</span></div><div class="line"><span class="undefined">           margin-left: -100%;</span></div><div class="line"><span class="undefined">           position: relative;</span></div><div class="line"><span class="undefined">           left: -300px;</span></div><div class="line"><span class="undefined">       &#125;</span></div><div class="line"><span class="undefined"></span></div><div class="line"><span class="css">       <span class="selector-class">.right</span> &#123;</span></div><div class="line"><span class="undefined">           float: left;</span></div><div class="line"><span class="undefined">           width: 300px;</span></div><div class="line"><span class="undefined">           background: blue;</span></div><div class="line"><span class="undefined">           margin-left: -300px;</span></div><div class="line"><span class="undefined">           position: relative;</span></div><div class="line"><span class="undefined">           right: -300px;</span></div><div class="line"><span class="undefined">       &#125;</span></div><div class="line"><span class="undefined">   </span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></div><div class="line"></div><div class="line">   <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"container"</span>&gt;</span></div><div class="line">       <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"center"</span>&gt;</span></div><div class="line">           <span class="tag">&lt;<span class="name">h1</span>&gt;</span>圣杯布局<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></div><div class="line">       <span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line">       <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"left"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line">       <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"right"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line">   <span class="tag">&lt;/<span class="name">div</span>&gt;</span></div></pre></td></tr></table></figure><p><img src="http://oux9g0njr.bkt.clouddn.com/17-11-15/43719059.jpg" alt=""><br>这样就实现了圣杯布局，圣杯布局保持了与普通浮动布局同样的兼容性，最大的优点是可以实现中间部分优先加载，缺点就是处理复杂，而且当中间元素小于两侧元素时候会出现变形，响应效果相对差一点。</p><h3 id="双飞翼布局"><a href="#双飞翼布局" class="headerlink" title="双飞翼布局"></a>双飞翼布局</h3><p>除了圣杯布局，还有另一种和它原理类似的解决方案，同样可以处理浮动布局的加载问题，这种实现方案来自淘宝的UED，叫做双飞翼布局。</p><p>双飞翼布局的html结构和圣杯布局有一点小差别，就是中间元素外面多了一层容器，代码如下</p><figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"container"</span>&gt;</span></div><div class="line">       <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"center-container"</span>&gt;</span></div><div class="line">           <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"center"</span>&gt;</span></div><div class="line">               <span class="tag">&lt;<span class="name">h1</span>&gt;</span>双飞翼布局<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></div><div class="line">           <span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line">       <span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line">       <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"left"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line">       <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"right"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line">   <span class="tag">&lt;/<span class="name">div</span>&gt;</span></div></pre></td></tr></table></figure><p>前两步的样式设置和和圣杯布局是相同的，元素左浮动，两侧-margin，最终产生了和上面相同的元素被遮盖的情况。<br><img src="http://oux9g0njr.bkt.clouddn.com/17-11-15/5468715.jpg" alt=""><br>接下来，也是双飞翼布局的特点所在，由于实际中间元素是放在一个容器里面的，我们可以给内部元素设置外边距，这样就可以让出两边的位置，两边元素也无需重定位即可完成布局，完整代码和显示效果如下</p><figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="undefined"></span></div><div class="line"><span class="css">       <span class="selector-class">.container</span> <span class="selector-tag">div</span> &#123;</span></div><div class="line"><span class="undefined">           height: 200px;</span></div><div class="line"><span class="undefined">       &#125;</span></div><div class="line"><span class="undefined"></span></div><div class="line"><span class="css">       <span class="selector-class">.center-container</span> &#123;</span></div><div class="line"><span class="undefined">           float: left;</span></div><div class="line"><span class="undefined">           width: 100%;</span></div><div class="line"><span class="undefined">           height: 100px;</span></div><div class="line"><span class="undefined">           background: yellow;</span></div><div class="line"><span class="undefined">       &#125;</span></div><div class="line"><span class="undefined"></span></div><div class="line"><span class="css">       <span class="selector-class">.center</span> &#123;</span></div><div class="line"><span class="undefined">           margin: 0 300px;</span></div><div class="line"><span class="undefined">       &#125;</span></div><div class="line"><span class="undefined"></span></div><div class="line"><span class="css">       <span class="selector-class">.left</span> &#123;</span></div><div class="line"><span class="undefined">           background: red;</span></div><div class="line"><span class="undefined">           float: left;</span></div><div class="line"><span class="undefined">           width: 300px;</span></div><div class="line"><span class="undefined">           margin-left: -100%;</span></div><div class="line"><span class="undefined">       &#125;</span></div><div class="line"><span class="undefined"></span></div><div class="line"><span class="css">       <span class="selector-class">.right</span> &#123;</span></div><div class="line"><span class="undefined">           background: blue;</span></div><div class="line"><span class="undefined">           float: left;</span></div><div class="line"><span class="undefined">           width: 300px;</span></div><div class="line"><span class="undefined">           margin-left: -300px;</span></div><div class="line"><span class="undefined">       &#125;</span></div><div class="line"><span class="undefined">   </span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></div><div class="line"></div><div class="line">   <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"container"</span>&gt;</span></div><div class="line">       <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"center-container"</span>&gt;</span></div><div class="line">           <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"center"</span>&gt;</span></div><div class="line">               <span class="tag">&lt;<span class="name">h1</span>&gt;</span>双飞翼布局<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></div><div class="line">           <span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line">       <span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line">       <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"left"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line">       <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"right"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line">   <span class="tag">&lt;/<span class="name">div</span>&gt;</span></div></pre></td></tr></table></figure><p><img src="http://oux9g0njr.bkt.clouddn.com/17-11-15/88423741.jpg" alt=""></p><p>双飞翼布局相比圣杯布局更简洁，多使用了一个<code>div</code>，不过简洁性和响应能力上要比圣杯布局好。</p><p>圣杯布局和双飞翼布局都是在浮动布局时代的比较经典的布局方式，对旧的浏览器有很好的兼容性。不过事实上，现代浏览器已经大量普及，需要适配旧浏览器的场景已经开始变少，加上移动端开发越来越盛行，于是有了比较新的布局方式。</p><h3 id="flex布局"><a href="#flex布局" class="headerlink" title="flex布局"></a>flex布局</h3><p>flex是css3提供的一种新的布局方式，这种布局的产生就是为了实现自适应布局，它是随着移动互联网时代产生而引进的，我们来看一下使用flex来实现三栏布局的代码</p><figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="undefined"></span></div><div class="line"><span class="css">       <span class="selector-class">.container</span> &#123;</span></div><div class="line"><span class="undefined">           display: flex;</span></div><div class="line"><span class="undefined">       &#125;</span></div><div class="line"><span class="undefined"></span></div><div class="line"><span class="css">       <span class="selector-class">.container</span>&gt;<span class="selector-tag">div</span> &#123;</span></div><div class="line"><span class="undefined">           height: 200px;</span></div><div class="line"><span class="undefined">       &#125;</span></div><div class="line"><span class="undefined"></span></div><div class="line"><span class="css">       <span class="selector-class">.left</span> &#123;</span></div><div class="line"><span class="undefined">           width: 300px;</span></div><div class="line"><span class="undefined">           background: red;</span></div><div class="line"><span class="undefined">       &#125;</span></div><div class="line"><span class="undefined"></span></div><div class="line"><span class="css">       <span class="selector-class">.center</span> &#123;</span></div><div class="line"><span class="undefined">           flex: 1;</span></div><div class="line"><span class="undefined">           background: yellow;</span></div><div class="line"><span class="undefined">       &#125;</span></div><div class="line"><span class="undefined"></span></div><div class="line"><span class="css">       <span class="selector-class">.right</span> &#123;</span></div><div class="line"><span class="undefined">           width: 300px;</span></div><div class="line"><span class="undefined">           background: blue;</span></div><div class="line"><span class="undefined">       &#125;</span></div><div class="line"><span class="undefined">   </span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></div><div class="line">   <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"container"</span>&gt;</span></div><div class="line">       <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"left"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line">       <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"center"</span>&gt;</span></div><div class="line">           <span class="tag">&lt;<span class="name">h1</span>&gt;</span>flexbox<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></div><div class="line">       <span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line">       <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"right"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line">   <span class="tag">&lt;/<span class="name">div</span>&gt;</span></div></pre></td></tr></table></figure><p><img src="http://oux9g0njr.bkt.clouddn.com/17-11-15/70936639.jpg" alt=""><br>就是这样简单，把外层容器显示属性设置成flex，里面只要自适应部分flex设置为1，就可以实现自适应效果了。使用flex布局的代码特别简洁，也是实现自适应布局的最佳方案，唯一的问题就是旧浏览器不兼容这一布局方式。不过其实如上面所说，其实现在需要适配旧浏览器的场景越来越少了，尤其是移动开发，flex可以完全放心使用。</p><h3 id="table布局"><a href="#table布局" class="headerlink" title="table布局"></a>table布局</h3><p>table布局其实我们已经很熟悉了，就是表格布局，那么表格布局是这样实现三栏自适应的效果呢？其实不难理解,就是把三列都看做是表格，控制表格的显示情况即可，实现如下</p><figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="undefined"></span></div><div class="line"><span class="css">       <span class="selector-class">.container</span> &#123;</span></div><div class="line"><span class="undefined">           width: 100%;</span></div><div class="line"><span class="undefined">           display: table;</span></div><div class="line"><span class="undefined">           height: 200px;</span></div><div class="line"><span class="undefined">       &#125;</span></div><div class="line"><span class="undefined"></span></div><div class="line"><span class="css">       <span class="selector-class">.container</span>&gt;<span class="selector-tag">div</span> &#123;</span></div><div class="line"><span class="undefined">           display: table-cell;</span></div><div class="line"><span class="undefined">       &#125;</span></div><div class="line"><span class="undefined"></span></div><div class="line"><span class="css">       <span class="selector-class">.left</span> &#123;</span></div><div class="line"><span class="undefined">           width: 300px;</span></div><div class="line"><span class="undefined">           background: red;</span></div><div class="line"><span class="undefined">       &#125;</span></div><div class="line"><span class="undefined"></span></div><div class="line"><span class="css">       <span class="selector-class">.center</span> &#123;</span></div><div class="line"><span class="undefined">           background: yellow;</span></div><div class="line"><span class="undefined">       &#125;</span></div><div class="line"><span class="undefined"></span></div><div class="line"><span class="css">       <span class="selector-class">.right</span> &#123;</span></div><div class="line"><span class="undefined">           width: 300px;</span></div><div class="line"><span class="undefined">           background: blue;</span></div><div class="line"><span class="undefined">       &#125;</span></div><div class="line"><span class="undefined">   </span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></div><div class="line">   <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"container"</span>&gt;</span></div><div class="line">       <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"left"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line">       <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"center"</span>&gt;</span></div><div class="line">           <span class="tag">&lt;<span class="name">h1</span>&gt;</span>表格布局<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></div><div class="line">       <span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line">       <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"right"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line">   <span class="tag">&lt;/<span class="name">div</span>&gt;</span></div></pre></td></tr></table></figure><p><img src="http://oux9g0njr.bkt.clouddn.com/17-11-15/26531496.jpg" alt=""><br>把外层容器设置成table,里面设置为table-cell，就可以很容易地实现布局需求。这种布局方式兼容性还特别好，因为表格是兼容旧浏览器的，虽然遭受很多诟病，但是真的可以解决问题。当然这种布局有缺点，缺点就是不灵活，边框设置、高度设置等等都有很大受限。</p><h3 id="绝对定位布局"><a href="#绝对定位布局" class="headerlink" title="绝对定位布局"></a>绝对定位布局</h3><p>这种布局方式很明显了，利用绝对定位，实现起来非常容易</p><figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="undefined"></span></div><div class="line"><span class="css">       <span class="selector-class">.container</span>&gt;<span class="selector-tag">div</span> &#123;</span></div><div class="line"><span class="undefined">           position: absolute;</span></div><div class="line"><span class="undefined">           height: 200px;</span></div><div class="line"><span class="undefined">       &#125;</span></div><div class="line"><span class="undefined"></span></div><div class="line"><span class="css">       <span class="selector-class">.left</span> &#123;</span></div><div class="line"><span class="undefined">           left: 0;</span></div><div class="line"><span class="undefined">           width: 300px;</span></div><div class="line"><span class="undefined">           background: red;</span></div><div class="line"><span class="undefined">       &#125;</span></div><div class="line"><span class="undefined"></span></div><div class="line"><span class="css">       <span class="selector-class">.center</span> &#123;</span></div><div class="line"><span class="undefined">           left: 300px;</span></div><div class="line"><span class="undefined">           right: 300px;</span></div><div class="line"><span class="undefined">           background: yellow;</span></div><div class="line"><span class="undefined">       &#125;</span></div><div class="line"><span class="undefined"></span></div><div class="line"><span class="css">       <span class="selector-class">.right</span> &#123;</span></div><div class="line"><span class="undefined">           right: 0;</span></div><div class="line"><span class="undefined">           width: 300px;</span></div><div class="line"><span class="undefined">           background: blue;</span></div><div class="line"><span class="undefined">       &#125;</span></div><div class="line"><span class="undefined">   </span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></div><div class="line">   <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"container"</span>&gt;</span></div><div class="line">       <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"left"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line">       <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"center"</span>&gt;</span></div><div class="line">           <span class="tag">&lt;<span class="name">h1</span>&gt;</span>绝对定位布局<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></div><div class="line">       <span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line">       <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"right"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line">   <span class="tag">&lt;/<span class="name">div</span>&gt;</span></div></pre></td></tr></table></figure><p><img src="http://oux9g0njr.bkt.clouddn.com/17-11-15/66140563.jpg" alt=""><br>绝对定位布局，很容易，效率也很高，不过实际开发中很少使用，原因也很简单，绝对定位的元素是脱离文档流的，可维护性会受限。</p><h3 id="网格布局"><a href="#网格布局" class="headerlink" title="网格布局"></a>网格布局</h3><p>最后再来看一个比较新的东西，网格布局，这个布局是新的css标准下的特性,在响应式布局大行其道的移动互联网时代，bootstrap之类的是对栅格化布局框架非常流行，而网格布局，就是对栅格布局的标准化实现，下面是用网格布局实现代码和效果</p><figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="undefined"></span></div><div class="line"><span class="css">       <span class="selector-class">.container</span> &#123;</span></div><div class="line"><span class="undefined">           display: grid;</span></div><div class="line"><span class="undefined">           width: 100%;</span></div><div class="line"><span class="undefined">           grid-template-rows: 200px;</span></div><div class="line"><span class="undefined">           grid-template-columns: 300px auto 300px;</span></div><div class="line"><span class="undefined">       &#125;</span></div><div class="line"><span class="undefined"></span></div><div class="line"><span class="css">       <span class="selector-class">.left</span> &#123;</span></div><div class="line"><span class="undefined">           background: red;</span></div><div class="line"><span class="undefined">       &#125;</span></div><div class="line"><span class="undefined"></span></div><div class="line"><span class="css">       <span class="selector-class">.center</span> &#123;</span></div><div class="line"><span class="undefined">           background: yellow;</span></div><div class="line"><span class="undefined">       &#125;</span></div><div class="line"><span class="undefined"></span></div><div class="line"><span class="css">       <span class="selector-class">.right</span> &#123;</span></div><div class="line"><span class="undefined">           background: blue;</span></div><div class="line"><span class="undefined">       &#125;</span></div><div class="line"><span class="undefined">   </span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></div><div class="line">   <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"container"</span>&gt;</span></div><div class="line">       <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"left"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line">       <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"center"</span>&gt;</span></div><div class="line">           <span class="tag">&lt;<span class="name">h1</span>&gt;</span>网格布局<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></div><div class="line">       <span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line">       <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"right"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line">   <span class="tag">&lt;/<span class="name">div</span>&gt;</span></div></pre></td></tr></table></figure><p><img src="http://oux9g0njr.bkt.clouddn.com/17-11-15/89893470.jpg" alt=""><br>可以很明显地看出来，这种布局方式特别清晰，把整个页面设置成网格，设置网格内元素占的行和列，可以很容易实现想要的自适应效果。这种布局方式产生的时间相对较短，最大的问题是浏览器兼容性，不过新技术至少是要了解的。</p><hr><p>以上就是对两边固定，中间自适应的布局的多种方式实现，实际使用时候，首先要考虑浏览器兼容情况，然后根据具体的业务中对元素宽高的要求限制，选择一种合适的布局方式来解决问题。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;三栏布局是一种常见的网页布局方案，最常见的需求就是两边固定，中间自适应效果，而这种布局有很多种不同的实现方案，在不同的需求和兼容性要求下适用性各不相同，下面来看一下常见的几种实现方式和它们的特点。&lt;/p&gt;
&lt;h3 id=&quot;普通浮动布局&quot;&gt;&lt;a href=&quot;#普通浮动布局&quot; 
      
    
    </summary>
    
    
      <category term="css" scheme="http://fx109138.github.io/tags/css/"/>
    
  </entry>
  
  <entry>
    <title>JavaScript闭包及相关</title>
    <link href="http://fx109138.github.io/2017/10/26/JavaScript%E9%97%AD%E5%8C%85%E5%8F%8A%E7%9B%B8%E5%85%B3/"/>
    <id>http://fx109138.github.io/2017/10/26/JavaScript闭包及相关/</id>
    <published>2017-10-26T10:40:53.000Z</published>
    <updated>2017-11-14T17:20:52.511Z</updated>
    
    <content type="html"><![CDATA[<p>这是在前端领域的第一篇文章，按照常理我应该写点html和css的相关内容，但是我想放在后面来写，第一篇文章还是说一说曾经觉得很魔幻的JavaScript，就从js中最神秘的闭包开始说起吧。</p><h3 id="什么是闭包"><a href="#什么是闭包" class="headerlink" title="什么是闭包"></a>什么是闭包</h3><p>对于初接触js的人，闭包是一个很难懂的概念，甚至是有很长时间开发经验的人，往往也不一定能说的清楚透彻，首先来看网上随便就能搜索到的js中闭包的定义：</p><blockquote><p>所谓“闭包”，指的是一个拥有许多变量和绑定了这些变量的环境的表达式（通常是一个函数），因而这些变量也是该表达式的一部分。</p></blockquote><p>从这种书面化的定义中很难获取到直接明了的有效信息，所以这个概念先放在这里，要想了解闭包，我觉得可以先从js的作用域链说起。</p><h3 id="作用域链"><a href="#作用域链" class="headerlink" title="作用域链"></a>作用域链</h3><p>不考虑es6和with语句，我们大体上可以说js语言是不存在传统的块作用域的，但是存在函数作用域。所谓函数作用域就是指创建一个函数时候，函数的内部变量是只存在于函数内的，此时这个函数就形成了一个函数作用域。</p><p>我们都知道，不论是在浏览器还是node或其他js运行环境下，js所有代码都运行在一个全局作用域里面，而上面分析了函数可以创建作用域，如果在函数中再次声明函数，就会在里面再次形成作用域，考察下面一段程序</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> a = <span class="number">3</span>;</div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">f1</span>(<span class="params"></span>) </span>&#123;</div><div class="line"><span class="keyword">var</span> a = <span class="number">4</span>;</div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">f2</span>(<span class="params"></span>) </span>&#123;</div><div class="line">   <span class="keyword">var</span> a = <span class="number">5</span>;</div><div class="line">   &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure><p>此时就存在了三个作用域，如图所示</p><p><img src="http://oux9g0njr.bkt.clouddn.com/17-11-14/21124347.jpg" alt=""></p><p>这三层作用域是嵌套关系，里面的可以访问外面的，外面的无法访问里面的。此时，如果内部作用域想要访问外部作用域中的元素，救需要一层层向外找，考察下面的代码</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> a = <span class="number">3</span>;</div><div class="line"><span class="keyword">var</span> b = <span class="number">11</span>;</div><div class="line"><span class="keyword">var</span> c = <span class="number">25</span>;</div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">f1</span>(<span class="params"></span>) </span>&#123;</div><div class="line"><span class="keyword">var</span> a = <span class="number">4</span>;</div><div class="line"><span class="keyword">var</span> b = <span class="number">13</span>;</div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">f2</span>(<span class="params"></span>) </span>&#123;</div><div class="line">   <span class="keyword">var</span> a = <span class="number">5</span>;</div><div class="line">   <span class="built_in">console</span>.log(a);</div><div class="line">   <span class="built_in">console</span>.log(b);</div><div class="line">   <span class="built_in">console</span>.log(c);</div><div class="line">   &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure><p>在这种情况下，内层函数在寻找变量时候情况就有所不同了，直接看图<br><img src="http://oux9g0njr.bkt.clouddn.com/17-11-14/22565348.jpg" alt=""></p><p>从图中可以很清晰地看出，在寻找变量的时候是按照由内到外，按照层级来寻找的，这就形成了一个链条，可以称之为作用域链。</p><h3 id="词法作用域"><a href="#词法作用域" class="headerlink" title="词法作用域"></a>词法作用域</h3><p>理解了作用域链，应该就可以理解js的词法作用域了。与词法作用域相对的概念是动态作用域。先来看下面一段代码，它的输出结果是什么</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">f1</span>(<span class="params"></span>) </span>&#123;</div><div class="line">    <span class="built_in">console</span>.log(a);</div><div class="line">&#125;</div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">f2</span>(<span class="params"></span>) </span>&#123;</div><div class="line">    <span class="keyword">var</span> a = <span class="number">5</span>;</div><div class="line">    f1();</div><div class="line">&#125;</div><div class="line"><span class="keyword">var</span> a = <span class="number">4</span>;</div><div class="line">f2();</div></pre></td></tr></table></figure><p>正确的输出结果是4，有疑虑可以看下面的一组定义</p><blockquote><p>词法作用域的函数中遇到既不是形参也不是函数内部定义的局部变量的变量时，去函数定义时的环境中查询。</p><p>动态域的函数中遇到既不是形参也不是函数内部定义的局部变量的变量时，到函数调用时的环境中查。</p></blockquote><p>这就是这个问题的全部，js中采用的是词法作用域，所以变量要在函数定义时候的环境中去找，如果没有，那就沿着作用域链向上查询。</p><h3 id="理解闭包"><a href="#理解闭包" class="headerlink" title="理解闭包"></a>理解闭包</h3><p>有了上面的知识铺垫，其实就不需要纠结闭包的概念了，因为闭包的本质就是上面的变量解析过程，在实际应用中，我们使用闭包的主要用途主要有两方面，下面来看一下具体的实现来理解一下闭包。</p><h4 id="封装变量"><a href="#封装变量" class="headerlink" title="封装变量"></a>封装变量</h4><p>看一下下面的例子</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">f1</span>(<span class="params"></span>) </span>&#123;</div><div class="line">          <span class="keyword">var</span> a = <span class="number">4</span>;</div><div class="line">          <span class="keyword">return</span> <span class="function"><span class="keyword">function</span> <span class="title">f2</span>(<span class="params"></span>) </span>&#123;</div><div class="line">              <span class="built_in">console</span>.log(a);</div><div class="line">          &#125;</div><div class="line">      &#125;</div><div class="line">      f = f1();</div><div class="line">      f();</div></pre></td></tr></table></figure><p>这段程序中，外界环境是无法直接读取a的，因为a处于函数作用域。但是我们通过创建一个闭包f2，就可以实现访问a的目的，其实本质就是应用了f2会去寻找声明时环境的特点，从而打开了读取函数内部变量的外部接口，采用这种方式可以实现封装，很多模块化编程解决方案都是通过这种方式来实现的。</p><h4 id="保存运行状态"><a href="#保存运行状态" class="headerlink" title="保存运行状态"></a>保存运行状态</h4><p>考虑下面的代码，它的输出结果是什么</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; <span class="number">3</span>; i++) &#123;</div><div class="line">          setTimeout(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</div><div class="line">              <span class="built_in">console</span>.log(i);</div><div class="line">          &#125;, <span class="number">1000</span>);</div><div class="line">      &#125;</div></pre></td></tr></table></figure><p>如果是同步的程序，显然是0 1 2，然而很不幸，这段程序中插入了一个定时器，它是异步执行的，带来的影响就是它的的输出结果是3 3 3。关于异步编程的更多内容我想我以后会补充，在此只简单解释一下为什么会这样。js是单线程模型，所以同一时刻只能执行一件任务，而异步操作会被丢到一个队列中，等到主线程执行完毕，再去队列中依次取出并执行。所以，当执行打印操作时候，其实主线程早已执行完毕，i=3，所以只能输出3。</p><p>那么如何解决这一问题呢，想想我们的需求，我们是想要在每次执行时候打印对应时刻的i值，每次都不一样，需要把每个状态下的i保存下来。想想闭包的概念，是不是很清楚了？没错，我们只要创建一个闭包，就可以实现需求，代码如下</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; <span class="number">3</span>; i++) &#123;</div><div class="line">          (<span class="function"><span class="keyword">function</span> (<span class="params">i</span>) </span>&#123;</div><div class="line">              setTimeout(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</div><div class="line">                  <span class="built_in">console</span>.log(i);</div><div class="line">              &#125;, <span class="number">1000</span>);</div><div class="line">          &#125;)(i)</div><div class="line">      &#125;</div></pre></td></tr></table></figure><p>现在回来看闭包的概念，是不是清晰多了,理解了本质，闭包实际上并不难，不过也有一些需要注意的地方。</p><h3 id="注意事项"><a href="#注意事项" class="headerlink" title="注意事项"></a>注意事项</h3><p>使用闭包，一个最需要注意的问题就是，闭包会产生大量无法释放的内存，不能滥用，在实际应用中，要在需要的时候使用闭包，不要刻意使用闭包。</p><h3 id="回调函数"><a href="#回调函数" class="headerlink" title="回调函数"></a>回调函数</h3><p>关于回调函数和异步编程的相关内容，后面我应该会有文章详细分析，这里只想说一些和本文相关的内容，回调函数其实也是闭包。我们将一个回调函数作为变量传递给另一个函数时，这个回调函数在包含它的函数内的某一点执行，就好像这个回调函数是在包含它的函数中定义的一样。所以回调函数可以拿到执行的某个点，某个状态的信息。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;这是在前端领域的第一篇文章，按照常理我应该写点html和css的相关内容，但是我想放在后面来写，第一篇文章还是说一说曾经觉得很魔幻的JavaScript，就从js中最神秘的闭包开始说起吧。&lt;/p&gt;
&lt;h3 id=&quot;什么是闭包&quot;&gt;&lt;a href=&quot;#什么是闭包&quot; class=
      
    
    </summary>
    
    
      <category term="JavaScript" scheme="http://fx109138.github.io/tags/JavaScript/"/>
    
  </entry>
  
  <entry>
    <title>设计模式之解释器模式</title>
    <link href="http://fx109138.github.io/2017/09/24/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F%E4%B9%8B%E8%A7%A3%E9%87%8A%E5%99%A8%E6%A8%A1%E5%BC%8F/"/>
    <id>http://fx109138.github.io/2017/09/24/设计模式之解释器模式/</id>
    <published>2017-09-24T07:20:13.000Z</published>
    <updated>2017-09-24T08:15:48.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="解释器模式的概念"><a href="#解释器模式的概念" class="headerlink" title="解释器模式的概念"></a>解释器模式的概念</h2><blockquote><p>给定一个语言，定义它的文法的一种表示，并定义一个解释器，这个解释器使用该表示来解释语言中的句子。</p></blockquote><p>这是23种设计模式中最后一种了，它是一种不太常用的设计模式，不过还是要学习的。</p><h2 id="举个栗子"><a href="#举个栗子" class="headerlink" title="举个栗子"></a>举个栗子</h2><p>解释器模式的模型图<br><img src="http://oux9g0njr.bkt.clouddn.com/17-9-24/234057.jpg" alt=""></p><p>解释器模式里面有四种角色：抽象解释器，终结符表达式，非终结符表达式，环境角色。</p><ul><li>抽象表达式</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">Expression</span> </span>&#123;</div><div class="line">    <span class="comment">//解析任务</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">abstract</span> Object <span class="title">interpret</span><span class="params">(Context context)</span></span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure><ul><li>终结符表达式</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TerminalExpression</span> <span class="keyword">extends</span> <span class="title">Expression</span> </span>&#123;</div><div class="line">    <span class="comment">//终结符表达式通常只有一个</span></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> Object <span class="title">interpret</span><span class="params">(Context context)</span> </span>&#123;</div><div class="line">        <span class="keyword">return</span> <span class="keyword">null</span>;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure><ul><li>非终结符表达式</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">NonterminalExpression</span> <span class="keyword">extends</span> <span class="title">Expression</span> </span>&#123;</div><div class="line">    <span class="comment">//非终结符表达式会依赖其他表达式</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="title">NonterminalExpression</span><span class="params">(Exception... exceptions)</span></span>&#123;</div><div class="line">    &#125;</div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> Object <span class="title">interpret</span><span class="params">(Context context)</span> </span>&#123;</div><div class="line">        <span class="comment">//进行文法处理</span></div><div class="line">        <span class="keyword">return</span> <span class="keyword">null</span>;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure><ul><li>调用场景</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Client</span> </span>&#123;</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</div><div class="line">        Context context = <span class="keyword">new</span> Context();</div><div class="line">        <span class="comment">//容器</span></div><div class="line">        Stack&lt;Expression&gt; stack;</div><div class="line">        <span class="keyword">for</span> (; ; ) &#123;</div><div class="line">            <span class="comment">//语法判断，递归调用</span></div><div class="line">        &#125;</div><div class="line">        <span class="comment">//分析语法</span></div><div class="line">        Expression expression=stack.pop();</div><div class="line">        <span class="comment">//进入场景</span></div><div class="line">        expression.interpret(context);</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure><p>环境未列出，因为实际开发中可以采用HashMap代替，解释器模式封装了一个语法规范文件，避免了调用者和语法解析器之间产生耦合，在解释器模式中可以通过一种称之为抽象语法树的图形方式来直观地表示语言的构成，每一棵抽象语法树对应一个语言实例。</p><h2 id="适用范围"><a href="#适用范围" class="headerlink" title="适用范围"></a>适用范围</h2><p>解释器模式适用与解决重复发生的解释语法的问题问，面对系统化的语法结构，恰当使用可以使工作大量简化。</p><h2 id="优点缺点"><a href="#优点缺点" class="headerlink" title="优点缺点"></a>优点缺点</h2><p>优点是扩展方便，调整表达式结构就可以实现语法的修改。</p><p>缺点一方面是类太多会造成类膨胀，另一方面就是内部的大量递归会严重影响性能。</p><h2 id="注意事项"><a href="#注意事项" class="headerlink" title="注意事项"></a>注意事项</h2><p>尽量不要使用解释器模式处理重要的业务，解释器模式会带来很多维护性的问题，在实际应用中可以使用脚本语言来代替解释器模式。</p><hr><h2 id="写在后面的话"><a href="#写在后面的话" class="headerlink" title="写在后面的话"></a>写在后面的话</h2><p>到此为止，设计模式的系列文章就要结束了，这里面说的设计模式是狭义上的，由GoF提出的23种设计模式，现在可能还有新的设计模式产生，在此不做讨论。这些设计模式在实际项目中当然不能独立存在，具体的组合应用要依场景而定，在这里只是系统的看了一遍这些基本概念，开发的路还很长，随着接触工程量的增加，对设计模式会有更深刻的了解。至此，本系列全部文章结束。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;解释器模式的概念&quot;&gt;&lt;a href=&quot;#解释器模式的概念&quot; class=&quot;headerlink&quot; title=&quot;解释器模式的概念&quot;&gt;&lt;/a&gt;解释器模式的概念&lt;/h2&gt;&lt;blockquote&gt;
&lt;p&gt;给定一个语言，定义它的文法的一种表示，并定义一个解释器，这个解释器
      
    
    </summary>
    
    
      <category term="设计模式" scheme="http://fx109138.github.io/tags/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"/>
    
  </entry>
  
  <entry>
    <title>设计模式之状态模式</title>
    <link href="http://fx109138.github.io/2017/09/24/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F%E4%B9%8B%E7%8A%B6%E6%80%81%E6%A8%A1%E5%BC%8F/"/>
    <id>http://fx109138.github.io/2017/09/24/设计模式之状态模式/</id>
    <published>2017-09-24T06:01:34.000Z</published>
    <updated>2017-09-24T07:18:50.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="什么是状态模式"><a href="#什么是状态模式" class="headerlink" title="什么是状态模式"></a>什么是状态模式</h2><blockquote><p>允许一个对象在其内部状态改变时改变它的行为，对象看起来似乎修改了它的类。</p></blockquote><p>状态模式处理的问题就是复杂的状态变更问题，它做了核心的封装，是状态的改变看起来像是类发生变化一样。</p><h2 id="举个栗子"><a href="#举个栗子" class="headerlink" title="举个栗子"></a>举个栗子</h2><p>状态模式的模型图<br><img src="http://oux9g0njr.bkt.clouddn.com/17-9-24/36222077.jpg" alt=""></p><p>下面是状态模式三种角色的实现</p><ul><li>抽象状态</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">State</span> </span>&#123;</div><div class="line">    <span class="keyword">protected</span> Context context</div><div class="line">    <span class="function"><span class="keyword">public</span> Context <span class="title">getContext</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">return</span> context;</div><div class="line">    &#125;</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setContext</span><span class="params">(Context context)</span> </span>&#123;</div><div class="line">        <span class="keyword">this</span>.context = context;</div><div class="line">    &#125;</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">void</span> <span class="title">method1</span><span class="params">()</span></span>;</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">void</span> <span class="title">method2</span><span class="params">()</span></span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure><ul><li>具体状态</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ConcreteState1</span> <span class="keyword">extends</span> <span class="title">State</span> </span>&#123;</div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">method1</span><span class="params">()</span> </span>&#123;</div><div class="line"><span class="comment">//当前状态业务</span></div><div class="line">    &#125;</div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">method2</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">super</span>.context.setCurrentState(Context.STATE2);</div><div class="line">        <span class="keyword">super</span>.context.handle2();</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ConcreteState2</span> <span class="keyword">extends</span> <span class="title">State</span> </span>&#123;</div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">method1</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">super</span>.context.setCurrentState(Context.STATE1);</div><div class="line">        <span class="keyword">super</span>.context.handle1();</div><div class="line">    &#125;</div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">method2</span><span class="params">()</span> </span>&#123;</div><div class="line"><span class="comment">//当前状态业务</span></div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure><ul><li>环境</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Context</span> </span>&#123;</div><div class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> State STATE1 = <span class="keyword">new</span> ConcreteState1();</div><div class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> State STATE2 = <span class="keyword">new</span> ConcreteState2();</div><div class="line">    <span class="keyword">private</span> State currentState;</div><div class="line">    <span class="function"><span class="keyword">public</span> State <span class="title">getCurrentState</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">return</span> currentState;</div><div class="line">    &#125;</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setCurrentState</span><span class="params">(State currentState)</span> </span>&#123;</div><div class="line">        <span class="keyword">this</span>.currentState = currentState;</div><div class="line">        currentState.setContext(<span class="keyword">this</span>);</div><div class="line">    &#125;</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">handle1</span><span class="params">()</span> </span>&#123;</div><div class="line">        currentState.method1();</div><div class="line">    &#125;</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">handle2</span><span class="params">()</span> </span>&#123;</div><div class="line">        currentState.method2();</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure><ul><li>调用场景</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Client</span> </span>&#123;</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</div><div class="line">        Context context=<span class="keyword">new</span> Context();</div><div class="line">        context.setCurrentState(<span class="keyword">new</span> ConcreteState1());</div><div class="line">        context.handle1();</div><div class="line">        context.handle2();</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure><p>我们会发现在使用的时候，我们只要知道场景里面的事情就够了，至于状态究竟是如何改变的，我们不需要关心，通过一个视角的切换使得程序变得更加清晰。</p><h2 id="适用范围"><a href="#适用范围" class="headerlink" title="适用范围"></a>适用范围</h2><p>状态模式解决的是行为和状态的变化问题，在不同的状态下执行相同的行为结果也可能不相同，状态模式对其做出了很好的封装，同时他还可以优化由大量条件分支带来的逻辑混乱问题。</p><h2 id="优点缺点"><a href="#优点缺点" class="headerlink" title="优点缺点"></a>优点缺点</h2><p>状态模式的优点是封装性好，它把状态的变化放到了类的内部，使得从外面看结构清楚，同时它易于扩展，符合开闭原则。</p><p>状态模式的缺点是随着情况复杂，类数量会增加，过度使用会造成类爆炸的问题。</p><h2 id="注意事项"><a href="#注意事项" class="headerlink" title="注意事项"></a>注意事项</h2><p>状态模式使用时候要注意状态的个数，尽量不能太多。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;什么是状态模式&quot;&gt;&lt;a href=&quot;#什么是状态模式&quot; class=&quot;headerlink&quot; title=&quot;什么是状态模式&quot;&gt;&lt;/a&gt;什么是状态模式&lt;/h2&gt;&lt;blockquote&gt;
&lt;p&gt;允许一个对象在其内部状态改变时改变它的行为，对象看起来似乎修改了它的类。&lt;
      
    
    </summary>
    
    
      <category term="设计模式" scheme="http://fx109138.github.io/tags/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"/>
    
  </entry>
  
  <entry>
    <title>设计模式之访问者模式</title>
    <link href="http://fx109138.github.io/2017/09/23/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F%E4%B9%8B%E8%AE%BF%E9%97%AE%E8%80%85%E6%A8%A1%E5%BC%8F/"/>
    <id>http://fx109138.github.io/2017/09/23/设计模式之访问者模式/</id>
    <published>2017-09-23T14:37:16.000Z</published>
    <updated>2017-09-24T05:58:41.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="访问者模式的概念"><a href="#访问者模式的概念" class="headerlink" title="访问者模式的概念"></a>访问者模式的概念</h2><blockquote><p>封装某些作用于某种数据结构中各元素的操作，它可以在不改变数据结构的前提下定义作用于这些元素的新的操作。</p></blockquote><p>访问者模式据说是最复杂的一种行为类模式了，所以要慢慢理解。</p><h2 id="举个栗子"><a href="#举个栗子" class="headerlink" title="举个栗子"></a>举个栗子</h2><p>访问者模式的模型图<br><img src="http://oux9g0njr.bkt.clouddn.com/17-9-23/11719270.jpg" alt=""></p><p>这个图也很复杂，里面有五种角色：抽象访问者、具体访问者、抽象元素、具体元素、结构对象，还是先通过编码的方式来认识一下。</p><ul><li>抽象元素</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">Element</span> </span>&#123;</div><div class="line">    <span class="comment">//业务逻辑</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">void</span> <span class="title">method</span><span class="params">()</span></span>;</div><div class="line">    <span class="comment">//访问者</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">void</span> <span class="title">accept</span><span class="params">(Visitor visitor)</span></span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure><ul><li>具体元素</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ConcreteElement1</span> <span class="keyword">extends</span> <span class="title">Element</span> </span>&#123;</div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">method</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="comment">//具体逻辑</span></div><div class="line">    &#125;</div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">accept</span><span class="params">(Visitor visitor)</span> </span>&#123;</div><div class="line">        visitor.visit(<span class="keyword">this</span>);</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ConcreteElement2</span> <span class="keyword">extends</span> <span class="title">Element</span> </span>&#123;</div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">method</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="comment">//具体逻辑</span></div><div class="line">    &#125;</div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">accept</span><span class="params">(Visitor visitor)</span> </span>&#123;</div><div class="line">        visitor.visit(<span class="keyword">this</span>);</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure><ul><li>抽象访问者</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">Visitor</span> </span>&#123;</div><div class="line">    <span class="function"><span class="keyword">void</span> <span class="title">visit</span><span class="params">(ConcreteElement1 element1)</span></span>;</div><div class="line">    <span class="function"><span class="keyword">void</span> <span class="title">visit</span><span class="params">(ConcreteElement2 element2)</span></span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure><ul><li>具体访问者</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ConcreteVisitor</span> <span class="keyword">implements</span> <span class="title">Visitor</span> </span>&#123;</div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">visit</span><span class="params">(ConcreteElement1 element1)</span> </span>&#123;</div><div class="line">        element1.method();</div><div class="line">    &#125;</div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">visit</span><span class="params">(ConcreteElement2 element2)</span> </span>&#123;</div><div class="line">        element2.method();</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure><ul><li>结构对象</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ObjectStruture</span> </span>&#123;</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Element <span class="title">createElement</span><span class="params">()</span></span>&#123;</div><div class="line">        Random random=<span class="keyword">new</span> Random();</div><div class="line">        <span class="keyword">if</span> (random.nextInt(<span class="number">100</span>)&gt;<span class="number">50</span>)&#123;</div><div class="line">            <span class="keyword">return</span> <span class="keyword">new</span> ConcreteElement1();</div><div class="line">        &#125;<span class="keyword">else</span> &#123;</div><div class="line">            <span class="keyword">return</span> <span class="keyword">new</span> ConcreteElement2();</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure><ul><li>调用场景</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Client</span> </span>&#123;</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</div><div class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">10</span>; i++) &#123;</div><div class="line">            Element element = ObjectStruture.createElement();</div><div class="line">            element.accept(<span class="keyword">new</span> ConcreteVisitor());</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure><p>这就是访问者模式，它提供的是一种不破坏原有结构下实现功能增量的一种方式，结构是不能变的，但是具体的操作是可以不同的，访问者模式很好的解决了这一问题。</p><h2 id="适用范围"><a href="#适用范围" class="headerlink" title="适用范围"></a>适用范围</h2><p>访问者模式适用于一个对象结构包含很多类对象，它们有不同的接口，而你想对这些对象实施一些依赖于其具体类的操作。或者当你需要对一个对象结构中的对象进行很多不同的并且不相关的操作，而你想避免让这些操作“污染”这些对象的类，把将相关的操作集中起来 定义在一个类中。它是对迭代器模式的一种补充，可以遍历不同对象，执行不同操作。</p><h3 id="优点缺点"><a href="#优点缺点" class="headerlink" title="优点缺点"></a>优点缺点</h3><p>访问者模式的优点在于内部结构和外部展示完全分离，符合单一职责原则，便于后面的扩展，灵活性好。</p><p>访问者模式的缺点在于内部细节需要暴露，而且要依赖具体实现而不是接口，不符合依赖倒置原则。另一方面，内部具体组成部分一旦需要变化也会带来很大麻烦。</p><h3 id="注意事项"><a href="#注意事项" class="headerlink" title="注意事项"></a>注意事项</h3><p>访问者模式适用于对于已有的完整的结构进行上层重构的情况，有助于我们对功能的梳理，实现集中化管理的目的。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;访问者模式的概念&quot;&gt;&lt;a href=&quot;#访问者模式的概念&quot; class=&quot;headerlink&quot; title=&quot;访问者模式的概念&quot;&gt;&lt;/a&gt;访问者模式的概念&lt;/h2&gt;&lt;blockquote&gt;
&lt;p&gt;封装某些作用于某种数据结构中各元素的操作，它可以在不改变数据结构的
      
    
    </summary>
    
    
      <category term="设计模式" scheme="http://fx109138.github.io/tags/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"/>
    
  </entry>
  
  <entry>
    <title>设计模式之备忘录模式</title>
    <link href="http://fx109138.github.io/2017/09/23/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F%E4%B9%8B%E5%A4%87%E5%BF%98%E5%BD%95%E6%A8%A1%E5%BC%8F/"/>
    <id>http://fx109138.github.io/2017/09/23/设计模式之备忘录模式/</id>
    <published>2017-09-23T11:43:32.000Z</published>
    <updated>2017-09-23T14:35:31.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="备忘录模式的定义"><a href="#备忘录模式的定义" class="headerlink" title="备忘录模式的定义"></a>备忘录模式的定义</h2><blockquote><p>在不破坏封闭的前提下，捕获一个对象的内部状态，并在该对象之外保存这个状态。这样以后就可将该对象恢复到原先保存的状态。</p></blockquote><p>备忘录模式也叫快照模式，提供了一种类似后悔药的机制。</p><h2 id="举个栗子"><a href="#举个栗子" class="headerlink" title="举个栗子"></a>举个栗子</h2><p>备忘录模式的模型图<br><img src="http://oux9g0njr.bkt.clouddn.com/17-9-23/29562907.jpg" alt=""></p><p>备忘录模式有三种角色</p><ul><li>发起人</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Originator</span> </span>&#123;</div><div class="line">    <span class="keyword">private</span> String state;</div><div class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getState</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">return</span> state;</div><div class="line">    &#125;</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setState</span><span class="params">(String state)</span> </span>&#123;</div><div class="line">        <span class="keyword">this</span>.state = state;</div><div class="line">    &#125;</div><div class="line">    <span class="function"><span class="keyword">public</span> Memento <span class="title">createMemento</span><span class="params">()</span></span>&#123;</div><div class="line">        <span class="keyword">return</span> <span class="keyword">new</span> Memento(state);</div><div class="line">    &#125;</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">restoreMemento</span><span class="params">(Memento memento)</span></span>&#123;</div><div class="line">        setState(memento.getState());</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure><ul><li>备忘录</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Memento</span> </span>&#123;</div><div class="line">    <span class="keyword">private</span> String state;</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Memento</span><span class="params">(String state)</span> </span>&#123;</div><div class="line">        <span class="keyword">this</span>.state = state;</div><div class="line">    &#125;</div><div class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getState</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">return</span> state;</div><div class="line">    &#125;</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setState</span><span class="params">(String state)</span> </span>&#123;</div><div class="line">        <span class="keyword">this</span>.state = state;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure><ul><li>备忘录管理员</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Caretaker</span> </span>&#123;</div><div class="line">    <span class="keyword">private</span> Memento memento;</div><div class="line">    <span class="function"><span class="keyword">public</span> Memento <span class="title">getMemento</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">return</span> memento;</div><div class="line">    &#125;</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setMemento</span><span class="params">(Memento memento)</span> </span>&#123;</div><div class="line">        <span class="keyword">this</span>.memento = memento;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure><ul><li>调用场景</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Client</span> </span>&#123;</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</div><div class="line">        Originator originator = <span class="keyword">new</span> Originator();</div><div class="line">        Caretaker caretaker = <span class="keyword">new</span> Caretaker();</div><div class="line">        caretaker.setMemento(originator.createMemento());</div><div class="line">        originator.restoreMemento(caretaker.getMemento());</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure><p>这样就完成了一个备忘录的功能，这是最基本的实现方式。</p><h2 id="适用范围"><a href="#适用范围" class="headerlink" title="适用范围"></a>适用范围</h2><p>备忘录模式适用于需要撤销回滚的动作，在实际开发中很常见，比如数据库连接中的事务处理。</p><h2 id="优点缺点"><a href="#优点缺点" class="headerlink" title="优点缺点"></a>优点缺点</h2><p>备忘录模式的优点可以提供了一个版本的自动化管理机制，可以很方便地回退。</p><p>备忘录模式的缺点在于有时候为了备份会浪费资源，而且创建者无法知道究竟会浪费多少资源。</p><h2 id="注意事项"><a href="#注意事项" class="headerlink" title="注意事项"></a>注意事项</h2><p>使用备忘录一定要注意备忘录的生命周期，还要避免创建过多的备忘录，不要给系统带来过分的不必要的开销。</p><h2 id="备忘录模式的变形"><a href="#备忘录模式的变形" class="headerlink" title="备忘录模式的变形"></a>备忘录模式的变形</h2><p>除了基本的方式，备忘录模式还有很多特殊的实现。</p><h3 id="clone方式的备忘录"><a href="#clone方式的备忘录" class="headerlink" title="clone方式的备忘录"></a>clone方式的备忘录</h3><p>我们可以利用原型模式，通过克隆的方式创建备忘录，模型如下<br><img src="http://oux9g0njr.bkt.clouddn.com/17-9-23/11025174.jpg" alt=""></p><ul><li>发起人和备忘录</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Originator</span> <span class="keyword">implements</span> <span class="title">Cloneable</span> </span>&#123;</div><div class="line">    <span class="keyword">private</span> String state;</div><div class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getState</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">return</span> state;</div><div class="line">    &#125;</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setState</span><span class="params">(String state)</span> </span>&#123;</div><div class="line">        <span class="keyword">this</span>.state = state;</div><div class="line">    &#125;</div><div class="line">    <span class="function"><span class="keyword">public</span> Originator <span class="title">createMemento</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">return</span> clone();</div><div class="line">    &#125;</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">restoreMemento</span><span class="params">(Originator originator)</span> </span>&#123;</div><div class="line">        setState(originator.getState());</div><div class="line">    &#125;</div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">protected</span> Originator <span class="title">clone</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">try</span> &#123;</div><div class="line">            <span class="keyword">return</span> (Originator) <span class="keyword">super</span>.clone();</div><div class="line">        &#125; <span class="keyword">catch</span> (CloneNotSupportedException e) &#123;</div><div class="line">            e.printStackTrace();</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">return</span> <span class="keyword">null</span>;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure><ul><li>备忘录管理员</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Caretaker</span> </span>&#123;</div><div class="line">    <span class="keyword">private</span> Originator originator;</div><div class="line">    <span class="function"><span class="keyword">public</span> Originator <span class="title">getOriginator</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">return</span> originator;</div><div class="line">    &#125;</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setOriginator</span><span class="params">(Originator originator)</span> </span>&#123;</div><div class="line">        <span class="keyword">this</span>.originator = originator;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure><p>不过这种方式还可以继续简化，因为此时已经没有了独立的备忘录角色，所以管理员其实也可以由发起人自身管理，此时就变成一个类</p><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Originator</span> <span class="keyword">implements</span> <span class="title">Cloneable</span> </span>&#123;</div><div class="line">    <span class="keyword">private</span> Originator backup;</div><div class="line">    <span class="keyword">private</span> String state;</div><div class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getState</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">return</span> state;</div><div class="line">    &#125;</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setState</span><span class="params">(String state)</span> </span>&#123;</div><div class="line">        <span class="keyword">this</span>.state = state;</div><div class="line">    &#125;</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">createMemento</span><span class="params">()</span> </span>&#123;</div><div class="line">        backup = clone();</div><div class="line">    &#125;</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">restoreMemento</span><span class="params">()</span> </span>&#123;</div><div class="line">        setState(backup.getState());</div><div class="line">    &#125;</div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">protected</span> Originator <span class="title">clone</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">try</span> &#123;</div><div class="line">            <span class="keyword">return</span> (Originator) <span class="keyword">super</span>.clone();</div><div class="line">        &#125; <span class="keyword">catch</span> (CloneNotSupportedException e) &#123;</div><div class="line">            e.printStackTrace();</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">return</span> <span class="keyword">null</span>;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure><p>调用代码很简单，就不贴出来了。这种方式和概念不太相符，它不是在对象外部保存，而是把所有逻辑都移到内部，这种方式适用于简单的场景，如果情况复杂考虑到深拷贝等问题尽量不要使用。</p><h2 id="多状态的备忘录模式"><a href="#多状态的备忘录模式" class="headerlink" title="多状态的备忘录模式"></a>多状态的备忘录模式</h2><p>对于多状态的备忘录模式，我们可以采取装配到bean中的方式<br><img src="http://oux9g0njr.bkt.clouddn.com/17-9-23/71982307.jpg" alt=""></p><ul><li>装配bean的工具类</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">BeanUtils</span> </span>&#123;</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> HashMap&lt;String,Object&gt; <span class="title">backProp</span><span class="params">(Object bean)</span></span>&#123;</div><div class="line">        HashMap&lt;String,Object&gt; result=<span class="keyword">new</span> HashMap&lt;&gt;();</div><div class="line">        <span class="keyword">try</span> &#123;</div><div class="line">            BeanInfo beanInfo= Introspector.getBeanInfo(bean.getClass());</div><div class="line">            PropertyDescriptor[] descriptors=beanInfo.getPropertyDescriptors();</div><div class="line">            <span class="keyword">for</span> (PropertyDescriptor descriptor : descriptors) &#123;</div><div class="line">                String fieldName=descriptor.getName();</div><div class="line">                Method getter=descriptor.getReadMethod();</div><div class="line">                Object fieldValue=getter.invoke(bean,<span class="keyword">new</span> Object[]&#123;&#125;);</div><div class="line">                <span class="keyword">if</span> (!fieldName.equalsIgnoreCase(<span class="string">"class"</span>))&#123;</div><div class="line">                    result.put(fieldName,fieldValue);</div><div class="line">                &#125;</div><div class="line">            &#125;</div><div class="line">        &#125;<span class="keyword">catch</span> (Exception e)&#123;</div><div class="line">            <span class="comment">//异常处理</span></div><div class="line">        &#125;</div><div class="line">        <span class="keyword">return</span> result;</div><div class="line">    &#125;</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">restoreProp</span><span class="params">(Object bean,HashMap&lt;String,Object&gt; propMap)</span></span>&#123;</div><div class="line">        <span class="keyword">try</span> &#123;</div><div class="line">            BeanInfo beanInfo=Introspector.getBeanInfo(bean.getClass());</div><div class="line">            PropertyDescriptor[] descriptors=beanInfo.getPropertyDescriptors();</div><div class="line">            <span class="keyword">for</span> (PropertyDescriptor descriptor : descriptors) &#123;</div><div class="line">                String fieldName=descriptor.getName();</div><div class="line">                <span class="keyword">if</span> (propMap.containsKey(fieldName))&#123;</div><div class="line">                    Method setter=descriptor.getWriteMethod();</div><div class="line">                    setter.invoke(bean,<span class="keyword">new</span> Object[]&#123;propMap.get(fieldName)&#125;);</div><div class="line">                &#125;</div><div class="line">            &#125;</div><div class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</div><div class="line">            <span class="comment">//异常处理</span></div><div class="line">            e.printStackTrace();</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure><ul><li>发起人</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Originator</span> </span>&#123;</div><div class="line">    <span class="keyword">private</span> String state1;</div><div class="line">    <span class="keyword">private</span> String state2;</div><div class="line">    <span class="keyword">private</span> String state3;</div><div class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getState1</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">return</span> state1;</div><div class="line">    &#125;</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setState1</span><span class="params">(String state1)</span> </span>&#123;</div><div class="line">        <span class="keyword">this</span>.state1 = state1;</div><div class="line">    &#125;</div><div class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getState2</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">return</span> state2;</div><div class="line">    &#125;</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setState2</span><span class="params">(String state2)</span> </span>&#123;</div><div class="line">        <span class="keyword">this</span>.state2 = state2;</div><div class="line">    &#125;</div><div class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getState3</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">return</span> state3;</div><div class="line">    &#125;</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setState3</span><span class="params">(String state3)</span> </span>&#123;</div><div class="line">        <span class="keyword">this</span>.state3 = state3;</div><div class="line">    &#125;</div><div class="line">    <span class="function"><span class="keyword">public</span> Memento <span class="title">createMemento</span><span class="params">()</span></span>&#123;</div><div class="line">        <span class="keyword">return</span> <span class="keyword">new</span> Memento(BeanUtils.backProp(<span class="keyword">this</span>));</div><div class="line">    &#125;</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">restoreMemento</span><span class="params">(Memento memento)</span></span>&#123;</div><div class="line">        BeanUtils.restoreProp(<span class="keyword">this</span>,memento.getStateMap());</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure><ul><li>备忘录</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Memento</span> </span>&#123;</div><div class="line">    <span class="keyword">private</span> HashMap&lt;String,Object&gt; stateMap;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Memento</span><span class="params">(HashMap&lt;String, Object&gt; stateMap)</span> </span>&#123;</div><div class="line">        <span class="keyword">this</span>.stateMap = stateMap;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> HashMap&lt;String, Object&gt; <span class="title">getStateMap</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">return</span> stateMap;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setStateMap</span><span class="params">(HashMap&lt;String, Object&gt; stateMap)</span> </span>&#123;</div><div class="line">        <span class="keyword">this</span>.stateMap = stateMap;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure><p>管理员类代码不变，这种方式处理之后就可以随意增加多个状态，调用比较简单这里不贴代码了。</p><h3 id="多备份的备忘录"><a href="#多备份的备忘录" class="headerlink" title="多备份的备忘录"></a>多备份的备忘录</h3><p>如果我们需要创建多份备忘录，上面的又无法满足条件了，这时候修改管理员代码如下</p><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Caretaker</span> </span>&#123;</div><div class="line">    <span class="keyword">private</span> HashMap&lt;String, Memento&gt; memMap = <span class="keyword">new</span> HashMap&lt;&gt;();</div><div class="line">    <span class="function"><span class="keyword">public</span> Memento <span class="title">getMemento</span><span class="params">(String idx)</span> </span>&#123;</div><div class="line">        <span class="keyword">return</span> memMap.get(idx);</div><div class="line">    &#125;</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setMemento</span><span class="params">(String idx, Memento memento)</span> </span>&#123;</div><div class="line">        <span class="keyword">this</span>.memMap.put(idx, memento);</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure><p>这种方式要注意，创建的备份不能自动销毁，所以要限制map上限，防止内存溢出。</p><h2 id="使用内部类的备忘录"><a href="#使用内部类的备忘录" class="headerlink" title="使用内部类的备忘录"></a>使用内部类的备忘录</h2><p>要保证备份数据安全，防止备忘录被修改，我们可以把备忘录设置成发起角色的内部类，直接贴代码</p><ul><li>发起人</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Originator</span> </span>&#123;</div><div class="line">    <span class="keyword">private</span> String state;</div><div class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getState</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">return</span> state;</div><div class="line">    &#125;</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setState</span><span class="params">(String state)</span> </span>&#123;</div><div class="line">        <span class="keyword">this</span>.state = state;</div><div class="line">    &#125;</div><div class="line">    <span class="function"><span class="keyword">public</span> Memento <span class="title">createMemento</span><span class="params">()</span></span>&#123;</div><div class="line">        <span class="keyword">return</span> <span class="keyword">new</span> Memento(<span class="keyword">this</span>.state);</div><div class="line">    &#125;</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">restoreMemento</span><span class="params">(MementoInterface memento)</span></span>&#123;</div><div class="line">        setState(((Memento)memento).getState());</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">private</span> <span class="class"><span class="keyword">class</span> <span class="title">Memento</span> <span class="keyword">implements</span> <span class="title">MementoInterface</span></span>&#123;</div><div class="line">        <span class="keyword">private</span> String state;</div><div class="line">        <span class="function"><span class="keyword">public</span> <span class="title">Memento</span><span class="params">(String state)</span> </span>&#123;</div><div class="line">            <span class="keyword">this</span>.state = state;</div><div class="line">        &#125;</div><div class="line">        <span class="function"><span class="keyword">public</span> String <span class="title">getState</span><span class="params">()</span> </span>&#123;</div><div class="line">            <span class="keyword">return</span> state;</div><div class="line">        &#125;</div><div class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setState</span><span class="params">(String state)</span> </span>&#123;</div><div class="line">            <span class="keyword">this</span>.state = state;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure><ul><li>备忘录空接口</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">MementoInterface</span> </span>&#123;</div><div class="line">&#125;</div></pre></td></tr></table></figure><ul><li>备忘录管理员</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Caretaker</span> </span>&#123;</div><div class="line">    <span class="keyword">private</span> MementoInterface memento;</div><div class="line">    <span class="function"><span class="keyword">public</span> MementoInterface <span class="title">getMemento</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">return</span> memento;</div><div class="line">    &#125;</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setMemento</span><span class="params">(MementoInterface memento)</span> </span>&#123;</div><div class="line">        <span class="keyword">this</span>.memento = memento;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure><p>这种方式通过接口建立联系，采用内部类实现，备忘录更加安全。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;备忘录模式的定义&quot;&gt;&lt;a href=&quot;#备忘录模式的定义&quot; class=&quot;headerlink&quot; title=&quot;备忘录模式的定义&quot;&gt;&lt;/a&gt;备忘录模式的定义&lt;/h2&gt;&lt;blockquote&gt;
&lt;p&gt;在不破坏封闭的前提下，捕获一个对象的内部状态，并在该对象之外保存这
      
    
    </summary>
    
    
      <category term="设计模式" scheme="http://fx109138.github.io/tags/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"/>
    
  </entry>
  
  <entry>
    <title>设计模式之观察者模式</title>
    <link href="http://fx109138.github.io/2017/09/22/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F%E4%B9%8B%E8%A7%82%E5%AF%9F%E8%80%85%E6%A8%A1%E5%BC%8F/"/>
    <id>http://fx109138.github.io/2017/09/22/设计模式之观察者模式/</id>
    <published>2017-09-22T09:20:48.000Z</published>
    <updated>2017-09-23T11:32:42.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="什么是观察者模式"><a href="#什么是观察者模式" class="headerlink" title="什么是观察者模式"></a>什么是观察者模式</h2><blockquote><p>定义对象间一中一对多的依赖关系，使得每当一个对象改变状态，则所有依赖于它的对象都会得到通知并被自动更新。</p></blockquote><p>观察者模式也叫做发布订阅模式，也是一种很常用的设计模式。</p><h2 id="举个栗子"><a href="#举个栗子" class="headerlink" title="举个栗子"></a>举个栗子</h2><p>观察者模式的模型图<br><img src="http://oux9g0njr.bkt.clouddn.com/17-9-23/12067073.jpg" alt=""></p><p>观察者模式有四种角色，下面是具体编码</p><ul><li>被观察者</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">Subject</span> </span>&#123;</div><div class="line">    <span class="keyword">private</span> Vector&lt;Observer&gt; observers = <span class="keyword">new</span> Vector&lt;&gt;();</div><div class="line">    <span class="comment">//添加观察者</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">addObserver</span><span class="params">(Observer observer)</span> </span>&#123;</div><div class="line">        observers.add(observer);</div><div class="line">    &#125;</div><div class="line">    <span class="comment">//删除观察者</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">delObserver</span><span class="params">(Observer observer)</span> </span>&#123;</div><div class="line">        observers.remove(observer);</div><div class="line">    &#125;</div><div class="line">    <span class="comment">//通知所有观察着</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">notifyObservers</span><span class="params">()</span></span>&#123;</div><div class="line">        <span class="keyword">for</span> (Observer observer : observers) &#123;</div><div class="line">            observer.update();</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure><ul><li>具体被观察者</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ConcreteSubject</span> <span class="keyword">extends</span> <span class="title">Subject</span> </span>&#123;</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">method</span><span class="params">()</span></span>&#123;</div><div class="line">        <span class="comment">//具体业务</span></div><div class="line">        System.out.println(<span class="string">"method called"</span>);</div><div class="line">        <span class="keyword">super</span>.notifyObservers();</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure><ul><li>观察者</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">Observer</span> </span>&#123;</div><div class="line">    <span class="comment">//更新</span></div><div class="line">    <span class="function"><span class="keyword">void</span> <span class="title">update</span><span class="params">()</span></span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure><ul><li>具体观察者</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ConcreteObserver</span> <span class="keyword">implements</span> <span class="title">Observer</span> </span>&#123;</div><div class="line">    <span class="comment">//收到消息更新</span></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">update</span><span class="params">()</span> </span>&#123;</div><div class="line">        System.out.println(<span class="string">"receive update"</span>);</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure><ul><li>调用场景</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Client</span> </span>&#123;</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</div><div class="line">        ConcreteSubject subject=<span class="keyword">new</span> ConcreteSubject();</div><div class="line">        Observer observer = <span class="keyword">new</span> ConcreteObserver();</div><div class="line">        subject.addObserver(observer);</div><div class="line">        subject.method();</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure><p>输出结果</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">method called</div><div class="line">receive update</div></pre></td></tr></table></figure><p>这就是观察者模式，一旦被观察者方法执行，观察者就会得到消息，这样可以实现通知功能。</p><h2 id="适用场景"><a href="#适用场景" class="headerlink" title="适用场景"></a>适用场景</h2><p>观察者模式适用于处理程序之间关联的问题，还有系统间通信，更新相应触发等等场景。</p><h2 id="优点缺点"><a href="#优点缺点" class="headerlink" title="优点缺点"></a>优点缺点</h2><p>观察者模式优点是观察者和被观察者建立抽象耦合，易于扩展，同时形成一套消息触发的机制，很好的处理了一对多关联问题。</p><p>观察者模式的缺点是顺序执行下的效率问题，有时需要异步处理。</p><h2 id="注意事项"><a href="#注意事项" class="headerlink" title="注意事项"></a>注意事项</h2><p>需要注意的是一个目标可以既是观察者也是被观察者，这样就会产生链条式行为，所以一定要注意，消息尽量只转发一次，太多就可能出问题。</p><h2 id="jdk接口实现观察者模式"><a href="#jdk接口实现观察者模式" class="headerlink" title="jdk接口实现观察者模式"></a>jdk接口实现观察者模式</h2><p>jdk中其实默认实现了被观察者和观察者，所以上面的代码可以修改成这个样子</p><ul><li>被观察者</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ConcreteSubject</span> <span class="keyword">extends</span> <span class="title">Observable</span></span>&#123;</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">method</span><span class="params">()</span></span>&#123;</div><div class="line">        <span class="comment">//具体业务</span></div><div class="line">        System.out.println(<span class="string">"method called"</span>);</div><div class="line">        <span class="keyword">super</span>.setChanged();</div><div class="line">        <span class="keyword">super</span>.notifyObservers();</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure><ul><li>观察者</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ConcreteObserver</span> <span class="keyword">implements</span> <span class="title">Observer</span> </span>&#123;</div><div class="line">    <span class="comment">//收到消息更新</span></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">update</span><span class="params">(Observable o, Object arg)</span> </span>&#123;</div><div class="line">        System.out.println(<span class="string">"receive update"</span>);</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure><p>调用场景不变，不需要写自己的接口，这样就实现了观察者模式。</p><p>在java开发中的消息队列就是异步处理观察者模式的很好的例子。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;什么是观察者模式&quot;&gt;&lt;a href=&quot;#什么是观察者模式&quot; class=&quot;headerlink&quot; title=&quot;什么是观察者模式&quot;&gt;&lt;/a&gt;什么是观察者模式&lt;/h2&gt;&lt;blockquote&gt;
&lt;p&gt;定义对象间一中一对多的依赖关系，使得每当一个对象改变状态，则所有依
      
    
    </summary>
    
    
      <category term="设计模式" scheme="http://fx109138.github.io/tags/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"/>
    
  </entry>
  
  <entry>
    <title>设计模式之迭代器模式</title>
    <link href="http://fx109138.github.io/2017/09/22/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F%E4%B9%8B%E8%BF%AD%E4%BB%A3%E5%99%A8%E6%A8%A1%E5%BC%8F/"/>
    <id>http://fx109138.github.io/2017/09/22/设计模式之迭代器模式/</id>
    <published>2017-09-22T00:19:55.000Z</published>
    <updated>2017-09-22T01:04:17.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="什么是迭代器模式"><a href="#什么是迭代器模式" class="headerlink" title="什么是迭代器模式"></a>什么是迭代器模式</h2><blockquote><p>提供一种方法访问容器对象中各个元素，而又不需要暴露该对象的内部细节。</p></blockquote><p>迭代器模式提供的是遍历容器的一种方法，它单独管理容器的遍历任务，使遍历与容器自身任务分离开。然而，这种模式现在已经深入到jdk内部了，我们早已经不需要自己手动实现迭代器模式了，不过为了学习还是试着写一下。</p><h2 id="举个栗子"><a href="#举个栗子" class="headerlink" title="举个栗子"></a>举个栗子</h2><p>迭代器模式的模型图<br><img src="http://oux9g0njr.bkt.clouddn.com/17-9-22/65971582.jpg" alt=""></p><p>然后开始对各个角色开始编码</p><ul><li>抽象迭代器</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">Iterator</span> </span>&#123;</div><div class="line">    <span class="function">Object <span class="title">next</span><span class="params">()</span></span>;</div><div class="line">    <span class="function"><span class="keyword">boolean</span> <span class="title">hasNext</span><span class="params">()</span></span>;</div><div class="line">    <span class="function"><span class="keyword">boolean</span> <span class="title">remove</span><span class="params">()</span></span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure><ul><li>具体迭代器</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ConcreteIterator</span> <span class="keyword">implements</span> <span class="title">Iterator</span> </span>&#123;</div><div class="line">    <span class="keyword">private</span> Vector vector;</div><div class="line">    <span class="keyword">public</span> <span class="keyword">int</span> cursor = <span class="number">0</span>;</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="title">ConcreteIterator</span><span class="params">(Vector vector)</span> </span>&#123;</div><div class="line">        <span class="keyword">this</span>.vector = vector;</div><div class="line">    &#125;</div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> Object <span class="title">next</span><span class="params">()</span> </span>&#123;</div><div class="line">        Object result = <span class="keyword">null</span>;</div><div class="line">        <span class="keyword">if</span> (hasNext()) &#123;</div><div class="line">            result = vector.get(cursor++);</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">return</span> result;</div><div class="line">    &#125;</div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">hasNext</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">return</span> cursor != vector.size();</div><div class="line">    &#125;</div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">remove</span><span class="params">()</span> </span>&#123;</div><div class="line">        vector.remove(cursor);</div><div class="line">        <span class="keyword">return</span> <span class="keyword">true</span>;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure><ul><li>抽象容器</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">Aggregate</span> </span>&#123;</div><div class="line">    <span class="function"><span class="keyword">void</span> <span class="title">add</span><span class="params">(Object object)</span></span>;</div><div class="line">    <span class="function"><span class="keyword">void</span> <span class="title">remove</span><span class="params">(Object object)</span></span>;</div><div class="line">    <span class="function">Iterator <span class="title">createIterator</span><span class="params">()</span></span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure><ul><li>具体容器</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ConcreteAggregate</span> <span class="keyword">implements</span> <span class="title">Aggregate</span> </span>&#123;</div><div class="line">    <span class="keyword">private</span> Vector vector = <span class="keyword">new</span> Vector();</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">add</span><span class="params">(Object object)</span> </span>&#123;</div><div class="line">        vector.add(object);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">remove</span><span class="params">(Object object)</span> </span>&#123;</div><div class="line">        vector.remove(object);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> Iterator <span class="title">createIterator</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">return</span> <span class="keyword">new</span> ConcreteIterator(vector);</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure><ul><li>调用场景</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Client</span> </span>&#123;</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</div><div class="line">        Aggregate aggregate=<span class="keyword">new</span> ConcreteAggregate();</div><div class="line">        aggregate.add(<span class="string">"1"</span>);</div><div class="line">        aggregate.add(<span class="string">"2"</span>);</div><div class="line">        aggregate.add(<span class="string">"3"</span>);</div><div class="line">        Iterator iterator=aggregate.createIterator();</div><div class="line">        <span class="keyword">while</span> (iterator.hasNext())&#123;</div><div class="line">            System.out.println(iterator.next());</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure><p>以上就是自己手动实现迭代器的过程，我们会发现，jdk中早就已经有了这些实现了，我们很多时候只要直接使用就可以了。</p><h2 id="适用范围"><a href="#适用范围" class="headerlink" title="适用范围"></a>适用范围</h2><p>迭代器模式与集合容器分不开，他就是专门为了解决容器内元素迭代问题而产生的，为不同容器遍历提供了统一的接口。</p><h2 id="优点缺点"><a href="#优点缺点" class="headerlink" title="优点缺点"></a>优点缺点</h2><p>迭代器模式的优点在于他简化了遍历方式，提供了统一的操作接口封装性良好，用户只需要得到迭代器就可以遍历，而对于遍历算法则不用去关心。</p><h2 id="注意事项"><a href="#注意事项" class="headerlink" title="注意事项"></a>注意事项</h2><p>在实际开发中不只是java，很多高级语言都提供了了常用容器的迭代器，迭代器模式作为一个早期的设计模式现在看来我们只要知道有这个东西就可以了。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;什么是迭代器模式&quot;&gt;&lt;a href=&quot;#什么是迭代器模式&quot; class=&quot;headerlink&quot; title=&quot;什么是迭代器模式&quot;&gt;&lt;/a&gt;什么是迭代器模式&lt;/h2&gt;&lt;blockquote&gt;
&lt;p&gt;提供一种方法访问容器对象中各个元素，而又不需要暴露该对象的内部细节
      
    
    </summary>
    
    
      <category term="设计模式" scheme="http://fx109138.github.io/tags/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"/>
    
  </entry>
  
  <entry>
    <title>设计模式之策略模式</title>
    <link href="http://fx109138.github.io/2017/09/21/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F%E4%B9%8B%E7%AD%96%E7%95%A5%E6%A8%A1%E5%BC%8F/"/>
    <id>http://fx109138.github.io/2017/09/21/设计模式之策略模式/</id>
    <published>2017-09-21T14:41:55.000Z</published>
    <updated>2017-09-21T15:24:45.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="什么是策略模式"><a href="#什么是策略模式" class="headerlink" title="什么是策略模式"></a>什么是策略模式</h2><blockquote><p>定义一组算法，将每个算法都封装起来，并且使它们之间可以互换。</p></blockquote><p>策略模式也叫政策模式，它很好的应用了面向对象思想，下面来感受一下。</p><h2 id="举个栗子"><a href="#举个栗子" class="headerlink" title="举个栗子"></a>举个栗子</h2><p>策略模式的模型图<br><img src="http://oux9g0njr.bkt.clouddn.com/17-9-21/51504515.jpg" alt=""></p><p>策略模式有三种角色：上下文、抽象策略、具体策略，下面来看实例编码</p><ul><li>抽象策略</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">Strategy</span> </span>&#123;</div><div class="line">    <span class="function"><span class="keyword">void</span> <span class="title">method</span><span class="params">()</span></span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure><ul><li>具体策略</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ConcreteStrategy1</span> <span class="keyword">implements</span> <span class="title">Strategy</span> </span>&#123;</div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">method</span><span class="params">()</span> </span>&#123;</div><div class="line">        System.out.println(<span class="string">"策略1"</span>);</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ConcreteStrategy2</span> <span class="keyword">implements</span> <span class="title">Strategy</span> </span>&#123;</div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">method</span><span class="params">()</span> </span>&#123;</div><div class="line">        System.out.println(<span class="string">"策略2"</span>);</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure><ul><li>上下文</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Context</span> </span>&#123;</div><div class="line">    <span class="keyword">private</span> Strategy strategy;</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Context</span><span class="params">(Strategy strategy)</span> </span>&#123;</div><div class="line">        <span class="keyword">this</span>.strategy = strategy;</div><div class="line">    &#125;</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">contextMethod</span><span class="params">()</span></span>&#123;</div><div class="line">        strategy.method();</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure><ul><li>调用场景</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Client</span> </span>&#123;</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</div><div class="line">        Strategy strategy1 = <span class="keyword">new</span> ConcreteStrategy1();</div><div class="line">        Strategy strategy2 = <span class="keyword">new</span> ConcreteStrategy2();</div><div class="line">        Context context;</div><div class="line">        context = <span class="keyword">new</span> Context(strategy1);</div><div class="line">        context.contextMethod();</div><div class="line">        context = <span class="keyword">new</span> Context(strategy2);</div><div class="line">        context.contextMethod();</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure><p>输出结果</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">策略1</div><div class="line">策略2</div></pre></td></tr></table></figure><p>这就是策略模式，特别简单，你甚至会觉得这就是很普通的代码，然而就是这样，只要有面向对象的思想，就能看懂策略模式。</p><h2 id="适用范围"><a href="#适用范围" class="headerlink" title="适用范围"></a>适用范围</h2><p>策略模式适用于在算法策略上不同但是需要相互切换的场景，我们无需关注算法内部细节，而且他们之间可以随意切换使用，非常自由。</p><h2 id="优点缺点"><a href="#优点缺点" class="headerlink" title="优点缺点"></a>优点缺点</h2><p>策略模式优点就是只要实现接口，就可以扩展，切换十分自由，并且通过一个上下文环境来避免了逻辑条件判断语句，简化了操作。</p><p>策略模式的缺点是类的数量会变多，而且所有的类都要对调用者暴露，违背迪米特法则，实际应用中需要结合其他设计模式来修正这些缺点。</p><h2 id="策略枚举"><a href="#策略枚举" class="headerlink" title="策略枚举"></a>策略枚举</h2><p>策略模式还有一种很好的用法就是策略枚举，这里用一个非常典型的加减法计算器为例</p><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="keyword">enum</span> Calculator &#123;  </div><div class="line">    ADD(<span class="string">"+"</span>) &#123;  </div><div class="line">        <span class="meta">@Override</span>  </div><div class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">exec</span><span class="params">(<span class="keyword">int</span> a, <span class="keyword">int</span> b)</span> </span>&#123;   </div><div class="line">            <span class="keyword">return</span> a+b;  </div><div class="line">        &#125;  </div><div class="line">    &#125;,   </div><div class="line">    SUB(<span class="string">"-"</span>) &#123;  </div><div class="line">        <span class="meta">@Override</span>  </div><div class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">exec</span><span class="params">(<span class="keyword">int</span> a, <span class="keyword">int</span> b)</span> </span>&#123;   </div><div class="line">            <span class="keyword">return</span> a-b;  </div><div class="line">        &#125;  </div><div class="line">    &#125;;    </div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">int</span> <span class="title">exec</span><span class="params">(<span class="keyword">int</span> a, <span class="keyword">int</span> b)</span></span>;  </div><div class="line">    <span class="comment">//运算符  </span></div><div class="line">    <span class="keyword">private</span> String value = <span class="string">""</span>;  </div><div class="line">    <span class="function"><span class="keyword">private</span> <span class="title">Calculator</span><span class="params">(String value)</span> </span>&#123;  </div><div class="line">        <span class="keyword">this</span>.value = value;  </div><div class="line">    &#125; </div><div class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getValue</span><span class="params">()</span> </span>&#123;  </div><div class="line">        <span class="keyword">return</span> value;  </div><div class="line">    &#125;  </div><div class="line">&#125;</div></pre></td></tr></table></figure><ul><li>调用场景</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;  </div><div class="line"><span class="keyword">int</span> add = Calculator.ADD.exec(<span class="number">10</span>, <span class="number">30</span>);  </div><div class="line">    <span class="keyword">int</span> sub = Calculator.SUB.exec(<span class="number">10</span>, <span class="number">30</span>); </div><div class="line">&#125;</div></pre></td></tr></table></figure><p>非常简单，就是应用了一下枚举类，不过里面有着很明显的策略模式，这是一种很好的用法，用于处理不变的角色。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;什么是策略模式&quot;&gt;&lt;a href=&quot;#什么是策略模式&quot; class=&quot;headerlink&quot; title=&quot;什么是策略模式&quot;&gt;&lt;/a&gt;什么是策略模式&lt;/h2&gt;&lt;blockquote&gt;
&lt;p&gt;定义一组算法，将每个算法都封装起来，并且使它们之间可以互换。&lt;/p&gt;
&lt;/
      
    
    </summary>
    
    
      <category term="设计模式" scheme="http://fx109138.github.io/tags/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"/>
    
  </entry>
  
  <entry>
    <title>设计模式之责任链模式</title>
    <link href="http://fx109138.github.io/2017/09/21/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F%E4%B9%8B%E8%B4%A3%E4%BB%BB%E9%93%BE%E6%A8%A1%E5%BC%8F/"/>
    <id>http://fx109138.github.io/2017/09/21/设计模式之责任链模式/</id>
    <published>2017-09-21T12:54:52.000Z</published>
    <updated>2017-09-21T14:36:26.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="责任链模式的定义"><a href="#责任链模式的定义" class="headerlink" title="责任链模式的定义"></a>责任链模式的定义</h2><blockquote><p>使多个对象都有机会处理请求，从而避免了请求的发送者和接受者之间的耦合关系。将这些对象连成一条链，并沿着这条链传递该请求，直到有对象处理它为止。</p></blockquote><p>责任链模式重点就在链上，就好像击鼓传花一样，请求会在这个链上传递，在传递的过程中处理。</p><h2 id="举个栗子"><a href="#举个栗子" class="headerlink" title="举个栗子"></a>举个栗子</h2><p>责任链模式的模型图<br><img src="http://oux9g0njr.bkt.clouddn.com/17-9-21/23962467.jpg" alt=""></p><p>下面是具体编码</p><ul><li>处理者抽象类</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">Handler</span> </span>&#123;</div><div class="line">    <span class="comment">//下一处理者</span></div><div class="line">    <span class="keyword">private</span> Handler next;</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">final</span> Response <span class="title">handleRequest</span><span class="params">(Request request)</span></span>&#123;</div><div class="line">        Response response=<span class="keyword">null</span>;</div><div class="line">        <span class="comment">//判断是否为自己处理级别</span></div><div class="line">        <span class="keyword">if</span> (getHandlerLevel().equals(request.getRequestLevel()))&#123;</div><div class="line">            response=operate(request);</div><div class="line">        &#125;<span class="keyword">else</span> &#123;</div><div class="line">            <span class="keyword">if</span> (next!=<span class="keyword">null</span>)&#123;</div><div class="line">                response=next.handleRequest(request);</div><div class="line">            &#125;<span class="keyword">else</span> &#123;</div><div class="line"></div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">return</span> response;</div><div class="line">    &#125;</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setNext</span><span class="params">(Handler next)</span> </span>&#123;</div><div class="line">        <span class="keyword">this</span>.next = next;</div><div class="line">    &#125;</div><div class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">abstract</span> Level <span class="title">getHandlerLevel</span><span class="params">()</span></span>;</div><div class="line">    <span class="comment">//处理</span></div><div class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">abstract</span> Response <span class="title">operate</span><span class="params">(Request request)</span></span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure><ul><li>处理者实现</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ConcreteHandler1</span> <span class="keyword">extends</span> <span class="title">Handler</span> </span>&#123;</div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">protected</span> Level <span class="title">getHandlerLevel</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="comment">//设置处理级别</span></div><div class="line">        <span class="keyword">return</span> <span class="keyword">null</span>;</div><div class="line">    &#125;</div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">protected</span> Response <span class="title">operate</span><span class="params">(Request request)</span> </span>&#123;</div><div class="line">        <span class="comment">//处理逻辑</span></div><div class="line">        <span class="keyword">return</span> <span class="keyword">null</span>;</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ConcreteHandler2</span> <span class="keyword">extends</span> <span class="title">Handler</span> </span>&#123;</div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">protected</span> Level <span class="title">getHandlerLevel</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="comment">//设置处理级别</span></div><div class="line">        <span class="keyword">return</span> <span class="keyword">null</span>;</div><div class="line">    &#125;</div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">protected</span> Response <span class="title">operate</span><span class="params">(Request request)</span> </span>&#123;</div><div class="line">        <span class="comment">//处理逻辑</span></div><div class="line">        <span class="keyword">return</span> <span class="keyword">null</span>;</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ConcreteHandler3</span> <span class="keyword">extends</span> <span class="title">Handler</span> </span>&#123;</div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">protected</span> Level <span class="title">getHandlerLevel</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="comment">//设置处理级别</span></div><div class="line">        <span class="keyword">return</span> <span class="keyword">null</span>;</div><div class="line">    &#125;</div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">protected</span> Response <span class="title">operate</span><span class="params">(Request request)</span> </span>&#123;</div><div class="line">        <span class="comment">//处理逻辑</span></div><div class="line">        <span class="keyword">return</span> <span class="keyword">null</span>;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure><ul><li>请求</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Request</span> </span>&#123;</div><div class="line">    <span class="function"><span class="keyword">public</span> Level <span class="title">getRequestLevel</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="comment">//请求等级</span></div><div class="line">        <span class="keyword">return</span> <span class="keyword">null</span>;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure><ul><li>结果</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Response</span> </span>&#123;</div><div class="line">    <span class="comment">//处理结果</span></div><div class="line">&#125;</div></pre></td></tr></table></figure><ul><li>级别</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Level</span> </span>&#123;</div><div class="line">    <span class="comment">//请求和处理等级</span></div><div class="line">&#125;</div></pre></td></tr></table></figure><ul><li>调用场景</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Client</span> </span>&#123;</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</div><div class="line">        Handler handler1 = <span class="keyword">new</span> ConcreteHandler1();</div><div class="line">        Handler handler2 = <span class="keyword">new</span> ConcreteHandler2();</div><div class="line">        Handler handler3 = <span class="keyword">new</span> ConcreteHandler3();</div><div class="line">        <span class="comment">//按照123顺序处理</span></div><div class="line">        handler1.setNext(handler2);</div><div class="line">        handler2.setNext(handler3);</div><div class="line">        Response response = handler1.handleRequest(<span class="keyword">new</span> Request());</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure><p>这样就完成了一条责任链的实现，一个请求传过来，逐级处理，非常方便，代码也不难理解。</p><h2 id="适用范围"><a href="#适用范围" class="headerlink" title="适用范围"></a>适用范围</h2><p>责任链模式可以用在逐级处理或者追加逻辑的场景里，由于责任链条是自由组合的，连接起来非常方便，自由组合度也很高。</p><h2 id="优点缺点"><a href="#优点缺点" class="headerlink" title="优点缺点"></a>优点缺点</h2><p>责任链模式的优点在于请求和结果是分开的，请求者不必关心处理者，责任链是一个整体，不需要关心细节，有助于解耦。</p><p>责任链模式的缺点一方面是性能问题，一条整的责任链必须遍历一遍才能得到结果，另一方面是调试的不方便，不容易排查某一个节点的问题。</p><h2 id="注意事项"><a href="#注意事项" class="headerlink" title="注意事项"></a>注意事项</h2><p>只用责任链模式要注意不要太长，要学会控制责任链的复杂程度，否则会严重影响性能。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;责任链模式的定义&quot;&gt;&lt;a href=&quot;#责任链模式的定义&quot; class=&quot;headerlink&quot; title=&quot;责任链模式的定义&quot;&gt;&lt;/a&gt;责任链模式的定义&lt;/h2&gt;&lt;blockquote&gt;
&lt;p&gt;使多个对象都有机会处理请求，从而避免了请求的发送者和接受者之间的耦
      
    
    </summary>
    
    
      <category term="设计模式" scheme="http://fx109138.github.io/tags/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"/>
    
  </entry>
  
  <entry>
    <title>设计模式之命令模式</title>
    <link href="http://fx109138.github.io/2017/09/21/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F%E4%B9%8B%E5%91%BD%E4%BB%A4%E6%A8%A1%E5%BC%8F/"/>
    <id>http://fx109138.github.io/2017/09/21/设计模式之命令模式/</id>
    <published>2017-09-21T10:49:10.000Z</published>
    <updated>2017-09-21T12:38:41.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="什么是命令模式"><a href="#什么是命令模式" class="headerlink" title="什么是命令模式"></a>什么是命令模式</h2><blockquote><p>将一个请求封装为一个对象，从而使你可用不同的请求对客户进行参数化; 对请求排队或记录请求日志，以及支持可撤销的操作。</p></blockquote><p>还是通过例子来理解这种设计模式。</p><h2 id="举个栗子"><a href="#举个栗子" class="headerlink" title="举个栗子"></a>举个栗子</h2><p>命令模式的模型图<br><img src="http://oux9g0njr.bkt.clouddn.com/17-9-21/11670976.jpg" alt=""></p><p>命令模式有三种角色：接收者、命令、调用者，他的封装性特别好，下面来体验一下编码过程</p><ul><li>抽象接收者及实现</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">Receiver</span> </span>&#123;</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">void</span> <span class="title">action</span><span class="params">()</span></span>;</div><div class="line">&#125;</div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ConcreteReceiver</span> <span class="keyword">extends</span> <span class="title">Receiver</span> </span>&#123;</div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">action</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="comment">//接收者任务</span></div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure><ul><li>抽象命令及实现</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">Command</span> </span>&#123;</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">void</span> <span class="title">execute</span><span class="params">()</span></span>;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ConcreteCommand</span> <span class="keyword">extends</span> <span class="title">Command</span> </span>&#123;</div><div class="line">    <span class="keyword">private</span> Receiver receiver;</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="title">ConcreteCommand</span><span class="params">(Receiver receiver)</span> </span>&#123;</div><div class="line">        <span class="keyword">this</span>.receiver = receiver;</div><div class="line">    &#125;</div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">execute</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="comment">//执行命令</span></div><div class="line">        receiver.action();</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure><ul><li>调用者</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Invoker</span> </span>&#123;</div><div class="line">    <span class="comment">//接受并执行</span></div><div class="line">    <span class="keyword">private</span> Command command;</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setCommand</span><span class="params">(Command command)</span> </span>&#123;</div><div class="line">        <span class="keyword">this</span>.command = command;</div><div class="line">    &#125;</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">invokeCommand</span><span class="params">()</span></span>&#123;</div><div class="line">        command.execute();</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure><ul><li>使用场景</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Client</span> </span>&#123;</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</div><div class="line">        Invoker invoker=<span class="keyword">new</span> Invoker();</div><div class="line">        Receiver receiver=<span class="keyword">new</span> ConcreteReceiver();</div><div class="line">        Command command=<span class="keyword">new</span> ConcreteCommand(receiver);</div><div class="line">        invoker.setCommand(command);</div><div class="line">        invoker.invokeCommand();</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure><p>这就是命令模式，它的特点是命令的接收者和调用者之间没有任何耦合，这样可以很容易地应对各种变化。</p><h2 id="适用范围"><a href="#适用范围" class="headerlink" title="适用范围"></a>适用范围</h2><p>命令模式的使用和它的名字一样，只要是命令的地方就可以用命令模式，结合其他设计模式使用会更加能发挥它的价值。</p><h2 id="优点缺点"><a href="#优点缺点" class="headerlink" title="优点缺点"></a>优点缺点</h2><p>优点就是命令的接受和调用完全解耦，有利于扩展，而且开发简单。</p><p>缺点就是命令过多的时候类的数量会增加，如果不结合其他设计模式难以维护。</p><h2 id="封闭接收者的命令模式"><a href="#封闭接收者的命令模式" class="headerlink" title="封闭接收者的命令模式"></a>封闭接收者的命令模式</h2><p>在命令模式中，其实有时候调用者无需知道命令的接收者，此时可以换一种方式，变更代码如下</p><ul><li>抽象命令及实现</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">Command</span> </span>&#123;</div><div class="line">    <span class="keyword">protected</span> <span class="keyword">final</span> Receiver receiver;</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Command</span><span class="params">(Receiver receiver)</span> </span>&#123;</div><div class="line">        <span class="keyword">this</span>.receiver = receiver;</div><div class="line">    &#125;</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">void</span> <span class="title">execute</span><span class="params">()</span></span>;</div><div class="line">&#125;</div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ConcreteCommand</span> <span class="keyword">extends</span> <span class="title">Command</span> </span>&#123;</div><div class="line">    <span class="comment">//默认接收者</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="title">ConcreteCommand</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">super</span>(<span class="keyword">new</span> ConcreteReceiver());</div><div class="line">    &#125;</div><div class="line">    <span class="comment">//自定义接收者</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="title">ConcreteCommand</span><span class="params">(Receiver receiver)</span> </span>&#123;</div><div class="line">        <span class="keyword">super</span>(receiver);</div><div class="line">    &#125;</div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">execute</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="comment">//执行命令</span></div><div class="line">        receiver.action();</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure><ul><li>调用场景</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Client</span> </span>&#123;</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</div><div class="line">        Invoker invoker=<span class="keyword">new</span> Invoker();</div><div class="line">        Command command=<span class="keyword">new</span> ConcreteCommand();</div><div class="line">        invoker.setCommand(command);</div><div class="line">        invoker.invokeCommand();</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure><p>这样高层模块就无需知道具体接收者是谁了，这也是命令模式的一种很常用的用法。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;什么是命令模式&quot;&gt;&lt;a href=&quot;#什么是命令模式&quot; class=&quot;headerlink&quot; title=&quot;什么是命令模式&quot;&gt;&lt;/a&gt;什么是命令模式&lt;/h2&gt;&lt;blockquote&gt;
&lt;p&gt;将一个请求封装为一个对象，从而使你可用不同的请求对客户进行参数化; 对请求
      
    
    </summary>
    
    
      <category term="设计模式" scheme="http://fx109138.github.io/tags/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"/>
    
  </entry>
  
  <entry>
    <title>设计模式之中介者模式</title>
    <link href="http://fx109138.github.io/2017/09/20/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F%E4%B9%8B%E4%B8%AD%E4%BB%8B%E8%80%85%E6%A8%A1%E5%BC%8F/"/>
    <id>http://fx109138.github.io/2017/09/20/设计模式之中介者模式/</id>
    <published>2017-09-20T08:32:38.000Z</published>
    <updated>2017-09-21T09:28:47.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="什么是中介者模式"><a href="#什么是中介者模式" class="headerlink" title="什么是中介者模式"></a>什么是中介者模式</h2><blockquote><p>定义一个中介对象来封装系列对象之间的交互。中介者使各个对象不需要显示地相互引用，从而使其耦合性松散，而且可以独立地改变他们之间的交互。</p></blockquote><p>看完定义其实大概就能知道中介者模式是什么样子了，中介者模式可以把复杂的网状交互模式转化成清晰的星形交互模式，从而降低程序间耦合。</p><h2 id="举个栗子"><a href="#举个栗子" class="headerlink" title="举个栗子"></a>举个栗子</h2><p>中介者模式模型如下<br><img src="http://oux9g0njr.bkt.clouddn.com/17-9-21/34911819.jpg" alt=""></p><p>中介者模式有三种角色组成，分别为抽象中介者、具体中介者、同事，下面是编码实现</p><ul><li>抽象中介者</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">Mediator</span> </span>&#123;</div><div class="line">    <span class="comment">//通过set方法传入同事类</span></div><div class="line">    <span class="keyword">protected</span> ConcreteColleague1 concreteColleague1;</div><div class="line">    <span class="keyword">protected</span> ConcreteColleague2 concreteColleague2;</div><div class="line">    <span class="function"><span class="keyword">public</span> ConcreteColleague1 <span class="title">getConcreteColleague1</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">return</span> concreteColleague1;</div><div class="line">    &#125;</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setConcreteColleague1</span><span class="params">(ConcreteColleague1 concreteColleague1)</span> </span>&#123;</div><div class="line">        <span class="keyword">this</span>.concreteColleague1 = concreteColleague1;</div><div class="line">    &#125;</div><div class="line">    <span class="function"><span class="keyword">public</span> ConcreteColleague2 <span class="title">getConcreteColleague2</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">return</span> concreteColleague2;</div><div class="line">    &#125;</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setConcreteColleague2</span><span class="params">(ConcreteColleague2 concreteColleague2)</span> </span>&#123;</div><div class="line">        <span class="keyword">this</span>.concreteColleague2 = concreteColleague2;</div><div class="line">    &#125;</div><div class="line">    <span class="comment">//中介者自身实现</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">void</span> <span class="title">method1</span><span class="params">()</span></span>;</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">void</span> <span class="title">method2</span><span class="params">()</span></span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure><ul><li>具体中介者</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ConcreteMediator</span> <span class="keyword">extends</span> <span class="title">Mediator</span> </span>&#123;</div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">method1</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="comment">//可以在中介者中调用同事方法</span></div><div class="line">        <span class="keyword">super</span>.concreteColleague1.c1Method();</div><div class="line">        <span class="keyword">super</span>.concreteColleague2.c2Method();</div><div class="line">    &#125;</div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">method2</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">super</span>.concreteColleague1.c1Method();</div><div class="line">        <span class="keyword">super</span>.concreteColleague2.c2Method();</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure><ul><li>抽象同事</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">Colleague</span> </span>&#123;</div><div class="line">    <span class="keyword">protected</span> Mediator mediator;</div><div class="line">    <span class="comment">//通过构造方法传入中介者</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Colleague</span><span class="params">(Mediator mediator)</span> </span>&#123;</div><div class="line">        <span class="keyword">this</span>.mediator = mediator;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure><ul><li>具体同事</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ConcreteColleague1</span> <span class="keyword">extends</span> <span class="title">Colleague</span> </span>&#123;</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="title">ConcreteColleague1</span><span class="params">(Mediator mediator)</span> </span>&#123;</div><div class="line">        <span class="keyword">super</span>(mediator);</div><div class="line">    &#125;</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">c1Method</span><span class="params">()</span></span>&#123;</div><div class="line">        <span class="comment">//自身方法</span></div><div class="line">    &#125;</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">mMethod1</span><span class="params">()</span></span>&#123;</div><div class="line">        <span class="comment">//可以调用中介者的方法</span></div><div class="line">        <span class="keyword">super</span>.mediator.method1();</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ConcreteColleague2</span> <span class="keyword">extends</span> <span class="title">Colleague</span> </span>&#123;</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="title">ConcreteColleague2</span><span class="params">(Mediator mediator)</span> </span>&#123;</div><div class="line">        <span class="keyword">super</span>(mediator);</div><div class="line">    &#125;</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">c2Method</span><span class="params">()</span></span>&#123;</div><div class="line">        <span class="comment">//自身方法</span></div><div class="line">    &#125;</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">mMethod2</span><span class="params">()</span></span>&#123;</div><div class="line">        <span class="comment">//可以调用中介者的方法</span></div><div class="line">        <span class="keyword">super</span>.mediator.method2();</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure><p>以上就是中介者模式，我们可以看到，同事是通过set传入的，中介者是通过构造方法传入的，这是因为中介者不依赖同事，而同事必须要依赖中介者。通过这种方式就可以把一对多的关系转化成一对一的关系。</p><h2 id="适用范围"><a href="#适用范围" class="headerlink" title="适用范围"></a>适用范围</h2><p>中介者模式适用于处理复杂的依赖关系，当类间结构非常复杂难以理清时候，适当使用中介者模式有利于开发。</p><h2 id="优点缺点"><a href="#优点缺点" class="headerlink" title="优点缺点"></a>优点缺点</h2><p>中介者模式的优点是减少了依赖关系，降低了类之间的耦合，使程序更加清晰。</p><p>中介者模式的缺点是中介者类本身会变得很复杂，类中逻辑可能不易处理。</p><h2 id="注意事项"><a href="#注意事项" class="headerlink" title="注意事项"></a>注意事项</h2><p>在面向对象中，独立存在的类是没有意义的，只要有类就一定有依赖，那么是每次都要用中介者模式吗？答案是否定的。中介者模式可以解决依赖关于复杂的问题，但是如果依赖本来不多，强行使用中介者模式可能会给开发带来不必要的麻烦，所以不要滥用。</p><p>一个典型的应用者模式就是MVC中的controller，它把模型层和视图层分离，通过内部调度解除了二者之间的耦合，可以提升框架的扩展性，值得借鉴。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;什么是中介者模式&quot;&gt;&lt;a href=&quot;#什么是中介者模式&quot; class=&quot;headerlink&quot; title=&quot;什么是中介者模式&quot;&gt;&lt;/a&gt;什么是中介者模式&lt;/h2&gt;&lt;blockquote&gt;
&lt;p&gt;定义一个中介对象来封装系列对象之间的交互。中介者使各个对象不需要显
      
    
    </summary>
    
    
      <category term="设计模式" scheme="http://fx109138.github.io/tags/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"/>
    
  </entry>
  
  <entry>
    <title>设计模式之模板方法模式</title>
    <link href="http://fx109138.github.io/2017/09/20/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F%E4%B9%8B%E6%A8%A1%E6%9D%BF%E6%96%B9%E6%B3%95%E6%A8%A1%E5%BC%8F/"/>
    <id>http://fx109138.github.io/2017/09/20/设计模式之模板方法模式/</id>
    <published>2017-09-20T07:19:32.000Z</published>
    <updated>2017-09-20T08:30:02.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="模板方法模式的定义"><a href="#模板方法模式的定义" class="headerlink" title="模板方法模式的定义"></a>模板方法模式的定义</h2><blockquote><p>定义一个算法中的操作框架，而将一些步骤延迟到子类中。使得子类可以不改变算法的结构即可重定义该算法的某些特定步骤。</p></blockquote><p>模板方法模式是一种行为型模式，它是一种很简单很容易理解的模式。</p><h2 id="举个栗子"><a href="#举个栗子" class="headerlink" title="举个栗子"></a>举个栗子</h2><p>模板方法模式的模型图<br><img src="http://oux9g0njr.bkt.clouddn.com/17-9-20/94136974.jpg" alt=""></p><p>类结构非常简单，编码也很简单</p><ul><li>抽象模板类</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">AbstractClass</span> </span>&#123;</div><div class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">abstract</span> <span class="keyword">void</span> <span class="title">operation1</span><span class="params">()</span></span>;</div><div class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">abstract</span> <span class="keyword">void</span> <span class="title">operation2</span><span class="params">()</span></span>;</div><div class="line">    <span class="comment">//模板方法</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">templateMethod</span><span class="params">()</span> </span>&#123;</div><div class="line">        operation1();</div><div class="line">        operation2();</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure><ul><li>具体模板类</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ConcreteClass1</span> <span class="keyword">extends</span> <span class="title">AbstractClass</span> </span>&#123;</div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">operation1</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="comment">//实现</span></div><div class="line">    &#125;</div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">operation2</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="comment">//实现</span></div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ConcreteClass2</span> <span class="keyword">extends</span> <span class="title">AbstractClass</span> </span>&#123;</div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">operation1</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="comment">//实现</span></div><div class="line">    &#125;</div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">operation2</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="comment">//实现</span></div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure><ul><li>调用场景</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Client</span> </span>&#123;</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</div><div class="line">        AbstractClass class1=<span class="keyword">new</span> ConcreteClass1();</div><div class="line">        AbstractClass class2=<span class="keyword">new</span> ConcreteClass2();</div><div class="line">        class1.templateMethod();</div><div class="line">        class2.templateMethod();</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure><p>这样就实现了模板方法模式，在模板方法中，调用完全由模板方法完成。抽象模板中的基本方法尽量设计为protected类型，符合迪米特法则，不需要暴露的属性或方法尽量不要设置为protected类型。实现类若非必要，尽量不要扩大父类中的访问权限。</p><h2 id="适用范围"><a href="#适用范围" class="headerlink" title="适用范围"></a>适用范围</h2><p>在多个子类有共有的方法，并且逻辑基本相同，或者可以有一个大的框架来实现核心逻辑，之类完成细枝末节的时候，模板方法是一种很好的选择。而且模板方法常常用来在重构的时候提取共有逻辑。</p><h2 id="优点缺点"><a href="#优点缺点" class="headerlink" title="优点缺点"></a>优点缺点</h2><p>模板方法模式封装了不变的东西，把变化交给子类扩展，符合开闭原则，有利于系统维护。</p><p>模板方法模式的缺点是它改变了我们以往的编程思维方式，由子类实现来决定父类行为，可能会造成学习成本变高的问题。</p><h2 id="注意事项"><a href="#注意事项" class="headerlink" title="注意事项"></a>注意事项</h2><p>上面的例子有没有问题？如果我想只执行模板里面的一部分功能我们有办法控制吗？这时候上面的模型就产生了缺陷，于是产生了模板方法中另一个概念–钩子方法。</p><h3 id="带有钩子方法的模板方法"><a href="#带有钩子方法的模板方法" class="headerlink" title="带有钩子方法的模板方法"></a>带有钩子方法的模板方法</h3><p>首先来看我们在上面的例子中添加一个钩子方法，模型如下<br><img src="http://oux9g0njr.bkt.clouddn.com/17-9-20/17368138.jpg" alt=""></p><p>修改的编码如下</p><ul><li>抽象模板类</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">AbstractClass</span> </span>&#123;</div><div class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">abstract</span> <span class="keyword">void</span> <span class="title">operation1</span><span class="params">()</span></span>;</div><div class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">abstract</span> <span class="keyword">void</span> <span class="title">operation2</span><span class="params">()</span></span>;</div><div class="line">    <span class="comment">//模板方法</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">templateMethod</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">if</span> (isHooked())&#123;</div><div class="line">            operation1();</div><div class="line">        &#125;</div><div class="line">        operation2();</div><div class="line">    &#125;</div><div class="line">    <span class="comment">//钩子方法</span></div><div class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">boolean</span> <span class="title">isHooked</span><span class="params">()</span></span>&#123;</div><div class="line">        <span class="keyword">return</span> <span class="keyword">true</span>;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure><ul><li>具体模板类</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ConcreteClass1</span> <span class="keyword">extends</span> <span class="title">AbstractClass</span> </span>&#123;</div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">operation1</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="comment">//实现</span></div><div class="line">    &#125;</div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">operation2</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="comment">//实现</span></div><div class="line">    &#125;</div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">boolean</span> <span class="title">isHooked</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">return</span> <span class="keyword">false</span>;</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ConcreteClass2</span> <span class="keyword">extends</span> <span class="title">AbstractClass</span> </span>&#123;</div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">operation1</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="comment">//实现</span></div><div class="line">    &#125;</div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">operation2</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="comment">//实现</span></div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure><p>调用场景不变。我们把在需要由子类控制的方法外添加了一层判断，由子类决定是否重写钩子方法来决定方法是否执行，这样就可以自由的控制调用，模板方法模式就健全了。</p><p>模板方法模式是一种极方便扩展的设计模式，很多开源框架的设计都采用了这种方式来实现扩展开发。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;模板方法模式的定义&quot;&gt;&lt;a href=&quot;#模板方法模式的定义&quot; class=&quot;headerlink&quot; title=&quot;模板方法模式的定义&quot;&gt;&lt;/a&gt;模板方法模式的定义&lt;/h2&gt;&lt;blockquote&gt;
&lt;p&gt;定义一个算法中的操作框架，而将一些步骤延迟到子类中。使得子
      
    
    </summary>
    
    
      <category term="设计模式" scheme="http://fx109138.github.io/tags/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"/>
    
  </entry>
  
  <entry>
    <title>设计模式之桥梁模式</title>
    <link href="http://fx109138.github.io/2017/09/20/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F%E4%B9%8B%E6%A1%A5%E6%A2%81%E6%A8%A1%E5%BC%8F/"/>
    <id>http://fx109138.github.io/2017/09/20/设计模式之桥梁模式/</id>
    <published>2017-09-20T06:07:05.000Z</published>
    <updated>2017-09-20T07:17:01.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="什么是桥梁模式"><a href="#什么是桥梁模式" class="headerlink" title="什么是桥梁模式"></a>什么是桥梁模式</h2><blockquote><p>将抽象和实现解耦，使得两者可以独立地变化。</p></blockquote><p>桥梁模式是最后一种结构型模式了，它也叫桥接模式，是一种重要的解耦手段。</p><h2 id="举个栗子"><a href="#举个栗子" class="headerlink" title="举个栗子"></a>举个栗子</h2><p><img src="http://oux9g0njr.bkt.clouddn.com/17-9-20/79787036.jpg" alt=""></p><p>桥梁模式一共有四种角色，下面是编码实现</p><ul><li>实现化角色</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">Implementor</span> </span>&#123;</div><div class="line">    <span class="function"><span class="keyword">void</span> <span class="title">operationImpl1</span><span class="params">()</span></span>;</div><div class="line">    <span class="function"><span class="keyword">void</span> <span class="title">operationImpl2</span><span class="params">()</span></span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure><ul><li>具体实现化角色</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ContreteImplementor</span> <span class="keyword">implements</span> <span class="title">Implementor</span> </span>&#123;</div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">operationImpl1</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="comment">//具体实现</span></div><div class="line">    &#125;</div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">operationImpl2</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="comment">//具体实现</span></div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure><ul><li>抽象化角色</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Abstraction</span> </span>&#123;</div><div class="line">    <span class="comment">//对实现化角色的引用</span></div><div class="line">    <span class="keyword">private</span> Implementor implementor;</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Abstraction</span><span class="params">(Implementor implementor)</span> </span>&#123;</div><div class="line">        <span class="keyword">this</span>.implementor = implementor;</div><div class="line">    &#125;</div><div class="line">    <span class="comment">//自身属性行为</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">operation</span><span class="params">()</span></span>&#123;</div><div class="line">        implementor.operationImpl1();</div><div class="line">    &#125;</div><div class="line">    <span class="function"><span class="keyword">public</span> Implementor <span class="title">getImplementor</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">return</span> implementor;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure><ul><li>修正抽象化角色</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">RefiendAbstraction</span> <span class="keyword">extends</span> <span class="title">Abstraction</span> </span>&#123;</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="title">RefiendAbstraction</span><span class="params">(Implementor implementor)</span> </span>&#123;</div><div class="line">        <span class="keyword">super</span>(implementor);</div><div class="line">    &#125;</div><div class="line">    <span class="comment">//修正父类行为</span></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">operation</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">super</span>.operation();</div><div class="line">        <span class="keyword">super</span>.getImplementor().operationImpl2();</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure><ul><li>调用场景</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Client</span> </span>&#123;</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</div><div class="line">        Implementor implementor = <span class="keyword">new</span> ContreteImplementor();</div><div class="line">        Abstraction abstraction = <span class="keyword">new</span> RefiendAbstraction(implementor);</div><div class="line">        abstraction.operation();</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure><p>上面的结构一点都不复杂，只要熟练掌握面向对象基本思想就能写出上面的代码，但是你会发现，这个程序的条理非常清晰，结构很完整，而且扩展性也很好，这就是桥梁模式。它好像搭了一座桥，通过抽象建立联系，实现了类结构之间的松耦合，是一种很好用的设计模式。</p><h2 id="适用范围"><a href="#适用范围" class="headerlink" title="适用范围"></a>适用范围</h2><p>桥梁模式适用于当继承的方式受限太大，使用继承的方式制约较大的时候，桥梁模式可以很好的解决代码复用的问题。</p><h2 id="优点缺点"><a href="#优点缺点" class="headerlink" title="优点缺点"></a>优点缺点</h2><p>桥梁模式的优点是可以解决由继承带来的复杂限制问题，实现了低耦合，高扩展性，抽象和实现达到隔离，双方可以自由扩展。</p><h2 id="注意事项"><a href="#注意事项" class="headerlink" title="注意事项"></a>注意事项</h2><p>桥梁模式的根本目的在于对变化的封装，他能够在最小的范围内避免危险，但是不代表继承就一无是处，使用的时候要综合考量。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;什么是桥梁模式&quot;&gt;&lt;a href=&quot;#什么是桥梁模式&quot; class=&quot;headerlink&quot; title=&quot;什么是桥梁模式&quot;&gt;&lt;/a&gt;什么是桥梁模式&lt;/h2&gt;&lt;blockquote&gt;
&lt;p&gt;将抽象和实现解耦，使得两者可以独立地变化。&lt;/p&gt;
&lt;/blockquot
      
    
    </summary>
    
    
      <category term="设计模式" scheme="http://fx109138.github.io/tags/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"/>
    
  </entry>
  
  <entry>
    <title>设计模式之享元模式</title>
    <link href="http://fx109138.github.io/2017/09/19/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F%E4%B9%8B%E4%BA%AB%E5%85%83%E6%A8%A1%E5%BC%8F/"/>
    <id>http://fx109138.github.io/2017/09/19/设计模式之享元模式/</id>
    <published>2017-09-19T13:34:36.000Z</published>
    <updated>2017-09-20T06:05:45.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="享元模式的定义"><a href="#享元模式的定义" class="headerlink" title="享元模式的定义"></a>享元模式的定义</h2><blockquote><p>运用共享技术有效的支持大量细粒度的对象。</p></blockquote><p>享元模式的定义只有这一句，它是池技术的重要实现方式，重点在于细粒度和共享。</p><h2 id="举个栗子"><a href="#举个栗子" class="headerlink" title="举个栗子"></a>举个栗子</h2><p><img src="http://oux9g0njr.bkt.clouddn.com/17-9-20/14209145.jpg" alt=""></p><p>享元模式包含四种角色，两种状态，我们把可以共享的信息，和环境无关的部分称为内部状态，反之为外部状态，四种角色为抽象享元角色、具体享元角色、不可共享的享元角色、享元工厂，编码如下</p><ul><li>抽象享元角色</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">Flyweight</span> </span>&#123;</div><div class="line">    <span class="comment">//内部状态</span></div><div class="line">    <span class="keyword">private</span> String intrinsic;</div><div class="line">    <span class="comment">//外部状态</span></div><div class="line">    <span class="keyword">protected</span> <span class="keyword">final</span> String extrinsic;</div><div class="line">    <span class="function"><span class="keyword">protected</span> <span class="title">Flyweight</span><span class="params">(String extrinsic)</span> </span>&#123;</div><div class="line">        <span class="keyword">this</span>.extrinsic = extrinsic;</div><div class="line">    &#125;</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">void</span> <span class="title">operate</span><span class="params">()</span></span>;</div><div class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getIntrinsic</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">return</span> intrinsic;</div><div class="line">    &#125;</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setIntrinsic</span><span class="params">(String intrinsic)</span> </span>&#123;</div><div class="line">        <span class="keyword">this</span>.intrinsic = intrinsic;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure><ul><li>具体享元角色</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ConcreteFlyweight</span> <span class="keyword">extends</span> <span class="title">Flyweight</span> </span>&#123;</div><div class="line">    <span class="function"><span class="keyword">protected</span> <span class="title">ConcreteFlyweight</span><span class="params">(String extrinsic)</span> </span>&#123;</div><div class="line">        <span class="keyword">super</span>(extrinsic);</div><div class="line">    &#125;</div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">operate</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="comment">//实现业务</span></div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure><ul><li>享元工厂</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">FlyweightFactory</span> </span>&#123;</div><div class="line">    <span class="comment">//池容器</span></div><div class="line">    <span class="keyword">private</span> <span class="keyword">static</span> HashMap&lt;String,Flyweight&gt; pool=<span class="keyword">new</span> HashMap&lt;&gt;();</div><div class="line">    <span class="comment">//享元工厂</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Flyweight <span class="title">getFlyweight</span><span class="params">(String extrinsic)</span></span>&#123;</div><div class="line">        Flyweight flyweight=<span class="keyword">null</span>;</div><div class="line">        <span class="keyword">if</span> (pool.containsKey(extrinsic))&#123;</div><div class="line">            flyweight=pool.get(extrinsic);</div><div class="line">        &#125;<span class="keyword">else</span> &#123;</div><div class="line">            flyweight=<span class="keyword">new</span> ConcreteFlyweight(extrinsic);</div><div class="line">            pool.put(extrinsic,flyweight);</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">return</span> flyweight;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure><p>以上就实现了一个享元模式，还是很容易理解的，享元模式的特点就是实现资源共享，重复利用。</p><h2 id="适用范围"><a href="#适用范围" class="headerlink" title="适用范围"></a>适用范围</h2><p>享元模式适用于在系统中存在大量的相似的对象，他们的内部状态与外部环境无关，而重复的创建和销毁会带来极大地资源浪费，使用享元模式可以增加一个缓冲池，能够降低系统开销。</p><h2 id="优点缺点"><a href="#优点缺点" class="headerlink" title="优点缺点"></a>优点缺点</h2><p>享元模式的优点能减少对象创建，降低内存占用，提高程序性能。</p><p>享元模式的缺点是内外状态的分离增加了开发的难度，程序变复杂。</p><h2 id="注意事项"><a href="#注意事项" class="headerlink" title="注意事项"></a>注意事项</h2><p>享元模式要注意多线程下的安全问题，这个问题也是很常见的，需要注意。</p><p>另一个要注意的就是外部状态尽量使用java基本数据类型，否则会造成运行效率低的问题。</p><p>享元模式在java设计中非常常见，数据库连接池，线程池等等，是一种非常实用的设计模式。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;享元模式的定义&quot;&gt;&lt;a href=&quot;#享元模式的定义&quot; class=&quot;headerlink&quot; title=&quot;享元模式的定义&quot;&gt;&lt;/a&gt;享元模式的定义&lt;/h2&gt;&lt;blockquote&gt;
&lt;p&gt;运用共享技术有效的支持大量细粒度的对象。&lt;/p&gt;
&lt;/blockquote
      
    
    </summary>
    
    
      <category term="设计模式" scheme="http://fx109138.github.io/tags/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"/>
    
  </entry>
  
  <entry>
    <title>设计模式之门面模式</title>
    <link href="http://fx109138.github.io/2017/09/19/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F%E4%B9%8B%E9%97%A8%E9%9D%A2%E6%A8%A1%E5%BC%8F/"/>
    <id>http://fx109138.github.io/2017/09/19/设计模式之门面模式/</id>
    <published>2017-09-19T11:35:48.000Z</published>
    <updated>2017-09-19T13:32:18.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="什么是门面模式"><a href="#什么是门面模式" class="headerlink" title="什么是门面模式"></a>什么是门面模式</h2><blockquote><p>提供一个统一的接口去访问多个子系统的多个不同的接口，它为子系统中的一组接口提供一个统一的高层接口。使得子系统更容易使用。</p></blockquote><p>门面模式也叫外观模式，是一种很常用的封装模式。</p><h2 id="举个栗子"><a href="#举个栗子" class="headerlink" title="举个栗子"></a>举个栗子</h2><p>门面模式的模型图<br><img src="http://oux9g0njr.bkt.clouddn.com/17-9-19/37537963.jpg" alt=""></p><p>上面包含两种角色，门面角色和子系统角色，其中子系统可能是几组类，很多类，不过这不重要，门面模式就是通过统一的门面来完成下面的行为，下面是编码</p><ul><li>子系统</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ClassA</span> </span>&#123;</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">methodA</span><span class="params">()</span></span>&#123;</div><div class="line">        <span class="comment">//方法A</span></div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ClassB</span> </span>&#123;</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">methodB</span><span class="params">()</span></span>&#123;</div><div class="line">        <span class="comment">//方法B</span></div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ClassC</span> </span>&#123;</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">methodC</span><span class="params">()</span></span>&#123;</div><div class="line">        <span class="comment">//方法C</span></div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure><ul><li>门面</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Facade</span> </span>&#123;</div><div class="line">    <span class="keyword">private</span> ClassA classA = <span class="keyword">new</span> ClassA();</div><div class="line">    <span class="keyword">private</span> ClassB classB = <span class="keyword">new</span> ClassB();</div><div class="line">    <span class="keyword">private</span> ClassC classC = <span class="keyword">new</span> ClassC();</div><div class="line">    <span class="comment">//统一方法</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">methodA</span><span class="params">()</span> </span>&#123;</div><div class="line">        classA.methodA();</div><div class="line">    &#125;</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">methodB</span><span class="params">()</span> </span>&#123;</div><div class="line">        classB.methodB();</div><div class="line">    &#125;</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">methodC</span><span class="params">()</span> </span>&#123;</div><div class="line">        classC.methodC();</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure><p>在门面模式中，子系统并不知道门面的存在，门面和普通的调用者没什么区别。而对于真正的调用者而言，他们无需关心子系统有多么复杂，只要和门面进行交互即可，这就是门面模式。</p><h2 id="适用范围"><a href="#适用范围" class="headerlink" title="适用范围"></a>适用范围</h2><p>门面模式实现了一个极好的封装，在子系统复杂且相互独立的时候，使用门面模式可以无需关注细节。同时，深度的封装可以实现黑箱操作，可以防止过多的暴露带来的风险。</p><h2 id="优点缺点"><a href="#优点缺点" class="headerlink" title="优点缺点"></a>优点缺点</h2><p>门面模式把黑盒和白盒的交互通过门面连接起来，实现了两边程序的解耦，系统间无需直接依赖，这样程序更加灵活。同时也能增强系统的安全性。</p><p>门面模式的缺点就是门面作为系统的核心，一旦有接口增减就要面临着修改，这样不符合开闭原则。</p><h2 id="注意事项"><a href="#注意事项" class="headerlink" title="注意事项"></a>注意事项</h2><p>门面可以有多个，如果门面过大可以拆分，有特殊需求可以重组，提供新的门面的时候业务也无需委托子系统，只要委托给现有的系统即可。</p><p>注意门面模式不要依赖子系统内部逻辑，一个门面方法最好只委托给一个子系统的逻辑，这样可以避免子系统的逻辑依赖门面，不会破坏程序原有结构。如果需要充组就提供一个重组的子系统，总之，不要用门面来组合系统的逻辑。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;什么是门面模式&quot;&gt;&lt;a href=&quot;#什么是门面模式&quot; class=&quot;headerlink&quot; title=&quot;什么是门面模式&quot;&gt;&lt;/a&gt;什么是门面模式&lt;/h2&gt;&lt;blockquote&gt;
&lt;p&gt;提供一个统一的接口去访问多个子系统的多个不同的接口，它为子系统中的一组接口
      
    
    </summary>
    
    
      <category term="设计模式" scheme="http://fx109138.github.io/tags/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"/>
    
  </entry>
  
</feed>
